<?xml version="1.0" encoding="UTF-8" ?>

<project name="NextEuropa" default="help">

    <echo msg="Importing the ContinuousPHP specific Phing tasks." />
    <import file="vendor/continuousphp/phing-tasks/tasks.xml" />

    <!-- Delete the previous build. -->
    <target name="delete-platform">
        <!--
            During the Drupal installation process the settings folder is write
            protected. Ensure it is writeable so it can be removed.
         -->
        <if>
            <available file="${platform.build.settings.dir}" type="dir" />
            <then>
                <chmod mode="0777" failonerror="false" verbose="false" quiet="true">
                    <fileset dir="${platform.build.settings.dir}" />
                </chmod>
            </then>
        </if>

        <echo msg="Delete previous build." />
        <delete dir="${phing.project.build.dir}" includeemptydirs="true" failonerror="false" />
    </target>

    <!-- Make Drupal core. -->
    <target name="make-drupal-core">
        <!--
            Drupal core is created in a separate target because Drush make only
            allows to build in a pre-existing folder if the 'no-core' option is
            set.
        -->
        <echo msg="Make Drupal core." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${drupal.make}</param>
            <param>${platform.build.dir}</param>
            <option name="no-patch-txt"></option>
        </drush>
    </target>

    <!-- Make the platform. -->
    <target name="make-platform">
        <echo msg="Make the platform." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${platform.make}</param>
            <param>${platform.build.dir}</param>
            <!-- Increasing the concurrency improves the build time by a factor of 3. -->
            <option name="concurrency">10</option>
            <option name="no-patch-txt"></option>
            <!-- This option will allow us to build inside an existing folder. -->
            <option name="no-core"></option>
            <!-- Install all contributed projects inside the chosen profile. -->
            <option name="contrib-destination">profiles/${platform.profile.name}</option>
        </drush>
    </target>

    <!-- Make one of the profiles in order to build a multisite platform. -->
    <target name="make-multisite-platform">
        <!-- Override the location of the make file. -->
        <property name="platform.make" value="${platform.resources.dir}/${platform.profile.name}.make" override="yes" />
        <phingcall target="make-platform" />
    </target>

    <!-- Symlink the profile folders for easy development. -->
    <target name="link-platform-profiles">
        <!-- Delete the core profiles folder. -->
        <delete dir="${platform.build.profiles.dir}" />
        <!-- Symlink our profiles folder. -->
        <symlink link="${platform.build.profiles.dir}" target="${platform.resources.profiles.dir}" />
    </target>

    <!-- Copy the profile folders for deploying on production. -->
    <target name="copy-platform-profiles">
        <!-- Delete the core profiles folder so it can be replaced with ours. -->
        <delete dir="${platform.build.profiles.dir}" includeemptydirs="true" failonerror="true" />
        <!-- Copy our profiles folder. -->
        <copy todir="${platform.build.profiles.dir}">
            <fileset dir="${platform.resources.profiles.dir}">
                <include name="**"></include>
            </fileset>
        </copy>
    </target>

    <!-- Symlink various resources for easy development. -->
    <target name="link-platform-resources">
        <!-- Composer configuration. -->
        <symlink link="${platform.build.composer.json}" target="${platform.resources.composer.json}" />
        <symlink link="${platform.build.composer.lock}" target="${platform.resources.composer.lock}" />
    </target>

    <!-- Copy various resources for deploying on production. -->
    <target name="copy-platform-resources">
        <!-- Resources to copy to the website root. -->
        <copy todir="${platform.build.dir}">
            <fileset dir="${platform.resources.dir}">
                <!-- Composer configuration. -->
                <include name="composer.*"></include>
            </fileset>
        </copy>
    </target>

    <!-- Install Composer dependencies. -->
    <target name="install-platform-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.dir}" />
            <arg value="--no-dev" />
        </composer>
    </target>

    <!-- Install Composer dependencies, including optional development dependencies. -->
    <target name="install-platform-dev-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.dir}" />
        </composer>
    </target>

    <!-- Link site document root to Webserver document root. -->
    <target
        name="link-docroot"
        description="Create a symlink from the build folder to the webserver document root.">
        <symlink link="${server.docroot}" target="${platform.build.dir}" overwrite="true" />
    </target>

    <!-- Update .htaccess. -->
    <target name="update-htaccess">
        <if>
            <istrue value="${drupal.htaccess.append.text}" />
            <then>
                <append destfile="${drupal.htaccess.path}" text="${drupal.htaccess.append.text}" />
            </then>
        </if>
    </target>

	<!-- Setup file directory -->
    <target name="setup-files-directory">
		 <if>
            <istrue value="${platform.build.settings.dir}/files" />
            <then>
                <mkdir dir="${platform.build.settings.dir}/files/private_files" />
            </then>
        </if>
    </target>

    <!-- Install Composer dependencies for the build system. -->
    <target name="install-build-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${project.basedir}" />
        </composer>
    </target>

	<!-- Download the theme. -->
    <target name="download-platform-theme">
        <!--
            Only download it when it hasn't yet been downloaded.
         -->
        <if>
            <not>
                <available file="${theme.package.tarball}" type="file" />
            </not>
            <then>
                <echo msg="Starting to download the platform-theme." />
                <echo msg="This file will only be downloaded once and will be cached in ${theme.package.tarball}." />
                <echo msg="You can delete this cached file whenever you want to download a new version of the platform-theme." />
                <continuousphp-config token="${theme.package.token}" />
                <continuousphp-package
                    provider="${theme.package.provider}"
                    repository="${theme.package.repository}"
                    reference="${theme.package.reference}"
                    destination="${theme.package.destination}"
                    property="${theme.package.property}"
                />
                <echo msg="Downloaded platform-theme package reference ${platform.package.property}" />
            </then>
            <else>
                <echo msg="Skipping platform-theme download, it is already downloaded at ${theme.package.tarball}. Delete this file if you want to download the latest version." />
            </else>
        </if>
    </target>
	
	<!-- Unpack the theme. -->
    <target name="unpack-platform-theme" depends="download-platform-theme">
        <!-- Use the faster native commands on UNIX systems. -->
        <if>
            <os family="unix" />
            <then>
                <echo msg='unpack in "${theme.package.dir}"' />
				<exec
                    command='mkdir "${theme.package.dir}/platform-theme"'
                    dir="${project.basedir}"
                    passthru="true"
                />
				<exec
                    command='mkdir "${theme.package.dir}/platform-theme/build"'
                    dir="${project.basedir}"
                    passthru="true"
                />
                <exec
                    command='tar xzf "${theme.package.tarball}" -C "${theme.package.dir}/platform-theme/build"'
                    dir="${project.basedir}"
                    passthru="true"
                    checkreturn="true"
                />
            </then>
            <else>
                <untar file="${theme.package.tarball}" todir="${theme.package.dir}/platform-theme" />
            </else>
        </if>
    </target>
	
	<!-- Symlink the theme. -->
    <target name="theme-symlink">
        <!-- Symlink platform themes. -->
        <symlink link="${project.basedir}/profiles/common/themes/platform-theme" target="${project.basedir}/${theme.package.dir}/platform-theme/build" />
    </target>
	
	<!-- Clone the platform-theme. -->
    <target name="clone-platform-theme">
	    <echo msg='Clone platform-theme to "${theme.package.dir}/platform-theme"' />
    	<exec
            command='git clone "${theme.repo.url}"'
                    dir="${theme.package.dir}"
                    passthru="true"
                />
    </target>
	
	<target
        name="setup-platform-dev"
        description="Setup a local development version of the platform and theme.">
        <if>
            <equals arg1="${theme.target}" arg2="tarball"/>
		    <then>
                <phingcall target="unpack-platform-theme"/>
            </then>
            <else>
                <phingcall target="clone-platform-theme"/>
				<echo msg='Execute platform-theme build target' />
				<exec command='./bin/phing -buildfile ../platform-theme/build.xml build-theme-dev' dir="${project.basedir}" passthru="true" />
		    </else>
        </if>
		<phingcall target="theme-symlink"/>
    </target>
	
    <target
        name="build-platform-dev"
        description="Build a local development version of the platform."
        depends="install-build-dependencies, delete-platform, make-drupal-core, link-platform-profiles, make-platform, link-platform-resources, install-platform-dev-dependencies, setup-behat, setup-php-codesniffer, update-htaccess, setup-files-directory" />

    <target
        name="build-platform-dist"
        description="Build a version of the platform intended to distribute as a release package."
        depends="install-build-dependencies, delete-platform, make-drupal-core, copy-platform-profiles, make-platform, copy-platform-resources, install-platform-dependencies, setup-files-directory" />

    <target
        name="build-multisite-dist"
        description="Build a multisite version of the platform intended to distribute as a release package."
        depends="install-build-dependencies, delete-platform, make-drupal-core, copy-platform-profiles">

        <!-- First make the standard profile. -->
        <property name="platform.profile.name" value="multisite_drupal_standard" override="yes" />
        <phingcall target="make-multisite-platform" />

        <!-- Then make the communities profile. -->
        <property name="platform.profile.name" value="multisite_drupal_communities" override="yes" />
        <phingcall target="make-multisite-platform" />

        <!-- Call the remaining build targets. -->
        <phingcall target="copy-platform-resources" />
        <phingcall target="install-platform-dependencies" />
    </target>

</project>
