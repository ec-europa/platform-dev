<?php

/**
 * @file
 * This is the og_content_type_admin module for use with Organic Groups.
 */

// Constants to indicate whether a content type is assigned to a group.
define('OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP', 0);
define('OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP', 1);

// Constants to indicate whether a content type
// is activated/deactivated/required.
define('OG_CONTENT_TYPE_ADMIN_DEACTIVATED', 0);
define('OG_CONTENT_TYPE_ADMIN_ACTIVATED', 1);
define('OG_CONTENT_TYPE_ADMIN_REQUIRED', 2);

/**
 * Implements hook_help().
 *
 * Display help and module information.
 */
function og_content_type_admin_help($path, $arg) {

  $output = '';
  switch ($path) {
    case "admin/help#og_content_type_admin":
      $output = '<p>' . t("Allows the restriction of the use of content types by organic groups.
Site admins can setup which content types are available site-wide (outside groups), to new groups, and can assign types to individual groups.
Group owners can then activate or deactivate the types for use in their group.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 *
 * Valid permissions for this module.
 */
function og_content_type_admin_permission() {
  return array(
    'administer og content types' => array(
      'title' => t('Administrer Content Types in Organic Groups Content'),
      'description' => t('Allow owners determine which content type prefer.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * The menu item(s) for this module.
 */
function og_content_type_admin_menu() {
  global $user, $_menu;

  $items['admin/config/group/og_content_types'] = array(
    'title' => 'OG Content Types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_content_type_admin_main'),
    'access arguments' => array('administer og content types'),
    'description' => 'Administer which content types can be used by site-wide and by each Organic Group.',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/group/og_content_types/overview'] = array(
    'title' => 'Overview',
    'access arguments' => array('administer og content types'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/group/og_content_types/admin'] = array(
    'title' => 'Assign Content Types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_content_type_admin_admin'),
    'access arguments' => array('administer og content types'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/group/og_content_types/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_content_type_admin_confirm_delete'),
    'access arguments' => array('administer og content types'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%/ogct'] = array(
    'title' => 'Content Types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_content_type_admin_owner'),
    'access callback' => '_og_content_type_admin_is_admin_access_callback',
    'access arguments' => array(1),
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements callback to access "Content type" tab.
 */
function _og_content_type_admin_is_admin_access_callback($nid) {
  global $user;

  $group = node_load($nid);
  $og_administer_access = og_user_access('node', $nid, 'administer group');
  if ($og_administer_access) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function og_content_type_admin_theme() {
  $module_path = drupal_get_path('module', 'og_content_type_admin');

  return array(
    'og_content_type_admin_main' => array(
      'render element' => 'form',
    ),
    'og_content_type_admin_admin' => array(
      'render element' => 'form',
    ),
    'og_content_type_admin_owner' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_og_create_links().
 */
function og_content_type_admin_og_create_links($group) {
  global $user;
  $links = array();
  if ($group) {
    if (_og_content_type_admin_is_admin($group)) {
      $text = t('Manage group content types');
      $path = "node/$group->nid/ogct";
      $attributes = array('title' => t('Lets you decide which content types your group users can create.'));
      $links[] = l($text, $path, $attributes);
    }
  }
  return $links;
}

/**
 * Callback function: Add groups to administer the content types for.
 */
function og_content_type_admin_main(array $form, array &$form_state) {
  $admin = user_access('administer og content types');
  if ($admin) {
    $options = _og_content_type_get_all_groups();
    $added = _og_content_type_admin_get_added();
    foreach ($added as $group_id => $name) {
      if (array_key_exists($group_id, $options)) {
        unset($options[$group_id]);
      }
    }
    if (count($options)) {
      $form['group'] = array(
        '#type' => 'select',
        '#title' => t('Groups'),
        '#options' => $options,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Add group'),
      );
    }
  }
  return $form;
}

/**
 * Validate the group name before adding or saving it.
 */
function og_content_type_admin_main_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  if ($form_values['group']) {
    // Make sure the user isn't injecting something not on the list.
    $check_options = _og_content_type_admin_get_added();
    if ($form_values['op'] == t('Add group')) {
      if (array_key_exists($form_values['group'], $check_options)) {
        form_set_error('group', t('The group name %name is already added. Please choose another group name.', array('%name' => $form_values['group']['name'])));
      }
    }
  }
  else {
    form_set_error('name', t('You must specify a valid group name.'));
  }
}

/**
 * Submit the group name and id to be added to the database.
 */
function og_content_type_admin_main_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  if ($form_values['op'] == t('Add group')) {
    $all_groups = _og_content_type_get_all_groups();

    $fields = array(
      'gid' => $form_values['group'],
      'name' => $all_groups[$form_values['group']],
      'types_allowed' => '',
      'types_active' => '',
    );
    $ogid = db_insert('og_content_type_admin')->fields($fields)->execute();
    if (0 == $ogid) {
      drupal_set_message(t('The group has been added.'));
    }
    else {
      drupal_set_message(t('The group cannot be created with a problem in an insert query.'));
    }
  }
  $form_state['redirect'] = 'admin/config/group/og_content_types';
}

/**
 * Theme for the add page of the main function.
 */
function theme_og_content_type_admin_main($form) {
  $form = $form['form'];

  $header = array(t('Group'), array('data' => t('Operations'), 'colspan' => 2));
  $added_groups = _og_content_type_admin_get_added();

  // Keep the sitewide settings at the top...
  $name = $added_groups[-1];
  $admin = l(t('assign content types'), 'admin/config/group/og_content_types/admin/-1');
  $rows[] = array($name, $admin, NULL);
  // ...with the default group settings next...
  $name = $added_groups[0];
  $admin = l(t('assign content types'), 'admin/config/group/og_content_types/admin/0');
  $rows[] = array($name, $admin, NULL);
  // ...then finish the rest in alphabetical order.
  foreach ($added_groups as $gid => $name) {
    if ($gid != -1 && $gid != 0) {
      $admin = l(t('assign content types'), 'admin/config/group/og_content_types/admin/' . $gid);
      $delete = l(t('delete'), 'admin/config/group/og_content_types/delete/' . $gid);
      $rows[] = array($name, $admin, $delete);
    }
  }

  $rows[] = array(
    drupal_render($form['group']),
    array(
      'data' => drupal_render($form['submit']),
      'colspan' => 2,
    ),
  );

  $output = drupal_render_children($form);

  $content_table = array(
    'header' => $header,
    'rows'   => $rows,
    'sticky' => FALSE,
    'caption' => NULL,
    'empty'  => NULL,
    'colgroups' => NULL,
    'attributes' => array(),
  );
  $output .= theme_table($content_table);

  return $output;
}

/**
 * Returns a confirmation page for deleting a group.
 */
function og_content_type_admin_confirm_delete($form, &$form_state, $gid = NULL) {
  if ($gid == NULL) {
    drupal_goto('admin/config/group/og_content_types');
    return;
  }

  $result = db_select('og_content_type_admin', 'octa')
    ->fields('octa', array('gid', 'name'))
    ->condition('gid', $gid, '=')
    ->execute()
    ->fetchAssoc();

  $form['name'] = array('#type' => 'value', '#value' => $result['name']);
  $form['gid'] = array('#type' => 'value', '#value' => $gid);
  $return_address = 'admin/config/group/og_content_types';
  $form = confirm_form($form, t('Are you sure you want to delete the group %name from the content type manager?',
    array('%name' => $result['name'])), $return_address,
    t('Deleting a group here will revert the content types associated with it to the defaults. This action cannot be undone.'), t('Delete'), t('Cancel'));

  return $form;
}

/**
 * Implements of forms api _submit call.
 */
function og_content_type_admin_confirm_delete_submit($form, &$form_state) {
  $form_values = $form_state['values'];

  $dbquery = db_delete('og_content_type_admin')
    ->condition('gid', $form_values['gid'])
    ->execute();
  if ($dbquery) {
    drupal_set_message(t('The group %gid has been removed from the content type admin table.', array('%gid' => $form_values['name'])));
    watchdog('content', 'og_content_type_admin: deleted %gid.', array('%gid' => $form_values['name']));
  }
  $form_state['redirect'] = 'admin/config/group/og_content_types';
}

/**
 * Callback function: Assign or Require content types to groups.
 */
function og_content_type_admin_admin($form, &$form_state, $gid = NULL) {
  if ($gid == NULL) {
    $results = db_select('og_content_type_admin', 'octa')
      ->fields('octa', array('gid', 'name', 'types_allowed', 'types_active'))
      ->orderBy('name', 'ASC')
      ->execute();
    $coll = 1;
  }
  else {

    $results = db_select('og_content_type_admin', 'octa')
      ->fields('octa', array('gid', 'name', 'types_allowed', 'types_active'))
      ->condition('gid', $gid, '=')
      ->execute();
    $coll = 0;
  }

  // Update 'og_content_type_admin' table.
  $node_types_types = _og_content_type_admin_update_types(-1);

  $result_site_wide = db_select('og_content_type_admin', 'octa')
    ->fields('octa', array('gid', 'name', 'types_allowed', 'types_active'))
    ->condition('gid', -1, '=')
    ->execute()
    ->fetchAssoc();

  $site_wide_allowed = unserialize($result_site_wide['types_allowed']);
  $site_wide_required = unserialize($result_site_wide['types_active']);

  $form['groups'] = array('#tree' => TRUE);
  while ($result = $results->fetchAssoc()) {
    $form['groups'][$result['name']] = array(
      '#tree' => TRUE,
    );
    $form['groups'][$result['name']]['coll'] = array('#value' => $coll);
    $form['groups'][$result['name']]['gid'] = array('#value' => $result['gid'], '#type' => 'hidden');
    if ($result['gid'] != -1) {
      // Update 'og_content_type_admin' table.
      $node_types_types = _og_content_type_admin_update_types($result['gid']);

      $assigned_status = unserialize($result['types_allowed']);
      $required_status = unserialize($result['types_active']);

      foreach ($node_types_types as $type => $value) {
        $type_name = node_type_get_name($type);
        if (!_og_content_type_admin_is_group_type($type) && _og_content_type_admin_is_group_content($type)) {
          $form['groups'][$result['name']][$type]['name'] = array('#markup' => $type_name);
          $form['groups'][$result['name']][$type]['name2'] = array(
            '#type' => 'value',
            '#value' => $type_name,
          );
          $form['groups'][$result['name']][$type]['allowed'] = array(
            '#type' => 'checkbox',
            '#return_value' => OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP,
          );

          // Allow field.
          if ($site_wide_allowed[$type] == OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP) {
            $form['groups'][$result['name']][$type]['allowed']['#disabled'] = TRUE;
            $form['groups'][$result['name']][$type]['allowed']['#default_value'] = OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP;
            $form['groups'][$result['name']][$type]['allowed']['#title'] = "This is not allowed by the 'Site Wide' settings.";
          }
          elseif (isset($assigned_status[$type]) && $assigned_status[$type] != OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP) {
            $form['groups'][$result['name']][$type]['allowed']['#default_value'] = OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP;
          }
          else {
            $form['groups'][$result['name']][$type]['allowed']['#default_value'] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
          }
          $form['groups'][$result['name']][$type]['required'] = array(
            '#type' => 'checkbox',
            '#return_value' => OG_CONTENT_TYPE_ADMIN_REQUIRED,
          );
          // Require field.
          if ($site_wide_allowed[$type] == OG_CONTENT_TYPE_ADMIN_DEACTIVATED) {
            $form['groups'][$result['name']][$type]['required']['#disabled'] = TRUE;
            $form['groups'][$result['name']][$type]['required']['#default_value'] = OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP;
          }
          elseif (isset($site_wide_required[$type]) && $site_wide_required[$type] != OG_CONTENT_TYPE_ADMIN_REQUIRED) {
            $form['groups'][$result['name']][$type]['required']['#default_value'] = $required_status[$type];
          }
          else {
            $form['groups'][$result['name']][$type]['required']['#default_value'] = OG_CONTENT_TYPE_ADMIN_REQUIRED;
            $form['groups'][$result['name']][$type]['required']['#disabled'] = TRUE;
            $form['groups'][$result['name']][$type]['required']['#title'] = "This is required by the 'Site Wide' settings.";
            $form['groups'][$result['name']][$type]['allowed']['#default_value'] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
            $form['groups'][$result['name']][$type]['allowed']['#disabled'] = TRUE;
          }
        }
      }
    }
    else {
      $assigned_status = unserialize($result['types_allowed']);
      $required_status = unserialize($result['types_active']);

      foreach ($node_types_types as $type => $value) {
        $type_name = node_type_get_name($type);
        if (!_og_content_type_admin_is_group_type($type) && _og_content_type_admin_is_group_content($type)) {
          $form['groups'][$result['name']][$type]['name'] = array('#markup' => $type_name);
          $form['groups'][$result['name']][$type]['allowed'] = array(
            '#type' => 'checkbox',
          );

          if (isset($assigned_status[$type]) && $assigned_status[$type] != OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP) {
            $form['groups'][$result['name']][$type]['allowed']['#default_value'] = OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP;
          }
          else {
            $form['groups'][$result['name']][$type]['allowed']['#default_value'] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
          }
          $form['groups'][$result['name']][$type]['required'] = array(
            '#type' => 'checkbox',
            '#default_value' => (isset($required_status[$type])) ? $required_status[$type] : 1,
            '#return_value' => OG_CONTENT_TYPE_ADMIN_REQUIRED,
          );

          if (isset($required_status[$type]) && $required_status[$type] != OG_CONTENT_TYPE_ADMIN_REQUIRED) {
            $form['groups'][$result['name']][$type]['required']['#default_value'] = OG_CONTENT_TYPE_ADMIN_DEACTIVATED;
          }
          else {
            $form['groups'][$result['name']][$type]['required']['#default_value'] = OG_CONTENT_TYPE_ADMIN_REQUIRED;
          }
        }
      }
    }
    $form['no_change'] = array(
      '#type' => 'checkbox',
      '#default_value' => variable_get('og_content_type_admin_no_change', 0),
      '#title' => 'Disallow changes by all group owners',
      '#description' => t('This option locks the group owner interface so they can not change their group settings. This affects all groups.'),
    );
  }
  // Create a submit button.
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save assignments'));

  return $form;
}

/**
 * Submit the group/content-type associations for storage.
 */
function og_content_type_admin_admin_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $error = FALSE;
  foreach (element_children($form_values['groups']) as $group) {
    // Grab the stored 'required/activated' data for comparison.
    $sql = "SELECT octa.types_active FROM {og_content_type_admin} octa WHERE octa.name = '%s'";
    $results = db_select('og_content_type_admin', 'octa')
      ->fields('octa', array('types_active'))
      ->condition('name', $group, '=')
      ->execute()
      ->fetchAssoc();
    $required_status = unserialize($results['types_active']);

    // Isolate the submitted values per group and ready them for storage.
    foreach (element_children($form_values['groups'][$group]) as $type) {
      if ($type != 'gid') {
        if ($form_values['groups'][$group][$type]['required'] == OG_CONTENT_TYPE_ADMIN_REQUIRED) {
          $required[$group][$type] = OG_CONTENT_TYPE_ADMIN_REQUIRED;
          $assigned[$group][$type] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
        }
        elseif ($required_status[$type] == OG_CONTENT_TYPE_ADMIN_ACTIVATED) {
          if (($form_values['groups'][$group][$type]['allowed'] == OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP) && ($form_values['groups'][$group]['gid'] == -1)) {
            $required[$group][$type] = OG_CONTENT_TYPE_ADMIN_DEACTIVATED;
            $assigned[$group][$type] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
          }
          elseif ($form_values['groups'][$group][$type]['allowed'] == OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP) {
            $required[$group][$type] = OG_CONTENT_TYPE_ADMIN_ACTIVATED;
            $assigned[$group][$type] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
          }
          else {
            $required[$group][$type] = OG_CONTENT_TYPE_ADMIN_DEACTIVATED;
            $assigned[$group][$type] = OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP;
          }
        }
        else {
          if ((($form_values['no_change'] == 1) && ($form_values['groups'][$group][$type]['allowed'] == OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP)) || (($form_values['groups'][$group]['gid'] == 0) && ($form_values['groups'][$group][$type]['allowed'] == OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP))) {
            $required[$group][$type] = OG_CONTENT_TYPE_ADMIN_ACTIVATED;
            $assigned[$group][$type] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
          }
          else {
            $required[$group][$type] = OG_CONTENT_TYPE_ADMIN_DEACTIVATED;
            $assigned[$group][$type] = $form_values['groups'][$group][$type]['allowed'];
          }
        }
      }
    }

    $update = db_update('og_content_type_admin')
      ->fields(array(
        'types_allowed' => serialize($assigned[$group]),
        'types_active' => serialize($required[$group]),
      ))
      ->condition('name', $group, '=')
      ->execute();

    if ($update != 0 && $update != 1) {
      $error = TRUE;
    }
  }
  if (isset($form_values['no_change'])) {
    variable_set('og_content_type_admin_no_change', $form_values['no_change']);
  }
  else {
    variable_set('og_content_type_admin_no_change', 0);
  }

  if ($error) {
    drupal_set_message(t('There was an error processing the data. Try again, or contact your site administrator.'), 'error');
  }
  else {
    drupal_set_message(t('The changes have been saved. The group owner must now activate content types for them to be used in that group.'));
  }
}

/**
 * Theme function to display the group/content-type association grid.
 */
function theme_og_content_type_admin_admin($form) {
  $form = $form['form'];

  $output = '';
  $output_array = array();
  foreach (element_children($form['groups']) as $key) {
    $rows = array();
    if (is_array($form['groups'][$key])) {
      $gid = $form['groups'][$key]['gid']['#value'];
      foreach (element_children($form['groups'][$key]) as $type) {
        if (($type != 'coll') && ($type != 'gid')) {
          $row = array();
          $row[] = array(
            'data' => drupal_render($form['groups'][$key][$type]['name']),
            'class' => 'role',
          );
          $row[] = array(
            'data' => drupal_render($form['groups'][$key][$type]['allowed']),
            'align' => 'left',
            'title' => $type,
          );
          $row[] = array(
            'data' => drupal_render($form['groups'][$key][$type]['required']),
            'align' => 'left',
            'title' => $type,
          );

          $rows[] = $row;
        }
      }
    }

    // Site Wide.
    if ($gid == -1) {
      $header = array();
      $header[] = t('Content Types');
      $header[] = t('Allow');
      $header[] = t('Require');
    }
    // Others.
    else {
      $header = array();
      $header[] = t('Content Types');
      $header[] = t('Allow');
      $header[] = t('Require');
    }

    $content_table = array(
      'header' => $header,
      'rows'   => $rows,
      'sticky' => FALSE,
      'caption' => NULL,
      'empty'  => NULL,
      'colgroups' => NULL,
      'attributes' => array('id' => 'roles'),
    );

    $fieldset = array(
      '#type' => 'fieldset',
      '#value' => theme_table($content_table),
      '#title' => $key,
      '#collapsible' => TRUE,
      '#collapsed' => ($form['groups'][$key]['coll']['#value'] == 1) ? TRUE : FALSE,
      '#weight' => 0,
      '#children' => NULL,
    );

    if ($key == 'Site Wide') {
      $fieldset['#weight'] = -10;
      $fieldset['#description'] = t('Since you are the group owner of the entire site, it does not make sense to have more than one control:
        <li>You can <b>REQUIRE</b> the content types you would like to have activated at the site-wide level. If you <em>REQUIRE</em> the use of a content type, it will automatically be allowed; no need to check the <em>ALLOW</em> boxes too.
        <li>If you uncheck an <b>ALLOW</b> box, that content-type won\'t be available for any group.
        <br/><em>These settings cannot be override.</em>');
      $theme_fieldset['element'] = $fieldset;
      $output_array[$fieldset['#weight']] = theme_fieldset($theme_fieldset);
    }
    elseif ($key == 'Default') {
      $fieldset['#weight'] = -8;
      $fieldset['#description'] = t('As site administrator, you can set up a default configuration for any group that has not been defined in a specific way (like new communities).<br/>
        <li>If you <b>REQUIRE</b> that a group use a content type, it will automatically be allowed; no need to check the <em>ALLOW</em> boxes too.
        <li>If you <b>ALLOW</b> the use of a content-type, group members will be able to create content of that type.
        <br/><em>Required content-types are locked for editing by the group owners.</em>');

      $theme_fieldset['element'] = $fieldset;
      $output_array[$fieldset['#weight']] = theme_fieldset($theme_fieldset);
    }
    else {
      $fieldset['#description'] = t('<li>If you <b>REQUIRE</b> that a group use a content type, it will automatically be allowed; no need to check the <em>ALLOW</em> boxes too.
        <li>If you <b>ALLOW</b> the use of a content-type, group members will be able to create content of that type.
        <br/><em>Required content-types are locked for editing by the group owners.</em>');
      $theme_fieldset['element'] = $fieldset;
      $output_array[] = theme_fieldset($theme_fieldset);
    }
    unset($form['groups'][$key]['coll']);
  }

  ksort($output_array);
  foreach ($output_array as $out) {
    $output .= $out;
  }

  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Update 'og_content_type_admin' table.
 */
function _og_content_type_admin_update_types($gid, &$new_active_site_wide = NULL) {
  // Now that the tables are created, create rows.
  // for the site-wide and group default settings.
  $types = array_keys(node_type_get_types());
  foreach ($types as $type_name) {
    if ($group = node_load($gid)) {
      if (!og_is_group_content_type('node', $type_name) || !og_user_access('node', $group->nid, "create $type_name content")) {
        continue;
      }
    }
    $instance = field_info_instance('node', 'og_group_ref', $type_name);
    if (empty($instance['settings']['behaviors']['prepopulate']['status'])) {
      // Instance doesn't allow prepopulating.
      continue;
    }
    $names[] = $type_name;
  }

  foreach ($names as $name) {
    if (_og_content_type_admin_is_group_content($name) && !_og_content_type_admin_is_group_type($name)) {
      $all_allowed[$name] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
      $all_active[$name] = OG_CONTENT_TYPE_ADMIN_REQUIRED;
    }
  }

  $result_site_wide_sel = db_select('og_content_type_admin', 'octa')
    ->fields('octa', array(
      'gid',
      'name',
      'types_allowed',
      'types_active',
    ))
    ->condition('gid', -1, '=')
    ->execute()
    ->fetchAssoc();

  $assigned = array();

  // Site Wide -> Required.
  $activated_status_site_wide = unserialize($result_site_wide_sel['types_active']);
  $activated_status_site_wide = clean_types($activated_status_site_wide, $all_active);
  $new_active_site_wide = array_merge((array) $all_active, (array) $activated_status_site_wide);
  // Site Wide -> Allowed.
  $allowed_status_site_wide = unserialize($result_site_wide_sel['types_allowed']);
  $allowed_status_site_wide = clean_types($allowed_status_site_wide, $all_allowed);
  $new_allowed_site_wide = array_merge((array) $all_allowed, (array) $allowed_status_site_wide);

  $result_site_wide_up = db_update('og_content_type_admin')
    ->fields(array(
      'types_allowed' => serialize($new_allowed_site_wide),
      'types_active' => serialize($new_active_site_wide),
    ))
    ->condition('gid', -1, '=')
    ->execute();

  if ($group) {
    // Detail of group.
    $result_group_sel = db_select('og_content_type_admin', 'octa')
      ->fields('octa', array(
        'gid',
        'name',
        'types_allowed',
        'types_active',
      ))
      ->condition('gid', $group->nid, '=')
      ->execute()
      ->fetchAssoc();

    if ($result_group_sel) {
      // Any group -> Required.
      $activated_status = unserialize($result_group_sel['types_active']);
      $activated_status = clean_types($activated_status, $all_active);
      $new_active = array_merge((array) $all_active, (array) $activated_status);
      // Any group -> Allowed.
      $allowed_status = unserialize($result_group_sel['types_allowed']);
      $allowed_status = clean_types($allowed_status, $all_allowed);
      $new_allowed = array_merge((array) $all_allowed, (array) $allowed_status);

      $result_group_up = db_update('og_content_type_admin')
        ->fields(array(
          'types_allowed' => serialize($new_allowed),
          'types_active' => serialize($new_active),
        ))
        ->condition('gid', $group->nid, '=')
        ->execute();
    }
  }

  if (!isset($result_group_sel['types_allowed'])) {
    // General detail of group.
    $result_default_sel = db_select('og_content_type_admin', 'octa')
      ->fields('octa', array('gid', 'name', 'types_allowed', 'types_active'))
      ->condition('gid', 0, '=')
      ->execute()
      ->fetchAssoc();

    // Default -> Required.
    $activated_status = unserialize($result_default_sel['types_active']);
    $activated_status = clean_types($activated_status, $all_active);
    $new_active = array_merge((array) $all_active, (array) $activated_status);
    // Default -> Allowed.
    $allowed_status = unserialize($result_default_sel['types_allowed']);
    $allowed_status = clean_types($allowed_status, $all_allowed);
    $new_allowed = array_merge((array) $all_allowed, (array) $allowed_status);

    $result_default_up = db_update('og_content_type_admin')
      ->fields(array(
        'types_allowed' => serialize($new_allowed),
        'types_active' => serialize($new_active),
      ))
      ->condition('gid', 0, '=')
      ->execute();
  }

  return $new_active;
}

/**
 * Let the group owner decide which content types his members can use.
 */
function og_content_type_admin_owner($form, &$form_state, $nid = NULL) {
  global $user;
  $nid = (int) arg(1);
  $group = node_load($nid);

  // Now that the tables are created, create rows.
  // for the site-wide and group default settings.
  $types = array_keys(node_type_get_types());
  foreach ($types as $type_name) {
    if (!og_is_group_content_type('node', $type_name) || !og_user_access('node', $group->nid, "create $type_name content")) {
      continue;
    }
    $instance = field_info_instance('node', 'og_group_ref', $type_name);
    if (empty($instance['settings']['behaviors']['prepopulate']['status'])) {
      // Instance doesn't allow prepopulating.
      continue;
    }
    $names[] = $type_name;
  }

  foreach ($names as $name) {
    if (_og_content_type_admin_is_group_content($name) && !_og_content_type_admin_is_group_type($name)) {
      $all_allowed[$name] = OG_CONTENT_TYPE_ADMIN_ASSIGNED_TO_GROUP;
      $all_active[$name] = OG_CONTENT_TYPE_ADMIN_REQUIRED;
    }
  }

  // Detail of group.
  $result_group_sel = db_select('og_content_type_admin', 'octa')
    ->fields('octa', array(
      'gid',
      'name',
      'types_allowed',
      'types_active',
    ))
    ->condition('gid', $group->nid, '=')
    ->execute()
    ->fetchAssoc();

  if (!$result_group_sel['types_allowed']) {
    // General details of group.
    $result_default_sel = db_select('og_content_type_admin', 'octa')
      ->fields('octa', array('gid', 'name', 'types_allowed', 'types_active'))
      ->condition('gid', 0, '=')
      ->execute()
      ->fetchAssoc();

    // Default -> Required.
    $activated_status = unserialize($result_default_sel['types_active']);
    $activated_status = clean_types($activated_status, $all_active);
    $new_active = array_merge((array) $all_active, (array) $activated_status);
    // Default -> Allowed.
    $allowed_status = unserialize($result_default_sel['types_allowed']);
    $allowed_status = clean_types($allowed_status, $all_allowed);
    $new_allowed = array_merge((array) $all_allowed, (array) $allowed_status);
  }
  else {
    // Any group -> Required.
    $activated_status = unserialize($result_group_sel['types_active']);
    $activated_status = clean_types($activated_status, $all_active);
    $new_active = array_merge((array) $all_active, (array) $activated_status);
    // Any group -> Allowed.
    $allowed_status = unserialize($result_group_sel['types_allowed']);
    $allowed_status = clean_types($allowed_status, $all_allowed);
    $new_allowed = array_merge((array) $all_allowed, (array) $allowed_status);
  }

  $form['group'] = array(
    '#tree' => TRUE,
  );

  $result_site_wide_sel = db_select('og_content_type_admin', 'octa')
    ->fields('octa', array(
      'gid',
      'name',
      'types_allowed',
      'types_active',
    ))
    ->condition('gid', -1, '=')
    ->execute()
    ->fetchAssoc();

  $types_allowed = unserialize($result_site_wide_sel['types_allowed']);
  $types_required = unserialize($result_site_wide_sel['types_active']);

  // Update 'og_content_type_admin' table.
  $assigned = _og_content_type_admin_update_types($nid);

  if (isset($assigned)) {
    foreach ($assigned as $type => $value) {
      $disallow = variable_get('og_content_type_admin_no_change', 0);
      $form['group'][$type] = array(
        '#type' => 'checkbox',
        '#disabled' => $disallow,
      );

      if ((isset($types_required[$type])) && (($types_required[$type] != OG_CONTENT_TYPE_ADMIN_REQUIRED)) && (($new_active[$type] != OG_CONTENT_TYPE_ADMIN_REQUIRED))) {
        $form['group'][$type]['#default_value'] = $new_allowed[$type];
        if ($types_allowed[$type] != OG_CONTENT_TYPE_ADMIN_ACTIVATED) {
          $form['group'][$type]['#disabled'] = TRUE;
          $form['group'][$type]['#title'] = t('This is not allowed by the site admin.');
        }
        else {
          $form['group'][$type]['#default_value'] = $new_allowed[$type];
        }
      }
      else {
        $form['group'][$type]['#default_value'] = 1;
        $form['group'][$type]['#disabled'] = TRUE;
        $form['group'][$type]['#title'] = t('This is required by the site admin.');
      }

      if ($disallow != 0) {
        $form['group'][$type]['#title'] = t('This is locked by the site admin.');
      }
    }
  }

  // Create a submit button.
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save assignments'));

  // Breadcrumb navigation.
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb[] = l(t('Groups'), 'communities_directory');
  $breadcrumb[] = l(t("@title", array('@title' => $group->title)), 'node/' . $group->nid);
  drupal_set_breadcrumb($breadcrumb);

  return $form;
}

/**
 * Return an array with all the available og group types.
 */
function clean_types($all_types, $og_types) {
  if ((is_array($all_types)) && (is_array($og_types))) {
    foreach ($all_types as $type => $value) {
      if (!array_key_exists($type, $og_types)) {
        unset($all_types[$type]);
      }
    }
  }
  return $all_types;
}

/**
 * Submit the group/content-type associations for storage.
 */
function og_content_type_admin_owner_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  if (is_numeric(arg(1))) {
    $group = node_load(arg(1));
    if ($group) {
      try {
        $result = db_select('og_content_type_admin', 'octa')
          ->fields('octa', array('gid'))
          ->condition('gid', $group->nid, '=')
          ->execute()
          ->fetchAssoc();
        if ($result) {
          db_update('og_content_type_admin')
            ->fields(array('types_allowed' => serialize($form_values['group'])))
            ->condition('gid', $group->nid)
            ->execute();
        }
        else {
          $result = db_select('og_content_type_admin', 'octa')
            ->fields('octa', array('types_allowed'))
            ->condition('gid', 0, '=')
            ->execute()
            ->fetchAssoc();
          $allowed = $result['types_allowed'];

          $resp = db_insert('og_content_type_admin')
            ->fields(array(
              'gid' => $group->nid,
              'name' => $group->title,
              'types_allowed' => serialize($form_values['group']),
              'types_active' => $allowed,
            ))->execute();
        }
        drupal_set_message(t('The changes have been saved.'));
      }
      catch (Exception $e) {
        drupal_set_message(check_plain(t('There was an error processing the data. Try again, or contact your site administrator.') . $e->getMessage()), 'error');
      }
    }
  }
}

/**
 * Theme function to display the group/content-type association grid.
 */
function theme_og_content_type_admin_owner($form) {
  $form = $form['form'];
  $header[] = t('Content Types');
  $header[] = t('Active');
  $output = '';
  $rows = array();

  if (is_array($form['group'])) {
    foreach (element_children($form['group']) as $type) {
      if ($form['group'][$type]['#type'] != 'hidden') {
        $row = array();
        $node_type = node_type_get_type($type);
        if (isset($node_type->name)) {
          $row[] = array(
            'data' => $node_type->name,
            'class' => 'role',
          );
          $row[] = array(
            'data' => drupal_render($form['group'][$type]),
            'align' => 'left',
            'title' => $type,
          );
          $rows[] = $row;
        }
      }
    }
  }

  $content_table = array(
    'header' => $header,
    'rows'   => $rows,
    'sticky' => FALSE,
    'caption' => NULL,
    'empty'  => NULL,
    'colgroups' => NULL,
    'attributes' => array('id' => 'roles'),
  );

  $fieldset = array(
    '#type' => 'fieldset',
    '#value' => theme_table($content_table),
    '#title' => 'Group Content Types',
    '#description' => t('As group owner, you can limit the kinds of content that your group members create in this group by deactivating content types.<br/>
      This settings may be overriden by the site admin.'),
    '#children' => NULL,
  );
  $theme_fieldset['element'] = $fieldset;
  $output = theme_fieldset($theme_fieldset);

  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Interception of the node module's node_add function.
 */
function og_content_type_admin_node_access($node, $op, $account) {
  global $user, $_GET;

  // If there is a group context, get the active types for the group,
  // otherwise, use the site-wide list.
  if (isset($_GET['og_group_ref'])) {
    $gid = $_GET['og_group_ref'];
    $result = db_select('og_content_type_admin', 'octa')
      ->fields('octa', array('types_active', 'types_allowed'))
      ->condition('gid', $gid, '=')
      ->execute()
      ->fetchAssoc();
    // If we're keeping track of this group, get it's active types,
    // otherwise, get the defaults.
    if (!count($result)) {
      $result = db_select('og_content_type_admin', 'octa')
        ->fields('octa', array('types_active', 'types_allowed'))
        ->condition('gid', 0, '=')
        ->execute()
        ->fetchAssoc();
    }
    $activated_types = unserialize($result['types_active']);
    $allowed_types = unserialize($result['types_allowed']);
    $look_at_allowed = 1;

    $arg_index = str_replace("-", "_", arg(2));

    if ($allowed_types[$arg_index] == 1) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      drupal_set_title(t('Invalid Content Type'));
      drupal_set_message(t('Either the content type you are trying to create does not exist,
       or you are not authorized to access the content type you have tried to create in the current context.
        \'Create\' a content type by selecting from either the group menu or the \'Create content\' menu instead.'), 'error', FALSE);
      return NODE_ACCESS_DENY;
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Replacement for og_search_form; make it prettier.
 */
function og_content_type_admin_search_form($group) {
  $form['filter0'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#description' => '',
    '#size' => 19,
    '#maxlength' => 255,
    '#attributes' => array('class' => 'group_search'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search this group'),
    '#attributes' => array('class' => 'group_search_button'),
  );
  $form['#process'] = array('views_filters_process' => array());
  $form['#method'] = 'get';
  $form['#action'] = url("og/search/$group->nid");
  return $form;
}

/**
 * Implements hook_node_update().
 */
function og_content_type_admin_node_update($node) {
  if ($node->type == 'community') {
    $res = db_select('og_content_type_admin', 'ogct')
      ->fields('ogct', array('gid'))
      ->condition('gid', $node->nid, '=')
      ->execute()
      ->fetchAssoc();
    if ($res) {
      db_update('og_content_type_admin')
        ->fields(array(
          'name' => $node->title,
        ))
        ->condition('gid', $node->nid, '=')
        ->execute();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function og_content_type_admin_node_delete($node) {
  if ($node->type == 'community') {
    $res = db_select('og_content_type_admin', 'ogct')
      ->fields('ogct', array('gid'))
      ->condition('gid', $node->nid, '=')
      ->execute()
      ->fetchAssoc();
    if ($res) {
      db_delete('og_content_type_admin')
        ->condition('gid', $node->nid, '=')
        ->execute();
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function og_content_type_admin_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'og_admin_settings') {
    $form['#submit']['_og_content_type_admin_rebuild_table'] = array();
  }
  elseif (isset($form['type']) && isset($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id) {
    $group = new stdClass();
    if (!empty($form['og_nodeapi']['visible']['og_groups']['#options'])) {
      foreach ($form['og_nodeapi']['visible']['og_groups']['#options'] as $nid => $name) {
        // See if they can add this content-type for this group.
        $group->nid = $nid;
        if (_og_content_type_admin_is_admin($group)) {
          continue;
        }
        else {
          // See if they are allowed to add this content type.
          $sql = "SELECT octa.types_active FROM {og_content_type_admin} octa WHERE octa.gid = %d";
          $result = db_fetch_object(db_query($sql, $nid));
          if (!$result) {
            $result = db_fetch_object(db_query($sql, 0));
          }
          $activated_types = unserialize($result->types_active);
          if (empty($activated_types->{$form['type']['#value']})) {
            unset($form['og_nodeapi']['visible']['og_groups']['#options'][$nid]);
          }
        }
      }
    }
  }
}

/**
 * Return an array containing all groups that we're monitoring.
 */
function _og_content_type_admin_get_added() {
  $result = db_select('og_content_type_admin', 'octa')
    ->fields('octa', array('gid', 'name'))
    ->orderBy('name', 'ASC')
    ->execute();

  while ($row = $result->fetchAssoc()) {
    $options[$row['gid']] = $row['name'];

  }
  return $options ? $options : array();
}

/**
 * Check if a user is a group manager of the given group.
 */
function _og_content_type_admin_is_admin($group) {
  global $user;

  if ($user->uid == 1) {
    return TRUE;
  }
  if (variable_get('og_content_type_admin_no_change', 0)) {
    return FALSE;
  }

  return og_is_member('node', $group->nid);
}

/**
 * Check if a user is a group manager of the given group.
 */
function _og_content_type_admin_is_admin_content_access_nid($nid) {
  global $user;

  $res = og_user_access('node', $nid, 'administer group');

  return $res;
}

/**
 * A table rebuild function.
 */
function _og_content_type_admin_rebuild_table($op = NULL, $info = NULL) {
  $node_types = node_get_types();
  if (($op == 'insert') && ($info != NULL) && (!isset($node_types[$info->type]))) {
    $node_types[$info->type] = $info;
  }
  if (($op == 'update') && empty($info->old_type)) {
    return;
  }
  if ($op == 'delete') {
    unset($node_types[$info->type]);
  }
  $sql = "SELECT octa.gid, octa.name, octa.types_allowed, octa.types_active FROM {og_content_type_admin} octa ORDER BY octa.name ASC";
  $results = db_query($sql);
  $bad_query = FALSE;
  while ($result = db_fetch_object($results)) {
    $old_allowed = unserialize($result->types_allowed);
    $old_active = unserialize($result->types_active);
    if ($result->gid == -1) {
      foreach ($node_types as $type) {
        if (!empty($info->old_type) && ($type->type == $info->old_type)) {
          $ntype = $info->type;
          $otype = $info->old_type;
        }
        else {
          $ntype = $otype = $type->type;
        }
        if (isset($old_allowed[$otype])) {
          $new_allowed[$ntype] = $old_allowed[$otype];
        }
        else {
          $new_allowed[$ntype] = OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP;
        }
        if (isset($old_active[$otype])) {
          $new_active[$ntype] = $old_active[$otype];
        }
        else {
          $new_active[$ntype] = OG_CONTENT_TYPE_ADMIN_DEACTIVATED;
        }
      }
    }
    else {
      foreach ($node_types as $type) {
        if (!og_is_omitted_type($type->type) && !og_is_group_type($type->type)) {
          if (!empty($info->old_type) && ($type->type == $info->old_type)) {
            $ntype = $info->type;
            $otype = $info->old_type;
          }
          else {
            $ntype = $otype = $type->type;
          }
          if (isset($old_allowed[$otype])) {
            $new_allowed[$ntype] = $old_allowed[$otype];
          }
          else {
            $new_allowed[$ntype] = OG_CONTENT_TYPE_ADMIN_NOT_ASSIGNED_TO_GROUP;
          }
          if (isset($old_active[$otype])) {
            $new_active[$ntype] = $old_active[$otype];
          }
          else {
            $new_active[$ntype] = OG_CONTENT_TYPE_ADMIN_DEACTIVATED;
          }
        }
      }
    }
    $sql = "UPDATE {og_content_type_admin} SET types_allowed = '%s', types_active = '%s' WHERE gid = %d";
    $query = db_query($sql, serialize($new_allowed), serialize($new_active), $result->gid);
    if (!$query) {
      $bad_query = TRUE;
    }
  }
  if (!$bad_query) {
    drupal_set_message(t('The og_content_type_admin table was updated'));
    if ($op == 'insert') {
      $link = l(t('admin settings'), 'admin/og/og_content_types');
      drupal_set_message(t('The new type must be <em>ALLOWED</em> or <em>OG_CONTENT_TYPE_ADMIN_REQUIRED</em> in the !link.', array('!link' => $link)));
    }
  }
  else {
    drupal_set_message(t('There was a problem updating the og_content_type_admin table'), 'error');
  }
}

/**
 * Check if machine name of content-type is a group.
 */
function _og_content_type_admin_is_group_type($type) {
  $dev = FALSE;
  $group_types = og_get_all_group_bundle();

  if (isset($group_types['node']) && is_array($group_types['node'])) {
    if (in_array($type, array_keys($group_types['node']))) {
      $dev = TRUE;
    }
  }

  return $dev;
}

/**
 * Check if machine name of content-type is part of a group content.
 */
function _og_content_type_admin_is_group_content($type) {
  $dev = FALSE;
  $group_content = og_get_all_group_content_bundle();

  if (isset($group_content['node']) && is_array($group_content['node'])) {
    if (in_array($type, array_keys($group_content['node']))) {
      $dev = TRUE;
    }
  }
  return $dev;
}

/**
 * This function replaced the actually og_get_all_group().
 */
function _og_content_type_get_all_groups($group_type = 'node') {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', $group_type)
    ->fieldCondition(OG_GROUP_FIELD, 'value', 1, '=')
    ->execute();
  $return = array();
  if (!empty($result[$group_type])) {
    foreach ($result[$group_type] as $id_result => $result) {
      $res_node = db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition('nid', $id_result, '=')
        ->execute()
        ->fetchAssoc();
      $return[$id_result] = $res_node['title'];
    }
  }

  return $return;
}

/**
 * Obtain all the allowed content-types in a group retrieved.
 */
function og_content_type_admin_access_group($bundle_name = NULL) {
  $return = $required_site_wide = $allowed_types_group = array();
  $gid = (int) arg(1);
  $gid = ($gid == 0 && isset($_GET['og_group_ref'])) ? $_GET['og_group_ref'] : $gid;

  // Recover all information required by the site.
  $result_site_wide = db_select('og_content_type_admin', 'octa')
    ->fields('octa', array('gid', 'name', 'types_allowed', 'types_active'))
    ->condition('gid', -1, '=')
    ->execute()
    ->fetchAssoc();
  $required_site_wide = unserialize($result_site_wide['types_active']);
  $allowed_site_wide = unserialize($result_site_wide['types_allowed']);

  // Recover all information about node. If $gid=0 recover information about De.
  $result = db_select('og_content_type_admin', 'octa')
    ->fields('octa', array('types_active', 'types_allowed'))
    ->condition('gid', $gid, '=')
    ->execute()
    ->fetchAssoc();

  if ($result) {
    $allowed_types_group = unserialize($result['types_allowed']);
  }
  else {
    $result = db_select('og_content_type_admin', 'octa')
      ->fields('octa', array('types_active', 'types_allowed'))
      ->condition('gid', 0, '=')
      ->execute()
      ->fetchAssoc();
    $allowed_types_group = unserialize($result['types_allowed']);
  }

  if (count($required_site_wide) >= 1) {
    $return = array();
    foreach ($required_site_wide as $key => $value) {
      if ($required_site_wide[$key] == 0 && $allowed_types_group[$key] == 0) {
        continue;
      }
      // If the content-type is not allowed by the Site Wide settings.
      if (isset($allowed_site_wide[$key]) && $allowed_site_wide[$key] == 1) {
        $return[$key] = ($required_site_wide[$key] == 2) ? $required_site_wide[$key] : $allowed_types_group[$key];
      }
    }
  }
  else {
    $return = $allowed_types_group;
  }

  if (isset($return['community'])) {
    unset($return['community']);
  }

  if (!is_null($bundle_name)) {
    if ($return[$bundle_name] >= 1) {
      $return = TRUE;
    }
    else {
      $return = FALSE;
    }
  }

  return $return;
}
