<?php

/**
 * @file
 * Main functions and hook implementations of the TMGMT OG module.
 */

// @todo This should not be needed. The Views include file is lazy loaded.
// @see hook_views_plugins()
include_once 'tmgmt_og.views.inc';

/**
 * Define OG permission label.
 */
define('TMGMT_OG_ENTITY_MANAGE_PERMISSION', 'manage organic group translation jobs');

/**
 * Implements hook_views_api().
 */
function tmgmt_og_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_url_outbound_alter().
 */
function tmgmt_og_url_outbound_alter(&$path, &$options, $original_path) {
  global $user;

  // hook_url_outbound_alter() is an expensive hook, since we are sure that
  // no anonymous user will ever be able to perform any TMGMT administrative
  // tasks we only run preg_match() if user is logged in.
  if ($user->uid && preg_match('|^admin/tmgmt/(.*)?|', $path, $matches)) {
    if (($group = og_context())) {
      $path = 'group/' . $group['group_type'] . '/' . $group['gid'] . '/admin/tmgmt';
      if (isset($matches[1])) {
        $path = $path . '/' . $matches[1];
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function tmgmt_og_entity_info_alter(&$entity_info) {
  if (isset($entity_info['tmgmt_job'])) {
    $entity_info['tmgmt_job']['fieldable'] = TRUE;
  }
}

/**
 * Implements hook_entity_presave().
 */
function tmgmt_og_entity_presave($entity, $type) {
  if ($type == 'tmgmt_job' && ($group = og_context())) {
    $entity->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['target_id'] = $group['gid'];
  }
}

/**
 * Implements hook_og_ui_get_group_admin_alter().
 */
function tmgmt_og_og_ui_get_group_admin_alter(&$data, $context) {
  if (og_ui_user_access_group(TMGMT_OG_ENTITY_MANAGE_PERMISSION, $context['entity_type'], $context['etid'])) {
    $data['tmgmt_og'] = array(
      'title' => t('Manage translation jobs'),
      'description' => t('Access Translation Management section for this group.'),
      'href' => 'admin/tmgmt',
    );
  }
}

/**
 * Implements hook_og_permission().
 */
function tmgmt_og_og_permission() {
  $items = array();
  $items[TMGMT_OG_ENTITY_MANAGE_PERMISSION] = array(
    'title' => t('Manage translation jobs'),
    'description' => t('Access Translation Management section for this group.'),
    'roles' => array(OG_AUTHENTICATED_ROLE),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );
  return $items;
}

/**
 * Implements hook_module_implements_alter().
 */
function tmgmt_og_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_alter') {
    // Fix hook_menu_alter() execution order.
    $tmgmt_ui = $implementations['tmgmt_ui'];
    $tmgmt_og = $implementations['tmgmt_og'];
    unset($implementations['tmgmt_ui']);
    unset($implementations['tmgmt_og']);
    $implementations['tmgmt_ui'] = $tmgmt_ui;
    $implementations['tmgmt_og'] = $tmgmt_og;
  }
}

/**
 * Implements hook_menu_alter().
 */
function tmgmt_og_menu_alter(&$items) {
  foreach ($items as $path => $item) {
    if (strpos($path, 'admin/tmgmt') === 0) {
      // Use tmgmt_og_job_overview view instead of tmgmt_ui_job_overview.
      if ($path == 'admin/tmgmt' || $path == 'admin/tmgmt/overview') {
        $item['page arguments'] = array('tmgmt_og_job_overview', 'master');
      }

      // Set consistent default values of a menu item.
      $item['title'] = isset($item['title']) ? $item['title'] : '';
      $item['title arguments'] = isset($item['title arguments']) ? $item['title arguments'] : array($item['title']);
      $item['title callback'] = isset($item['title callback']) ? $item['title callback'] : 't';
      $item['access arguments'] = isset($item['access arguments']) ? $item['access arguments'] : array();
      $item['access callback'] = isset($item['access callback']) ? $item['access callback'] : 'user_access';

      // Fix title and page argument positions.
      foreach (array('title arguments', 'access arguments', 'page arguments') as $arguments) {
        if (isset($item[$arguments])) {
          foreach ($item[$arguments] as $key => $value) {
            $item[$arguments][$key] = is_numeric($value) ? ($value + 3) : $value;
          }
        }
      }

      // Create new OG-specific menu item.
      $items['group/%/%/' . $path] = $item;
      $items['group/%/%/' . $path]['title callback'] = 'tmgmt_og_menu_alter_title_callback';
      $items['group/%/%/' . $path]['title arguments'] = array_merge(array($item['title callback']), $item['title arguments']);
      $items['group/%/%/' . $path]['access callback'] = 'tmgmt_og_menu_alter_access_callback';
      $items['group/%/%/' . $path]['access arguments'] = array_merge(array($item['access callback']), $item['access arguments']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_og_form_tmgmt_job_form_alter(&$form, $form_state) {
  $form['#submit'][] = 'tmgmt_og_tmgmt_job_form_submit';
}

/**
 * Implements form #submit callback.
 *
 * @see tmgmt_og_form_tmgmt_job_form_alter()
 */
function tmgmt_og_tmgmt_job_form_submit($form, &$form_state) {
  // If in a group context then redirect to group overview page.
  if ($form_state['redirect'] == 'admin/tmgmt' && ($group = og_context())) {
    $form_state['redirect'] = 'group/' . $group['group_type'] . '/' . $group['gid'] . '/admin/tmgmt';
  }
}

/**
 * Custom access callback for TMGMT group menu items.
 *
 * @see tmgmt_og_menu_alter()
 */
function tmgmt_og_menu_alter_access_callback() {
  $access = og_ui_user_access_group(TMGMT_OG_ENTITY_MANAGE_PERMISSION, arg(1), arg(2));
  if ($access) {
    $args = func_get_args();
    $callback = array_shift($args);
    $access = call_user_func_array($callback, $args);
  }
  return $access;
}

/**
 * Custom title callback for TMGMT group menu items.
 *
 * @see tmgmt_og_menu_alter()
 */
function tmgmt_og_menu_alter_title_callback() {
  if (($group = og_context())) {
    og_set_breadcrumb($group['group_type'], $group['gid'], array(l(t('Group'), $group['group_type'] . '/' . $group['gid'] . '/group')));
  }
  $args = func_get_args();
  $callback = array_shift($args);
  return call_user_func_array($callback, $args);
}

/**
 * Implements hook_query_TAG_alter().
 */
function tmgmt_og_query_tmgmt_entity_get_translatable_entities_alter(QueryAlterableInterface $query) {
  if (($group = og_context())) {
    $fields = $query->getFields();
    foreach ($fields as $info) {
      // Get field on primary table, which is aliased as "e".
      // See tmgmt_entity_get_translatable_entities().
      if ($info['table'] == 'e') {
        $query->join('og_membership', 'om', 'e.' . $info['alias'] . ' = om.etid');
        $query->condition('om.group_type', $group['group_type']);
        $query->condition('om.gid', $group['gid']);
        break;
      }
    }
  }
}
