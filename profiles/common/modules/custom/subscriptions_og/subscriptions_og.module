<?php

/**
 * @file
 * Allow users to subscribe to content posted to an organic group.
 */

/**
 * Implements hook_permission().
 */
function subscriptions_og_permission() {
  return array(
    'og subscribe' => array(
      'title' => t('Subscribe to notifications for Organic Groups'),
      'description' => t('Allows users to receive alerts when new content is posted to an Organic group.'),
    ),
  );
}

/**
 * Implements hook_subscriptions().
 */
function subscriptions_og_subscriptions($op, $arg0 = NULL, $arg1 = NULL, $arg2 = NULL) {
  switch ($op) {
    case 'types':
      $types['og'] = array(
        'title' => 'Groups',
        'access' => 'og subscribe',
        'permission' => array(
          'title' => t('Subscribe to notifications for Organic Groups'),
        ),
        'page' => 'subscriptions_og_page',
        'fields' => array('node', 'group_audience'),
        'weight' => -10,
      );
      return $types;

    // Queue: Define parameters used by Subscriptions to query which
    // subscriptions should be sent. We search for subscriptions where the value
    // is equal to the GID of any group that the newly saved $node is posted to.
    case 'queue':
      if ($arg0['module'] == 'node') {
        $node = $arg0['node'];

        $params['node']['group_audience'] = array(
          'join' => array(
            'table' => 'og_membership',
            'alias' => 'ga',
            'on' => "s.value = ga.gid AND ga.group_type = 'node'",
          ),
          'where' => array(
            array('ga.etid', $node->nid, '='),
            array('ga.entity_type', 'node', '='),
          ),
          'groupby' => 'ga.etid',
        );
        if ($arg0['type'] == 'comment') {
          $params['node']['group_audience']['where'][] = array(
            's.send_comments',
            1,
            '=',
          );
        }
        elseif ($arg0['type'] == 'node' && $arg0['action'] == 'update') {
          $params['node']['group_audience']['where'][] = array(
            's.send_updates',
            1,
            '=',
          );
        }

        return $params;
      }
      break;

    case 'fields':
      // $arg0 is module.
      if ($arg0 == 'node' || $arg0 == 'comment') {
        return array(
          'group_audience' => array(
            'data_function' => 'subscriptions_content_data',
            'subs_mod' => 'subscriptions_taxonomy',
            'subs_type' => t('group'),
            'mailkey' => 'node-type-',
          ),
        );
      }
      break;

    case 'token_types':
      if (strpos($arg0, 'content_og') === 0) {
        return array('node', 'comment');
      }
      break;

    case 'node_options':
      // $arg1 is the current node.
      $options = array();
      if (og_is_group('node', $arg1)) {
        // Check if user is a member for private group.
        if (og_is_member('node', $arg1->nid) || $arg1->group_access['und'][0]['value'] == 1) {
          $options['group_audience'][] = array(
            'name' => t('To content posted in %name', array('%name' => $arg1->title)),
            'link' => 'node/' . $arg1->nid,
            'params' => array(
              'module' => 'node',
              'field' => 'group_audience',
              'value' => $arg1->nid,
            ),
          );
        }
      }
      return $options;
  }
}

/**
 * Defines a user's overview of which groups she is subscribed to.
 *
 * @param array $form
 *   Array form.
 * @param int $uid
 *     The user's UID.
 */
function subscriptions_og_page(array $form, $uid) {
  // Load all active OG subscriptions for this user.
  $query = db_select('subscriptions', 's', array('fetch' => PDO::FETCH_ASSOC));
  $result = $query
    ->fields('s', array(
      'value',
      'send_interval',
      'author_uid',
      'send_comments',
      'send_updates',
    ))
    ->condition('s.module', 'node')
    ->condition('s.field', 'group_audience')
    ->condition('s.recipient_uid', $uid)
    ->orderBy('s.author_uid')
    ->execute();
  foreach ($result as $s) {
    $subscriptions[$s['value']][$s['author_uid']] = $s;
  }

  $form[0] = array(
    '#theme' => 'subscriptions_form_table',
  );
  $defaults = array();

  $groups = og_get_all_group('node');
  $groups = node_load_multiple($groups);
  usort($groups, '_subscriptions_og_compare_groups');

  foreach ($groups as $group) {
    // Check that the user is allowed to view this group.
    if (!node_access('view', $group)) {
      continue;
    }
    // Check if user is a member for private group.
    if (!og_is_member('node', $group->nid)) {
      continue;
    }

    // Add the active subscriptions.
    $group_name = check_plain($group->title);

    if (!isset($subscriptions[$group->nid][-1])) {
      // author-less item is missing -- add it here.
      $subscriptions[$group->nid][-1] = array(
        'send_interval' => _subscriptions_get_setting('send_interval', $uid),
        'send_comments' => _subscriptions_get_setting('send_comments', $uid),
        'send_updates' => _subscriptions_get_setting('send_updates', $uid),
        'author_uid' => FALSE,
      );
    }
    foreach ($subscriptions[$group->nid] as $author_uid => $subscription) {
      subscriptions_form_helper($form[0], $defaults, $author_uid, $group->nid, $group_name, $subscription);
    }
  }

  if (isset($form[0]['checkboxes'])) {
    $form[0]['defaults'] = array(
      '#type' => 'value',
      '#value' => $defaults,
    );
    subscriptions_form_column_filter($form[0], $uid);
  }
  else {
    $form = array(
      array('#markup' => t('There are no available groups to subscribe to.')),
    );
  }

  return $form;
}

/**
 * Helper function so sort organic groups.
 *
 * Intended for use with usort() and similar functions.
 *
 * @param StdClass $first
 *   First title to compare.
 * @param StdClass $second
 *   Second title to compare.
 *
 * @return int
 *   < 0 if $first comes before $second, > 0 if $second comes before $first, and
 *   0 if they are equal in sorting order.
 */
function _subscriptions_og_compare_groups(StdClass $first, StdClass $second) {
  return strcmp($first->title, $second->title);
}

/**
 * Implements hook_subscriptions_node_options_alter().
 *
 * Hide subscriptions options for private groups for non members.
 */
function subscriptions_og_subscriptions_node_options_alter(&$node_options) {
  foreach ($node_options as $id => $node_option) {
    if ($id == 'nid') {
      $node = node_load($node_option[0]['params']['value']);
      if (og_is_group('node', $node)) {
        if (!og_is_member('node', $node->nid)) {
          $node_options = array();
        }
        break;
      }
    }
  }
}
