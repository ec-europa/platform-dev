<?php

/**
 * @file
 * Exposes as TMGMT source content in a specific moderation state.
 */

/**
 * Implements hook_help().
 */
function tmgmt_workbench_help($path, $arg) {
  $output = '';
  $states = variable_get('tmgmt_workbench_moderation_states', array());
  $states = array_filter($states);

  if ($path == 'node/%/translate') {
    $node = node_load($arg[1]);
    if (workbench_moderation_node_moderated($node)) {
      $node = node_load($arg[1]);
      $state = $node->workbench_moderation['current']->state;
      $output .= '<p>' . t('Translation of a piece of content is only available if its latest revision is in the following states: <strong>!states</strong>', array('!states' => implode(', ', $states)));
      $output .= '<br/>' . t("The current piece of content's moderation state is: <strong>!state</strong>", array('!state' => $state)) . '</p>';
    }
  }
  if ($path == 'admin/tmgmt/sources') {
    $output = $output . '<div>' . t('This table contains only content with latest revision in the following states: <strong>!states</strong>', array('!states' => implode(', ', $states))) . '</div>';
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function tmgmt_workbench_menu() {
  $items['admin/config/regional/tmgmt_workbench_settings'] = array(
    'title' => 'Translation Management Workbench',
    'description' => 'Translation Management Workbench settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_workbench_settings_form'),
    'access arguments' => array('administer tmgmt'),
    'file' => 'includes/tmgmt_workbench.pages.inc',
    'weight' => 11,
  );
  return $items;
}


/**
 * Implements hook_tmgmt_source_plugin_info().
 */
function tmgmt_workbench_tmgmt_source_plugin_info() {
  $info = array();
  // Only expose Workbench Moderation source if at least one content type
  // is moderated and nodes are translatable by Entity Translation.
  $entity_types = variable_get('entity_translation_entity_types', array());
  $content_types = workbench_moderation_moderate_node_types();
  if ($content_types && isset($entity_types['node']) && $entity_types['node']) {
    $info['workbench_moderation'] = array(
      'label' => t('Workbench Moderation'),
      'description' => t('Source handler for node entities using workbench moderation.'),
      'plugin controller class' => 'TMGMTWorkbenchSourcePluginController',
      'ui controller class' => 'TMGMTWorkbenchSourceUIController',
      'item types' => array(
        'node' => t('Moderated content'),
      ),
    );
  }
  return $info;
}

/**
 * Implements hook_query_TAG_alter().
 */
function tmgmt_workbench_query_tmgmt_entity_get_translatable_entities_alter(QueryAlterableInterface $query) {
  $moderated = workbench_moderation_moderate_node_types();

  // Alter query when on TMGMT Source Overview page.
  // See: TMGMTWorkbenchSourceUIController::overviewForm().
  if (drupal_static('tmgmt_workbench_overview_form')) {
    // Don't show content that is not moderated.
    $fields = $query->getFields();
    $query->condition('e.type', $moderated, 'IN');
    // Don't show content that is not in a translatable state.
    $states = variable_get('tmgmt_workbench_moderation_states', array());
    foreach ($fields as $field => $info) {
      // Get field on primary table, which is aliased as "e".
      // @see: tmgmt_entity_get_translatable_entities() for more details.
      if ($states && ($info['table'] == 'e')) {
        $query->join('workbench_moderation_node_history', 'wmnh', 'e.' . $info['alias'] . ' = wmnh.nid');
        // @todo: we only consider the current revision
        // check if this assumption is correct.
        $query->condition('wmnh.is_current', 1);
        $query->condition('wmnh.state', $states);
        break;
      }
    }
  }
  else {
    $query->condition('e.type', $moderated, 'NOT IN');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_workbench_form_tmgmt_entity_ui_translate_form_alter(&$form, $form_state) {
  $entity_type = $form_state['entity_type'];

  if ($entity_type == 'node') {
    $node = $form_state['entity'];
    if (workbench_moderation_node_moderated($node)) {

      $states = array_values(_tmgmt_workbench_available_states());
      $state = $node->workbench_moderation['current']->state;
      $translation_possible = in_array($state, $states, 'strict');

      $languages = tmgmt_available_languages();
      $options = &$form['languages']['#options'];

      $existing_jobs = tmgmt_job_item_load_latest('workbench_moderation',
        $entity_type, $node->nid, $node->translations->original);
      $always_show_direct_translation_links = variable_get('tmgmt_workbench_moderation_always_show_direct_translation_links', FALSE);

      // Disable checkbox for languages already translated.
      foreach ($languages as $langcode => $language) {
        if (isset($node->translations->data[$langcode]) &&!empty($existing_jobs)) {
          $form['languages'][$langcode] = array(
            '#type' => 'checkbox',
            '#disabled' => TRUE,
          );
        }
        if (isset($options[$langcode]) && isset($existing_jobs[$langcode])) {
          $item = $existing_jobs[$langcode];
          $uri = $item->uri();
          $wrapper = entity_metadata_wrapper('tmgmt_job_item', $item);
          $form['languages']['#options'][$langcode][4] = l($wrapper->state->label(),
            $uri['path'],
            array('query' => array('destination' => current_path())));
          // Disable the checkbox for this row since there is already a
          // translation in progress that has not yet been finished. This way we
          // make sure that we don't stack multiple active translations for the
          // same item on top of each other.
          $form['languages'][$langcode] = array(
            '#type' => 'checkbox',
            '#disabled' => TRUE,
          );
        }

        // Disable checkbox selection if current node revision is not
        // in translatable moderation states.
        if (!$translation_possible) {
          $form['languages'][$langcode] = array(
            '#type' => 'checkbox',
            '#disabled' => TRUE,
          );
          $form['languages']['#suffix'] = '<div class="description">' .
            t('This content cannot be translated.') . '</div>';

          if (!$always_show_direct_translation_links && ($langcode != $node->translations->original)) {
            $options[$langcode][5] = '';
          }
        }
      }

      if ($translation_possible) {
        $form['actions']['#type'] = 'actions';
        $form['actions']['request'] = array(
          '#type' => 'submit',
          '#value' => t('Request translation'),
          '#submit' => array('tmgmt_workbench_translate_form_submit'),
          '#validate' => array('tmgmt_workbench_translate_form_validate'),
        );
      }
      else {
        unset($form['actions']);
      }
      // Remove add to cart button.
      unset($form['top_actions']);
      // Allow requesting only one language. Explain user can add more later.
      $form['languages']['#multiple'] = FALSE;
      $form['languages']['#suffix'] = '<div class="description">' .
        t('More target languages can be added after you click %i',
          array('%i' => 'Request Translation')) .
        '</div>';
    }
  }
}

/**
 * Validation callback for the entity translation overview form.
 */
function tmgmt_workbench_translate_form_validate($form, &$form_state) {
  if (!isset($form_state['input']['languages'])) {
    form_set_error('languages', t('You have to select a language for requesting a translation.'));
  }
}

/**
 * Submit callback for the entity translation overview form.
 */
function tmgmt_workbench_translate_form_submit($form, &$form_state) {
  $entity = $form_state['entity'];
  $langcode = $form_state['input']['languages'];
  $jobs = array();
  // Create the job object.
  $job = tmgmt_job_create(entity_language('node', $entity), $langcode,
    $GLOBALS['user']->uid);
  try {
    // Add the job item.
    $job->addItem('workbench_moderation', 'node', $entity->nid);
    // Append this job to the array of created jobs so we can redirect the
    // user to a multistep checkout form if necessary.
    $jobs[$job->tjid] = $job;
  }
  catch (TMGMTException $e) {
    watchdog_exception('tmgmt workbench', $e);
    $languages = language_list();
    $target_lang_name = $languages[$langcode]->language;
    drupal_set_message(t('Unable to add job item for target language %name (Using translate tab). Make sure the source content is not empty. Error : %error',
      array(
        '%name' => $target_lang_name,
        '%error' => $e->getMessage(),
      )),
      'error');
  }
  tmgmt_ui_job_checkout_and_redirect($form_state, $jobs);
}

/**
 * Helper function. Provides information on configuration and returns states.
 */
function _tmgmt_workbench_available_states() {
  $states = variable_get('tmgmt_workbench_moderation_states', array());
  if (empty($states)) {
    drupal_set_message(t('You have to enable at least one workbench state'));
  }
  return $states;
}
