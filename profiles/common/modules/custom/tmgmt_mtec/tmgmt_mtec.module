<?php
/**
 * @file
 * Module file of the translation management MT@EC .
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 *
 * Definition of the custom translator for the MT@EC integration.
 */
function tmgmt_mtec_tmgmt_translator_plugin_info() {
  return array(
    'mtec' => array(
      'label' => t('MT@EC translator'),
      'description' => t('MT@EC Translator service.'),
      'plugin controller class' => 'TMGMTMtecTranslatorPluginController',
      'ui controller class' => 'TMGMTMtecTranslatorUIController',
    ),
  );
}

/**
 * Local Exception class.
 */
class TMGMTMtecException extends Exception {

  /**
   * Override of the parent __construct method.
   */
  public function __construct($message = "", $data = array(), $code = 0, Exception $previous = NULL) {
    parent::__construct(strtr($message, $data), $code, $previous);
  }

}

/**
 * Implements hook_menu().
 *
 * Add menu items to act as callback routes for the MT@EC service.
 */
function tmgmt_mtec_menu() {
  $items = array();
  $items['tmgmt_mtec/tmgmt_mtec_correct_callback'] = array(
    'page callback' => '_tmgmt_mtec_correct_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );

  $items['tmgmt_mtec/tmgmt_mtec_error_callback'] = array(
    'page callback' => '_tmgmt_mtec_error_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Callback function for correct MTEC requests.
 */
function _tmgmt_mtec_correct_callback($values) {

  // Retrieve jobID from callback.
  $parameters = drupal_get_query_parameters();
  $tjid = (isset($parameters['tjid'])) ? $parameters['tjid'] : '';

  if (empty($tjid)) {
    drupal_not_found();
  }
  else {
    // Retrieve job and translator.
    $job = tmgmt_job_load($tjid);
    if ($job) {

      // Load ftp settings.
      $ftp_server = variable_get('ftp_server');
      $ftp_location = 'ftp://' . $ftp_server['user'] . ':' . $ftp_server['password'] . '@' . $ftp_server['address'] . ':' . $ftp_server['port'] . '/' . $job->uuid;
      $server_file = _tmgmt_mtec_filename_builder($job->tjid, $job->getSetting('export_format'), strtoupper($job->target_language));

      // Open connection and login.
      $conn_id = ftp_connect($ftp_server['address'], $ftp_server['port'], 15);
      if (!$conn_id) {
        watchdog('MT@EC', "Couldn't connect to the FTP server.", WATCHDOG_ERROR);
        drupal_exit();
      }
      $login_result = ftp_login($conn_id, $ftp_server['user'], $ftp_server['password']);
      if (!$login_result) {
        watchdog('MT@EC', "Couldn't login to the FTP server.", WATCHDOG_ERROR);
        drupal_exit();
      }
      ftp_pasv($conn_id, TRUE);

      // Check that the file exists.
      $found = _tmgmt_mtec_check_ftp_file($conn_id, $job->uuid . '/' . $server_file);
      if ($found) {

        // If the file exists, read its content.
        $translated_file = fopen($ftp_location . '/' . $server_file, "r");
        $translated_content = fread($translated_file, filesize($ftp_location . '/' . $server_file));
        fclose($translated_file);

        // Load the content into a XML object to edit it.
        $translated_xml = simplexml_load_string($translated_content);
        $phase = $translated_xml->file->header->{'phase-group'}->phase;

        // We need to re-add the job-id attribute to the XML,
        // since the MT@EC service removes it.
        $phase->addAttribute('job-id', $tjid);
        $temp_file = fopen(variable_get('file_private_path') . $tjid . ".xlf", "w");
        fwrite($temp_file, $translated_xml->asXML());
        fclose($temp_file);

        // Retrieve the controller.
        $controller = tmgmt_file_format_controller($job->getSetting('export_format'));
        if ($controller) {
          try {
            // Import the received file.
            $job->addTranslatedData($controller->import(variable_get('file_private_path') . $tjid . ".xlf"));
            $job->addMessage('Successfully imported file.');
          }
          catch (Exception $e) {
            $job->addMessage('File import failed with the following message: @message', array('@message' => $e->getMessage()), 'error');
          }
        }

        // Delete the temporary file created earlier.
        $realpath = realpath(variable_get('file_private_path') . $tjid . ".xlf");
        if (is_readable($realpath)) {
          unlink($realpath);
        }
      }
      else {
        $job->addMessage('Translation message received from TM@EC but file was not found', array(), 'error');
      }
      // Close connection.
      ftp_close($conn_id);
    }
    drupal_exit();
  }
}

/**
 * Callback function for error MTEC requests.
 */
function _tmgmt_mtec_error_callback($values) {

  // Retrieve jobID from callback.
  $parameters = drupal_get_query_parameters();
  $tjid = (isset($parameters['tjid'])) ? $parameters['tjid'] : '';

  if (empty($tjid)) {
    drupal_not_found();
  }
  else {
    $error = (isset($_POST['errorMessage'])) ? $_POST['errorMessage'] : t('MTEC did not return an error message');
    $job = tmgmt_job_load($tjid);
    $job->rejected('MT@EC could not translate de content. Message: @error',
      array('@error' => $error), 'error');
    drupal_exit();
  }
}

/**
 * Implements hook_tmgmt_job_delete().
 */
function tmgmt_mtec_tmgmt_job_delete(TMGMTJob $job) {
  $translator = $job->getTranslator();

  // Ignore jobs that don't have a mtec translator.
  if (!$translator || $translator->plugin != 'mtec') {
    return;
  }

  // Load FTP data.
  $ftp_server = variable_get('ftp_server');

  // Open connection and login.
  $conn_id = ftp_connect($ftp_server['address'], $ftp_server['port'], 15);
  if (!$conn_id) {
    watchdog('MT@EC', "Couldn't connect to the FTP server.", WATCHDOG_ERROR);
    drupal_exit();
  }
  $login_result = ftp_login($conn_id, $ftp_server['user'], $ftp_server['password']);
  if (!$login_result) {
    watchdog('MT@EC', "Couldn't login to the FTP server.", WATCHDOG_ERROR);
    drupal_exit();
  }
  ftp_pasv($conn_id, TRUE);
  _tmgmt_mtec_ftp_rmdir($conn_id, $job->uuid);
  // Close connection.
  ftp_close($conn_id);
}

/**
 * Helper function to check FTP settings.
 */
function _tmgmt_mtect_check_ftp_settings() {
  $messages = array();
  $ftp_settings = variable_get('ftp_server');
  if (isset($ftp_settings) && !empty($ftp_settings)) {
    foreach ($ftp_settings as $key => $value) {
      if (!$value) {
        $messages[] = t('FTP settings error: %key variable is empty', array('%key' => $key));
        $type = 'error';
      }
    }
  }
  else {
    $messages[] = t('Main "ftp_settings" variable was not set. See the README.txt file or read the wiki page.');
    $type = 'error';
  }
  if (empty($messages)) {
    $messages[] = t('Main "ftp_settings" variable is properly set.');
    $type = 'status';
  }
  return _tmgmt_mtect_theme_messages($messages, $type);
}

/**
 * Helper module to check MT@EC settings.
 */
function _tmgmt_mtect_check_mtec_settings() {
  $messages = array();
  $mtec_settings = variable_get('mtec_service');
  if (!isset($mtec_settings) || empty($mtec_settings)) {
    $messages[] = t('Main "mtec_service" variable was not set or is empty. See the README.txt file or read the wiki page.');
    $type = 'error';
  }
  if (empty($messages)) {
    $messages[] = t('Main "mtec_service" variable is properly set.');
    $type = 'status';
  }
  return _tmgmt_mtect_theme_messages($messages, $type);
}

/**
 * Helper module to theme MT@EC messages.
 *
 * @param array $messages
 *   Array of messages to be displayed.
 * @param string $type
 *   Type of the messages.
 *
 * @return string
 *   Themed messages.
 */
function _tmgmt_mtect_theme_messages(array $messages, $type) {
  $output = "<div class=\"messages $type\">\n";
  $output .= theme("item_list", array("items" => $messages));
  $output .= "</div>\n";
  return $output;
}

/**
 * Helper function for build the filename.
 *
 * @param string $tjid
 *   Id of job.
 * @param string $extension
 *   Extension of the file.
 *
 * @return string
 *   Full name of file.
 */
function _tmgmt_mtec_filename_builder($tjid, $extension, $language = NULL) {
  $prefix = '';
  if ($language) {
    $prefix = '_' . $language;
  }
  return 'JobID' . $tjid . $prefix . '.' . $extension;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add uuid field to the job entity.
 */
function tmgmt_mtec_entity_info_alter(&$entity_info) {
  if (module_exists('uuid')) {
    $entity_info['tmgmt_job']['uuid'] = TRUE;
    $entity_info['tmgmt_job']['entity keys']['uuid'] = 'uuid';
  }
}

/**
 * Helper function to remove a directory on a FTP server recursively.
 */
function _tmgmt_mtec_ftp_rmdir($handle, $path) {
  try {
    if (@ftp_delete($handle, $path) === FALSE) {
      if ($children = @ftp_nlist($handle, $path)) {
        foreach ($children as $child) {
          _tmgmt_mtec_ftp_rmdir($handle, $path . '/' . $child);
        }
      }
      @ftp_rmdir($handle, $path);
    }
  }
  catch (Exception $e) {
    $job->addMessage(' Error when deleting the file from the ftp server: @message', array('@message' => $e->getMessage()), 'error');
  }
}

/**
 * Helper function to check for a file for 10 seconds.
 */
function _tmgmt_mtec_check_ftp_file($conn_id, $file) {
  $i = 0;
  $found = FALSE;
  while ($i < 10 && !$found) {
    if (ftp_size($conn_id, $file) != -1) {
      $found = TRUE;
    }
    sleep(1);
    $i++;
  }
  return $found;
}
