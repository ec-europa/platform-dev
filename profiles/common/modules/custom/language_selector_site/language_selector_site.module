<?php

/**
 * @file
 * Manage language switcher at site level.
 */

/**
 * Implements hook_block_info().
 */
function language_selector_site_block_info() {
  $block = array();
  $block['language_selector_site'] = array(
    'info' => t('Language selector (Site)'),
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function language_selector_site_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'language_selector_site':
      $block['content'] = language_selector_site_block_content();
      break;
  }

  return $block;
}

/**
 * Manage content of the block.
 */
function language_selector_site_block_content() {
  global $language;

  $block = array(
    'code' => array(
      '#type' => 'markup',
      '#markup' => !empty($language->prefix) ? $language->prefix : $language->language,
    ),
    'label' => array(
      '#type' => 'markup',
      '#markup' => $language->native,
    ),
  );

  return $block;
}

/**
 * Implements hook_preprocess_block().
 *
 * Default implementation of language selector.
 */
function language_selector_site_preprocess_block(&$variables) {
  if (isset($variables['block']->bid) && $variables['block']->bid === 'language_selector_site-language_selector_site') {

    // Initialize variables.
    $code = '<span class="lang-select-site__code">' . $variables['elements']['code']['#markup'] . '</span>';
    $label = '<span class="lang-select-site__label">' . $variables['elements']['label']['#markup'] . '</span>';
    $options = array(
      'html' => TRUE,
      'attributes' => array(
        'class' => array('lang-select-site__link'),
      ),
      'query' => array(drupal_get_destination()),
    );

    // Add class to block.
    $variables['classes_array'][] = 'lang-select-site';

    // Add content to block.
    $variables['content'] = l($code . $label, 'language-selector/site-language', $options);
  }
}

/**
 * Implements hook_menu().
 */
function language_selector_site_menu() {
  return [
    'language-selector/site-language' => [
      'title' => 'Select language',
      'page callback' => 'theme',
      'page arguments' => array('language_selector_site_language_list'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function language_selector_site_theme($existing, $type, $theme, $path) {
  return [
    'language_selector_site_language_list' => [
      'template' => 'language-selector-site-language-list',
      'path' => $path . '/theme',
    ],
    'page__language_selector__site_language' => [
      'template' => 'page--language-selector--site-language',
      'path' => $path . '/theme',
      'render element' => 'page',
      'base hook' => 'page',
    ],
  ];
}

/**
 * Processes variables for language-selector-site-language-list.tpl.php.
 *
 * @see language-selector-site-language-list.tpl.php
 */
function template_preprocess_language_selector_site_language_list(&$variables) {
  // Default to the front page if no destination is given.
  $destination = !empty($_GET['destination']) ? $_GET['destination'] : variable_get('site_frontpage', '');

  // Split the destination URL into path and query arguments.
  $options = [];
  $path_components = drupal_parse_url($destination);
  $path = $path_components['path'];

  // Export variables to template.
  $variables['icon'] = theme('nexteuropa_multilingual_language_icon');
  $variables['close_button'] = l(t('Close'), $path, $options);
  $variables['languages_list'] = theme('nexteuropa_multilingual_language_list', [
    'languages' => language_list('enabled')[1],
    'path' => $path,
    'options' => $options,
  ]);
}
