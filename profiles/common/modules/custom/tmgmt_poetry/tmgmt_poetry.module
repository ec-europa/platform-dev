<?php
/**
 * @file
 * Module file of the translation management Poetry .
 */

module_load_include('inc', 'tmgmt_poetry', 'inc/tmgmt_poetry.access_control');
module_load_include('inc', 'tmgmt_poetry', 'inc/tmgmt_poetry.webservice');

/**
 * Implements hook_entity_info_alter().
 */
function tmgmt_poetry_entity_info_alter(&$entity_info) {
  $entity_info['tmgmt_job']['controller class'] = 'TMGMTPoetryJobController';
  $entity_info['tmgmt_job']['entity class'] = 'TMGMTPoetryJob';
  _tmgmt_poetry_access_entity_info_alter($entity_info);
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_poetry_tmgmt_translator_plugin_info() {
  return array(
    'poetry' => array(
      'label' => t('DGT Connector'),
      'description' => t('DGT Translation service.'),
      'plugin controller class' => 'TMGMTPoetryTranslatorPluginController',
      'ui controller class' => 'TMGMTPoetryTranslatorUIController',
    ),
  );
}

/**
 * Implements hook_entity_type_delete().
 *
 * When main translation job is removed,
 * delete also the sub translation if the translator is poetry.
 */
function tmgmt_poetry_tmgmt_job_delete($job) {
  $translator = $job->getTranslator();
  if (!empty($translator) && $translator->plugin == 'poetry' && isset($job->settings['languages']) && (strpos($job->reference, 'MAIN_' . $job->tjid) !== FALSE)) {
    $related_jobs = _tmgmt_poetry_obtain_related_translation_jobs($job->settings['languages'], 'SUB_' . $job->tjid);
    foreach ($related_jobs as $related_job) {
      entity_get_controller('tmgmt_job')->delete(array($related_job->tjid));
      entity_get_controller('tmgmt_job_item')->delete(array($related_job->tjiid));
    }
  }
}

/**
 * Helper function to retrive a Job based on its reference.
 */
function _tmgmt_poetry_load_job_by_reference($reference) {
  $job = NULL;
  $result = db_select('tmgmt_job', 'job')
      ->fields('job', array('tjid'))
      ->condition('reference', $reference, '=')
      ->execute()
      ->fetchAssoc();
  if (isset($result['tjid']) && !empty($result['tjid'])) {
    $job = tmgmt_job_load($result['tjid']);
  }
  return $job;
}

/**
 * Add a button to send a feedback to DGT.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_poetry_form_tmgmt_ui_workbench_moderation_translation_review_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['item'])) {
    $job = $form_state['item'];
    if ($job->state == 2) {
      $translator_feedback_contacts = $job->getTranslator()->getSetting('feedback_contacts');
      $mailto = format_string('mailto:@mail?subject=@subject&cc=@cc',
       array(
         '@mail' => $translator_feedback_contacts['to'],
         '@subject' => 'Issue with ' . $job->tjid,
         '@cc' => $translator_feedback_contacts['cc'],
       ));
      $form['actions']['feedback'] = array(
        '#type' => 'link',
        '#title' => 'Feedback to DGT',
        '#href' => $mailto,
        '#weight' => -1,
        '#attributes' => array('class' => array('button')),
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_poetry_form_tmgmt_job_form_alter(&$form, &$form_state, $form_id) {
  $translator = '';
  // If translator values has been changed.
  if (isset($form_state['values']['translator'])) {
    $translator_name = $form_state['values']['translator'];
    // Obtain current translation job translator.
    $translator = tmgmt_translator_load($translator_name);
  }
  elseif (isset($form_state['tmgmt_job']->translator)) {
    $translator = $form_state['tmgmt_job']->getTranslator();
  }
  $form['translator_wrapper']['#id'] = "tmgmt-ui-translator-wrapper";
  if ($translator->plugin == 'poetry' || $form_state['tmgmt_job']->getTranslator()->plugin == 'poetry') {
    $form['#submit'][] = '_tmgmt_poetry_form_tmgmt_job_submit';

    if (strpos($form_state['tmgmt_job']->reference, 'SUB_') !== FALSE) {
      $form['actions']['abort_job']['#access'] = FALSE;
      $form['actions']['submit']['#access'] = FALSE;
      $form['actions']['delete']['#access'] = FALSE;
      $form['translator_wrapper']['#access'] = FALSE;
    }

    $job_items = $form_state['tmgmt_job']->getItems();
    if (count($job_items) > 0) {
      $job_item = array_shift($job_items);
    }
  }
}

/**
 * Job Form Callback.
 */
function _tmgmt_poetry_form_tmgmt_job_submit($form, &$form_state) {
  $origin_job = $form_state['tmgmt_job'];
  $translator = $origin_job->getTranslator();
  if ($translator->plugin != 'poetry') {
    $requested_languages = array();
    // The translator has benn changed,
    // proceed to clear the settings of origin job and the main reference.
    if (isset($origin_job->settings['languages'])) {
      $origin_job->settings = NULL;
      $origin_job->reference = NULL;
      $origin_job->save();
    }
  }
  else {
    if (isset($form_state['values']['languages'])) {
      $requested_languages = $form_state['values']['languages'];
    }
    else {
      $requested_languages = $origin_job->settings['languages'];
    }
  }

  $languages = language_list('language');
  // Remove old translations in case that they are not available
  // in the settings of the main translation.
  $language_targets_to_remove = array();
  foreach ($languages as $language) {
    // If a language is not in the requested translation.
    if (!in_array($language->language, array_merge(array($origin_job->source_language), $requested_languages), TRUE)) {
      $language_targets_to_remove[] = $language->language;
    }
  }

  $origin_job_items = $origin_job->getItems();
  if ($origin_job_items === NULL) {
    return;
  }

  $origin_job_item = array_shift($origin_job_items);

  // In case if a translation request is already sent,
  // check if there was added or removed additionnal languages.
  if (($form_state['triggering_element']['#value'] != $form['actions']['checkout']['#value']) && $origin_job->state == TMGMT_JOB_STATE_ACTIVE && $origin_job_item->state < TMGMT_JOB_ITEM_STATE_REVIEW) {
    if ($form_state['values']['languages'] !== $origin_job->settings['languages']) {
      unset($origin_job->settings['translations']);
      foreach ($form_state['values']['languages'] as $key_lang => $value_lang) {
        // A LANGUAGE IS ADDED TO ALREADY SENT TRANSLATION REQUEST.
        if (empty($origin_job->settings['languages'][$key_lang]) && !empty($value_lang)) {
          $origin_job->settings['translations']['added'][] = $key_lang;
          // A LANGUAGE IS REMOVED FROM ALREADY SENT TRANSLATION REQUEST.
        }
        elseif (!empty($origin_job->settings['languages'][$key_lang]) && empty($value_lang)) {
          $origin_job->settings['translations']['removed'][] = $key_lang;
        }
      }
      $origin_job_languages = $origin_job->settings['languages'];
      $origin_job->settings['languages'] = $form_state['values']['languages'];
      $origin_job->save();
      // If new request is failed,
      // reset the main job translation languages to old value and save.
      if (!tmgmt_ui_job_request_translation($origin_job)) {
        $origin_job->settings['languages'] = $origin_job_languages;
        $origin_job->state = TMGMT_JOB_STATE_ACTIVE;
        $origin_job->save();
        return;
      }
    }
    else {
      drupal_set_message(t('No changes was detected to resubmit the request'));
    }
  }

  // Find unchecked translations to be removed.
  $result = _tmgmt_poetry_obtain_related_translation_jobs($language_targets_to_remove, 'SUB_' . $origin_job->tjid);
  // If any, removed found translations.
  if ($result) {
    foreach ($result as $row) {
      // Remove if the target language is the same as the main translation.
      if ($origin_job->tjid !== $row->tjid && $origin_job_item->tjiid !== $row->tjiid) {
        entity_get_controller('tmgmt_job')->delete(array($row->tjid));
        entity_get_controller('tmgmt_job_item')->delete(array($row->tjiid));
      }
    }
  }
}

/**
 * Return related translations by the translated entity id.
 *
 * @param array $languages
 *   Target languages.
 * @param string $reference
 *   Reference to look for.
 * @param bool $not_poetry
 *   Job does not belong to poetry.
 *
 * @return mixed
 *   mixed.
 */
function _tmgmt_poetry_obtain_related_translation_jobs($languages = array(), $reference = '', $not_poetry = FALSE) {
  $query = db_select('tmgmt_job', 'job');
  $query->join('tmgmt_job_item', 'job_item', 'job.tjid = job_item.tjid');
  $query->fields('job', array('tjid'))
      ->fields('job_item', array('tjiid'));
  if (count($languages) > 0) {
    $query->condition('job.target_language', $languages, 'IN');
  }
  $query->condition('job.reference', $reference . '%', 'LIKE');
  if ($not_poetry) {
    $query->condition('job.reference', $reference . '_POETRY_%', 'NOT LIKE');
  }

  return $query->execute();
}

/**
 * Insert a row on the item status table.
 *
 * @param int $tjiid
 *   Job item identifier.
 * @param string $target_language
 *   Target language.
 * @param string $status
 *   Item status.
 * @param string $delai
 *   Item delay.
 */
function _tmgmt_poetry_insert_item_status($tjiid, $target_language, $status, $delai) {
  db_insert('poetry_status')
      ->fields(array(
        'tjiid' => $tjiid,
        'target_language' => $target_language,
        'status' => $status,
        'delai' => $delai,
      ))
      ->execute();
}
