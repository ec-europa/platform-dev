<?php

/**
 * @file
 * Module to simulate a poetry response.
 */

define('TMGMT_POETRY_MOCK_REQUESTS_PATH', 'public://tmgmt_file/poetry_mock_requests/');

/**
 * Implements hook_menu().
 */
function tmgmt_poetry_mock_menu() {
  $items['tmgmt_poetry_mock/soap_server'] = [
    'title' => 'Poetry Soap Server',
    'page callback' => '_tmgmt_poetry_mock_soap_server',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tmgmt_poetry_mock.server.inc',
  ];

  $items['tmgmt_poetry_mock/translate/%/%/%'] = [
    'title' => 'Poetry Mock: Translate job',
    'page callback' => '_tmgmt_poetry_mock_translate_job',
    'page arguments' => [2, 3, 4],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tmgmt_poetry_mock.actions.inc',
  ];

  $items['tmgmt_poetry_mock/refuse/%/%'] = [
    'title' => 'Poetry Mock: Refuse job',
    'page callback' => '_tmgmt_poetry_mock_refuse_job',
    'page arguments' => [2, 3],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tmgmt_poetry_mock.actions.inc',
  ];

  $items['tmgmt_poetry_mock/tmgmt_poetry_mock.wsdl'] = [
    'page callback' => '_tmgmt_poetry_mock_wsdl',
    'access callback' => TRUE,
    'file' => 'includes/tmgmt_poetry_mock.server.inc',
  ];

  $items['admin/poetry_mock'] = [
    'title' => 'POETRY Mock',
    'description' => 'Available options',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => ['administer site configuration'],
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];

  $items['admin/poetry_mock/setup'] = [
    'title' => 'POETRY Mock: Setup',
    'description' => 'Setup page for POETRY Mock',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tmgmt_poetry_mock_setup_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/tmgmt_poetry_mock_forms.inc',
    'weight' => 1,
  ];

  $items['admin/poetry_mock/dashboard'] = [
    'title' => 'POETRY Mock: Dashboard',
    'description' => 'Dashboard page for POETRY Mock',
    'page callback' => 'tmgmt_poetry_mock_dashboard',
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/tmgmt_poetry_mock_dashboard.inc',
    'weight' => 2,
  ];

  $items['admin/poetry_mock/send-request'] = [
    'title' => 'POETRY Mock: Send request',
    'description' => 'Allows to send XML request to Drupal endpoint',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tmgmt_poetry_mock_send_request'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/tmgmt_poetry_mock_forms.inc',
    'weight' => 2,
  ];

  $items['tmgmt_poetry_mock/send-status/%/%'] = [
    'title' => 'Poetry Mock: Send status',
    'page callback' => '_tmgmt_poetry_mock_send_status',
    'page arguments' => [2, 3],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tmgmt_poetry_mock.actions.inc',
  ];

  return $items;
}

/**
 * Helper function for checking if poetry_service variable is set up correctly.
 *
 * @return bool
 *    TRUE if it's correct / FALSE if not
 */
function _check_poetry_service_variable() {
  $poetry_service = variable_get('poetry_service', FALSE);
  if ($poetry_service) {
    // Fetching all of needed endpoints.
    $poetry_wsdl = _tmgmt_poetry_mock_get_poetry_service_wsdl();
    $drupal_wsdl = _tmgmt_poetry_mock_get_drupal_service_wsdl();
    $poetry_endpoint = _tmgmt_poetry_mock_get_poetry_service_endpoint();

    // Checking if they are set up correctly according to current environment.
    if (isset($poetry_service['address']) && $poetry_service['address'] == $poetry_wsdl) {
      if (isset($poetry_service['drupal_wsdl']) && $poetry_service['drupal_wsdl'] == $drupal_wsdl) {
        if (isset($poetry_service['poetry_endpoint']) && $poetry_service['poetry_endpoint'] == $poetry_endpoint) {

          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Get the absolute URL of the mocked Poetry WSDL.
 *
 * @return string
 *    Absolute URL of the mocked Poetry WSDL.
 */
function _tmgmt_poetry_mock_get_poetry_service_wsdl() {
  return url(
    'tmgmt_poetry_mock/tmgmt_poetry_mock.wsdl',
    [
      'absolute' => TRUE,
      'language' => (object) ['language' => FALSE],
    ]
  );
}

/**
 * Get the absolute URL of the mocked Poetry SOAP endpoint.
 *
 * @return string
 *    Absolute URL of the mocked Poetry SOAP endpoint.
 */
function _tmgmt_poetry_mock_get_poetry_service_endpoint() {
  return url(
    'tmgmt_poetry_mock/soap_server',
    [
      'absolute' => TRUE,
      'language' => (object) ['language' => FALSE],
    ]
  );
}

/**
 * Get the URL of the tmgmt_poetry WSDL.
 *
 * @return string
 *    Absolute URL of the tmgmt_poetry WSDL.
 */
function _tmgmt_poetry_mock_get_drupal_service_wsdl() {
  return url(
    drupal_get_path("module", "tmgmt_poetry") . "/wsdl/PoetryIntegration.wsdl",
    [
      'absolute' => TRUE,
      'language' => (object) ['language' => FALSE],
    ]
  );
}

/**
 * Implements hook_theme().
 */
function tmgmt_poetry_mock_theme($existing, $type, $theme, $path) {
  $response_template_path = drupal_get_path('module', 'tmgmt_poetry_mock') . '/response_templates';

  return [
    'poetry_confirmation_of_receiving_translation_request' => [
      'variables' => [
        'demande_id' => NULL,
      ],
      'template' => 'poetry-confirmation-of-receiving-the-translation-request',
      'path' => $response_template_path,
    ],
    'poetry_confirmation_of_receiving_translation_request_error_configuration' => [
      'variables' => [
        'demande_id' => NULL,
        'message' => NULL,
      ],
      'template' => 'poetry-confirmation-of-receiving-the-translation-request-error-configuration',
      'path' => $response_template_path,
    ],
    'poetry_receive_translation' => [
      'variables' => [
        'demande_id' => NULL,
        'content' => NULL,
        'language' => NULL,
        'format' => NULL,
      ],
      'template' => 'poetry-receive-translation',
      'path' => $response_template_path,
    ],
    'poetry_refuse_translation' => [
      'variables' => [
        'demande_id' => NULL,
        'languages' => NULL,
        'format' => NULL,
        'status' => NULL,
      ],
      'template' => 'poetry-refuse-translation',
      'path' => $response_template_path,
    ],
    'poetry_wsdl' => [
      'variables' => [
        'uri' => NULL,
      ],
      'template' => 'poetry-wsdl',
      'path' => $response_template_path,
    ],
    'poetry_send_status' => [
      'variables' => [
        'demande_id' => NULL,
        'languages' => NULL,
        'format' => NULL,
        'status_code' => NULL,
        'request_status_msg' => NULL,
        'demande_status_msg' => NULL,
      ],
      'template' => 'poetry-send-status',
      'path' => $response_template_path,
    ],
  ];
}

/**
 * Get the proper configuration to connect tmgmt_poetry with tmgmt_poetry_mock.
 *
 * @return array
 *   A proper value for the poetry_service variable.
 */
function tmgmt_poetry_mock_service_configuration() {
  $poetry_service = array(
    'address' => _tmgmt_poetry_mock_get_poetry_service_wsdl(),
    'method' => 'requestService',
    'callback_user' => 'Callback',
    'callback_password' => 'CallbackPWD',
    'poetry_user' => 'Poetry',
    'poetry_password' => 'PoetryPWD',
    'drupal_wsdl' => _tmgmt_poetry_mock_get_drupal_service_wsdl(),
    'poetry_endpoint' => _tmgmt_poetry_mock_get_poetry_service_endpoint(),
  );

  return $poetry_service;
}

/**
 * Get the path for translation job item related entity.
 *
 * @param int $tjiid
 *    A translation job item ID.
 *
 * @return bool
 *    Indicates if the pretended path is for translation page.
 */
function _tmgmt_poetry_mock_get_job_item_entity_path($tjiid, $translation = FALSE) {

  $item = entity_load_single('tmgmt_job_item', $tjiid);

  // Get the special paths.
  if ($translation) {
    switch ($item->item_type) {
      case "node":
        return 'node/' . $item->item_id . '/translate';

      case "taxonomy_vocabulary":
        $uri = $item->getSourceUri();
        return $uri['path'] . '/translate';

      case "taxonomy_term":
        list(, , $term_id) = explode(':', $item->item_id);
        return url('taxonomy/term/' . $term_id . '/translate');
    }
  }

  // Get the common paths.
  $uri = $item->getSourceUri();
  return $uri['path'];
}

/**
 * Implements hook_entity_info().
 */
function tmgmt_poetry_mock_entity_info_alter(&$info) {
  if (isset($info['taxonomy_vocabulary']) && empty($info['taxonomy_vocabulary']['uri callback'])) {
    $info['taxonomy_vocabulary']['uri callback'] = 'tmgmt_poetry_mock_entity_info_uri_callback';
  }
}

/**
 * Add uri callback for vocabulary.
 *
 * @param object $vocabulary
 *   The vocabulary for which we want the path.
 *
 * @return array
 *    The path for vocabulary's administration page.
 */
function tmgmt_poetry_mock_entity_info_uri_callback($vocabulary) {
  if (user_access('administer taxonomy')) {
    return array(
      'path' => 'admin/structure/taxonomy/' . $vocabulary->machine_name,
    );
  }
}
