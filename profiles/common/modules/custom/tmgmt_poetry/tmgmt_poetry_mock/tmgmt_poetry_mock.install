<?php
/**
 * @file
 * Install file.
 */

use Drupal\tmgmt_poetry_mock\Mock\PoetryMock;

/**
 * Implements hook_install().
 */
function tmgmt_poetry_mock_install() {
  /** @var EntityDrupalWrapper $translator */
  $translator = entity_import('tmgmt_translator', '{
    "name" : "tmgmt_poetry_test_translator",
    "label" : "TMGMT Poetry Test translator",
    "description" : "",
    "weight" : "-999",
    "plugin" : "poetry",
    "settings" : {
      "auto_accept" : 0,
      "settings" : {
        "counter" : "NEXT_EUROPA_COUNTER",
        "code" : "ABCD"
      },
      "organization" : {
        "responsable" : "John Doe (Responsible)",
        "auteur" : "John Doe (Author)",
        "demandeur" : "John Doe (Requester)"
      },
      "contacts" : {
        "auteur" : "John Doe (Author)",
        "secretaire" : "ABCD",
        "contact" : "John Doe (Responsible)",
        "responsable" : "John Doe (Responsible)"
      },
      "remote_languages_mappings" : { "en" : "en" }
    },
    "rdf_mapping" : []
  }');
  $translator->save();
}

/**
 * Implements hook_uninstall().
 */
function tmgmt_poetry_mock_uninstall() {
  $translator = tmgmt_translator_load('tmgmt_poetry_test_translator');
  if (isset($translator)) {
    entity_delete('tmgmt_translator', $translator->tid);
  }
}

/**
 * Implements hook_disable().
 */
function tmgmt_poetry_mock_disable() {
  // Cleaning TMGMT jobs and related items.
  $jobs = PoetryMock::getAllTmgmtJobs();
  foreach ($jobs as $job) {
    $job_items = $job->getItems();
    foreach ($job_items as $item) {
      $item->delete();
    }
    $job->delete();
  }

  // Deleting files which were created by tmgmt_poetry_mock.
  PoetryMock::removeAllRequestTranslationFiles();
  file_unmanaged_delete_recursive(TMGMT_POETRY_MOCK_REQUESTS_PATH);

  // Cleaning the tmgmt_poetry custom database tables.
  db_truncate('poetry_map')->execute();
  db_truncate('poetry_status')->execute();
}
