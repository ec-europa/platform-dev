<?php

/**
 * @file
 * Module to simulate a poetry response.
 */

/**
 * Implements hook_menu().
 */
function tmgmt_poetry_test_menu() {

  $items['tmgmt_poetry_test/soap_server'] = array(
    'title' => 'Poetry Soap Server',
    'page callback' => 'tmgmt_poetry_test_soap_server',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['tmgmt_poetry_test/receivetranslation/%'] = array(
    'title' => 'Poetry Receive Translation',
    'page callback' => 'tmgmt_poetry_test_receive_translation',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items[drupal_get_path("module", "tmgmt_poetry_test") . "/tmgmt_poetry_test.wsdl"] = array(
    'page callback' => '_tmgmt_poetry_testl_wsdl',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * A page callback which simulate poetry webservice.
 */
function tmgmt_poetry_test_soap_server() {
  $uri = url('tmgmt_poetry_test/soap_server', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE)));
  // When in non-wsdl mode the uri option must be specified.
  $options = array('uri' => $uri);
  // Create a new SOAP server.
  $uri = url(drupal_get_path("module", "tmgmt_poetry_test") . "/tmgmt_poetry_test.wsdl", array('absolute' => TRUE, 'language' => (object) array('language' => FALSE)));
  $server = new SoapServer($uri, $options);
  // Attach the API class to the SOAP Server.
  $server->setClass('TMGMTPoetryTestSoapServer');
  // Start the SOAP requests handler.
  $server->handle();
}


/**
 * Simulate receive a translation from poetry.
 */
function tmgmt_poetry_test_receive_translation() {

  $job = tmgmt_job_load(arg(2));
  $poetry = variable_get("poetry_service");

  $url = url('tmgmt_poetry/service_callback', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE))) . '?wsdl';
  $client = new SoapClient($url, array(
    'cache_wsdl' => WSDL_CACHE_NONE,
    'trace' => 1,
  ));

  $msg = _tmgmt_poetry_test_make_xml_msg($job, $job->target_language, 'HTML');

  try {
    $client->FPFISPoetryIntegrationRequest($poetry['callback_user'], $poetry['callback_password'], $msg);
    print "<p>Translation received for job: {$job->tjid} - $job->target_language </p>";
  }
  catch (Exception $e) {
    $response = 'Error new SoapClient : ' . $e->getMessage();
    watchdog('Poetry: Test', filter_xss($response));
  }
}


/**
 * Helper for creation of the message.
 *
 * @param TMGMTJob $job
 *   The job item.
 * @param string $language
 *   The language.
 *
 * @return string
 *   Message returned by poetry to drupal once the translation is done.
 */
function _tmgmt_poetry_test_make_xml_msg(TMGMTJob $job, $language, $format = "") {

  $reference = str_replace('MAIN_' . $job->tjid . '_POETRY_', '', $job->reference);
  $demande_id_data = explode('/', $reference);
  $code_demandeur = $demande_id_data[0];
  $annee = $demande_id_data[1];
  $numero = $demande_id_data[2];
  $version = $demande_id_data[3];
  $partie = $demande_id_data[4];
  $produit = $demande_id_data[5];

  $controller = tmgmt_file_format_controller($job->getSetting('export_format'));
  // Encode the data to be translated.
  $content = base64_encode($controller->export($job));

  $xml = '<?xml version="1.0" encoding="UTF-8"?>
<POETRY xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="">
  <request communication="synchrone" id="3513838" type="translation">
    <demandeId>
      <codeDemandeur>' . $code_demandeur . '</codeDemandeur>
      <annee>' . $annee . '</annee>
      <numero>' . $numero . '</numero>
      <version>' . $version . '</version>
      <partie>' . $partie . '</partie>
      <produit>' . $produit . '</produit>
    </demandeId>
    <status code="EXE" lgCode="' . $language . '" type="attribution">
		<statusDate>' . date('d/m/Y') . '</statusDate>
		<statusTime>' . date('d/m/Y') . '</statusTime>
	</status>
    <attributions format="' . $format . '" lgCode="' . $language . '">
      <attributionsFile>' . $content . '</attributionsFile>
    </attributions>
  </request>
</POETRY>';

  return $xml;
}
/**
 * Helper for message creation.
 *
 * @param TMGMTJob $job
 *   The job item.
 * @param array $languages
 *   Array of languages.
 *
 * @return string
 *   Message returned by poetry to drupal once the translation is refused.
 */
function _tmgmt_poetry_test_make_xml_msg_refused(TMGMTJob $job, array $languages, $status = 'REF') {
  $reference = str_replace('MAIN_' . $job->tjid . '_POETRY_', '', $job->reference);
  $demande_id_data = explode('/', $reference);
  $code_demandeur = $demande_id_data[0];
  $annee = $demande_id_data[1];
  $numero = $demande_id_data[2];
  $version = $demande_id_data[3];
  $partie = $demande_id_data[4];
  $produit = $demande_id_data[5];

  $xml = '<?xml version="1.0" encoding="UTF-8"?>
<POETRY xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="">
  <request communication="synchrone" id="3513838" type="translation">
    <demandeId>
      <codeDemandeur>' . $code_demandeur . '</codeDemandeur>
      <annee>' . $annee . '</annee>
      <numero>' . $numero . '</numero>
      <version>' . $version . '</version>
      <partie>' . $partie . '</partie>
      <produit>' . $produit . '</produit>
    </demandeId>
    <status code="0" type="request">
			<statusDate>02/07/2015</statusDate>
			<statusTime>10:52:02</statusTime>
			<statusMessage>OK</statusMessage>
		</status>
		<status code="' . $status . '" type="demande">
			<statusDate>02/07/2015</statusDate>
			<statusTime>10:51:49</statusTime>
			<statusMessage>OK</statusMessage>
		</status>';
  foreach ($languages as $language) {
    $xml .= '<status code="' . $status . '" lgCode="' . $language . '" type="attribution">
        <statusDate>' . date('d/m/Y') . '</statusDate>
        <statusTime>' . date('H:i:s') . '</statusTime>
      </status>';
  }
  foreach ($languages as $language) {
    $xml .= '<attributions format="XML" lgCode="' . $language . '">
        <attributionsDelai>' . date('d/m/Y H:i:s') . '</attributionsDelai>
        <attributionsDelaiAccepted/>
      </attributions>';
  }
  $xml .= '
    </request>
  </POETRY>';

  return $xml;
}


/**
 * Class TMGMTPoetryTestSoapServer.
 *
 * Simulates poetry response.
 */
class TMGMTPoetryTestSoapServer {
  /**
   * Simulate connection to webservice.
   *
   * @param string $user
   *   Username to connect to webservice.
   * @param string $password
   *   Password to connect to webservice.
   * @param string $msg
   *   Message.
   *
   * @return string
   *   Message returned by webservice.
   */
  public function requestService($user, $password, $msg) {

    $response_xml = simplexml_load_string($msg);
    $request = $response_xml->request;
    $demande_id = (array) $request->demandeId;
    if (!isset($demande_id['numero'])) {
      $demande_id['numero'] = rand(10000, 99999);
    }
    $xml = '
<POETRY xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="">
	<request communication="synchrone" id="DGT/2013/00001/00/00/TRA" type="status">
		<demandeId>
			<codeDemandeur>WEB</codeDemandeur>
			<annee>' . $demande_id['annee'] . '</annee>
			<numero>' . $demande_id['numero'] . '</numero>
			<version>' . $demande_id['version'] . '</version>
			<partie>' . $demande_id['partie'] . '</partie>
			<produit>TRA</produit>
		</demandeId>
		<status code="0" type="request">
			<statusDate format="dd/mm/yyyy">' . date('d/m/Y') . '</statusDate>
			<statusTime format="hh:mm:ss">' . date('H:i:s') . '</statusTime>
			<statusMessage>OK</statusMessage>
		</status>
		<status code="0" type="demande">
			<statusDate format="dd/mm/yyyy">29/04/2013</statusDate>
			<statusTime format="hh:mm:ss">14:56:42</statusTime>
			<statusMessage>OK</statusMessage>
		</status>
	</request>
</POETRY>
';
    return new \SoapVar('<requestServiceReturn><![CDATA[' . $xml . ']]> </requestServiceReturn>', \XSD_ANYXML);
  }

}

/**
 * Generate mock wsdl to simulate poetry.
 */
function _tmgmt_poetry_testl_wsdl() {
  $uri = url('tmgmt_poetry_test/soap_server', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE)));
  $wsdl = '<?xml version="1.0" encoding="UTF-8"?>
<definitions name="TMGMTPoetryTestSoapServer" targetNamespace="' . $uri . '" xmlns:tns="' . $uri . 'tmgmt_poetry_test/soap_server" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="' . $uri . '/types">
  <types>
    <xsd:schema targetNamespace="' . $uri . '/types" xmlns="' . $uri . '/types"/>
  </types>
  <message name="requestServiceRequest">
    <part name="user" type="xsd:string"/>
    <part name="password" type="xsd:string"/>
    <part name="msg" type="xsd:string"/>
  </message>
  <message name="requestServiceResponse">
    <part name="requestServiceReturn" type="xsd:string">
    </part>
  </message>
  <portType name="TMGMTPoetryTestSoapServerPortType">
    <operation name="requestService">
      <input message="tns:requestServiceRequest"/>
      <output message="tns:requestServiceResponse"/>
    </operation>
  </portType>
  <binding name="TMGMTPoetryTestSoapServerBinding" type="tns:TMGMTPoetryTestSoapServerPortType">
    <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <operation name="requestService">
      <soap:operation soapAction="' . $uri . '/#requestService"/>
      <input>
      <soap:body use="literal" namespace="' . $uri . '"/>
      </input>
      <output>
        <soap:body use="literal" namespace="' . $uri . '"/>
      </output>
    </operation>
  </binding>
  <service name="TMGMTPoetryTestSoapServerService">
    <port name="TMGMTPoetryTestSoapServerPort" binding="tns:TMGMTPoetryTestSoapServerBinding">
      <soap:address location="' . $uri . '"/>
    </port>
  </service>
</definitions>';
  drupal_add_http_header('Content-Type', 'application/xml; utf-8');
  print $wsdl;exit(0);
}
