<?php

/**
 * @file
 * Module file.
 */

/**
 * Implements hook_entity_info().
 */
function nexteuropa_varnish_entity_info() {
  return array(
    'nexteuropa_varnish_cache_purge_rule' => array(
      'module' => 'nexteuropa_varnish',
      'label' => t('Cache purge rule'),
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'label callback' => 'nexteuropa_varnish_cache_purge_rule_label',
      'base table' => 'nexteuropa_varnish_cache_purge_rule',
      'controller class' => 'EntityAPIController',
      'access callback' => 'nexteuropa_varnish_cache_purge_rule_access',
      'admin ui' => array(
        'path' => 'admin/config/frontend_cache_purge_rules',
        'controller class' => 'CachePurgeRuleEntityUIController',
        'file' => 'nexteuropa_varnish.admin.inc',
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function nexteuropa_varnish_permission() {
  return array(
    'administer frontend cache purge rules' => array(
      'title' => 'Administer frontend cache purge rules',
      'description' => '',
    ),
  );
}

/**
 * Access callback for the cache purge rule entity..
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $cache_purge_rule
 *   (optional) A cache purge rule to check access for. If nothing is given,
 *   access for all cache purge rules is determined.
 * @param object $account
 *   (optional) The user to check for. Leave it to NULL to check for the
 *   global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function nexteuropa_varnish_cache_purge_rule_access($op, $cache_purge_rule = NULL, $account = NULL) {
  return user_access('administer frontend cache purge rules', $account);
}

/**
 * Label callback for the cache purge rule entity.
 *
 * @param object $purge_rule
 *   The cache purge rule.
 */
function nexteuropa_varnish_cache_purge_rule_label($purge_rule) {
  if (isset($purge_rule->id)) {
    return t('cache purge rule !id', array('!id' => $purge_rule->id));
  }

  return t('new cache purge rule');
}
