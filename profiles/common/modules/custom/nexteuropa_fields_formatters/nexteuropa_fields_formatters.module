<?php

/**
 * @file
 * Defines custom Nexteuropa components field formatters.
 */

/**
 * Implements hook_field_formatter_info().
 */
function nexteuropa_fields_formatters_field_formatter_info() {
  return array(
    'ne_bs_button' => array(
      'label' => t('NE Bootstrap button'),
      'description' => t('Displays as a button.'),
      'field types' => array(
        'link_field',
        'list_text',
        'taxonomy_term_reference',
        'text',
        'text_long',
      ),
      'settings' => array(
        'variation' => 'default',
      ),
    ),
    'ne_button' => array(
      'label' => t('NE button'),
      'description' => t('Displays as a button.'),
      'field types' => array(
        'list_text',
        'taxonomy_term_reference',
        'link_field',
      ),
      'settings' => array(
        'variation' => 'default',
      ),
    ),
    'ne_listing' => array(
      'label' => t('NE Listing'),
      'description' => t('Renders line items as listing component'),
      'field types' => array('link_field'),
      'settings' => array(
        'class' => '',
      ),
    ),
    'ne_download_button' => array(
      'label' => t('NE Download button'),
      'description' => t('Button to download file'),
      'field types' => array('file'),
      'settings' => array(
        'label' => 'Download',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function nexteuropa_fields_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_bs_button':
      $element['variation'] = array(
        '#type' => 'select',
        '#title' => t('Variation'),
        '#options' => array(
          'default' => 'Default',
          'ctn' => 'Call to action',
          'ctn--border' => 'Call to action with border',
          'info' => 'Info',
          'menu' => 'Menu',
          'primary' => 'Primary',
          'secondary' => 'Secondary',
        ),
        '#default_value' => $settings['variation'],
        '#description' => t('Please select the button variation you need.'),
      );
      break;

    case 'ne_button':
      $element['variation'] = array(
        '#type' => 'select',
        '#title' => t('Variation'),
        '#options' => array(
          'ecl-default' => 'Default',
          'ecl-ctn' => 'Call to action',
          'ecl-ctn--border' => 'Highlighted',
          'ecl-info' => 'Info',
          'ecl-menu' => 'Menu',
          'ecl-primary' => 'Primary',
          'ecl-secondary' => 'Secondary',
        ),
        '#default_value' => $settings['variation'],
        '#description' => t('Please select the button variation you need.'),
      );
      break;

    case 'ne_listing':
      $element['class'] = array(
        '#type' => 'textfield',
        '#title' => t('Classes'),
        '#default_value' => $settings['class'],
        '#description' => t('You can add additional listing modifiers here.'),
      );
      break;

    case 'ne_download_button':
      $element['label'] = array(
        '#type' => 'textfield',
        '#title' => t('Button label'),
        '#default_value' => $settings['label'],
        '#description' => t('Text to be displayed inside the button.'),
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function nexteuropa_fields_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_download_button':
      if (isset($settings['label'])) {
        $summary[] = t('Button label: @label', array(
          '@label' => $settings['label'],
        ));
      }
      break;

    case 'ne_bs_button':
    case 'ne_button':
      if (isset($settings['variation'])) {
        $summary[] = t('Variation: @variation', array(
          '@variation' => $settings['variation'],
        ));
      }
      break;

    case 'ne_listing':
      if (isset($settings['class'])) {
        $summary[] = t('Class: @class', array('@class' => $settings['class']));
      }
      break;
  }

  $summary = implode('<br />', $summary);
  return $summary;
}

/**
 * Custom function to modify the formatter's variation of the field_link.
 */
function _nexteuropa_fields_formatters_field_link_modifyier($title, $modifier, $path, $variation) {
  return l($title, $path, array(
    'html' => TRUE,
    'attributes' => array(
      'class' => array(
        $modifier,
        $modifier . '-' . $variation,
      ),
    ),
  ));
}

/**
 * Implements hook_field_formatter_view().
 */
function nexteuropa_fields_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $settings = $display['settings'];

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_bs_button':
      $modifier = 'btn';

      foreach ($items as $delta => $item) {
        switch ($field['type']) {
          case 'taxonomy_term_reference':
            $term = taxonomy_term_load($item['tid']);
            $uri = taxonomy_term_uri($term);
            $markup = _nexteuropa_fields_formatters_field_link_modifyier(
              $term->name,
              $modifier,
              $uri['path'],
              $settings['variation']
              );
            break;

          case 'link_field':
            $markup = _nexteuropa_fields_formatters_field_link_modifyier(
              $item['title'],
              $modifier,
              $item['url'],
              $settings['variation']
              );
            break;

          default:
            $markup = '<span class="btn btn-' .
              $settings['variation'] . '">' . $item['value'] . '</span>&nbsp;';
            break;
        }
        $elements[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;

    // @TODO update this once the styleguide is finally upgraded.
    case 'ne_button':

      $modifier = 'ecl';
      foreach ($items as $delta => $item) {
        switch ($field['type']) {
          case 'taxonomy_term_reference':
            $term = taxonomy_term_load($item['tid']);
            $uri = taxonomy_term_uri($term);
            $markup = _nexteuropa_fields_formatters_field_link_modifyier($term->name, $modifier, $uri['path'], $settings['variation']);
            break;

          case 'link_field':
            $markup = _nexteuropa_fields_formatters_field_link_modifyier($item['title'], $modifier, $item['url'], $settings['variation']);
            break;

          default:
            $markup = '<span class="btn ecl-btn-' . $settings['variation'] . '">' . $item['value'] . '</span>&nbsp;';
            break;
        }
        $elements[$delta] = array(
          '#markup' => $markup,
        );

      }
      break;

    case 'ne_listing':
      $markup = '<div class="listing ' . $settings['class'] . '">';
      foreach ($items as $delta => $item) {
        switch ($field['type']) {

          case 'link_field':
            $link = l($item['title'], $item['url'], array('attributes' => $item['attributes']));
            $markup .= '
              <div class="listing__item">
                <h3 class="listing__item-title">
                  <span class="icon icon--link"></span>' . $link . '
                </h3>
              </div>';
            break;
        }
        $markup .= '</div>';

        $elements[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;

    // @TODO improve and Fix this by using a template.
    case 'ne_download_button':

      if ($field['type'] == 'file') {
        /* foreach ($items as $delta => $item) {
        $url = file_create_url($item['uri']);
        $size = _nexteuropa_fields_formatters_format_size($item->filesize);
        $title = '<span class="sr-only">('.$size.' kB - PDF - 4 pages)</span>';
        $markup_file = _nexteuropa_fields_formatters_field_link_modifyier(
        $settings['label'], 'btn' , $url, '-default file__btn');
        $markup = '<div class="file ">
        <span class="icon icon--file file__icon"></span>
        <div class="file__metadata">
        <span class="file__title">' . $settings['label'] .'</span>
        <div class="file__info"> ' . $title . '</div>
        </div>' . $markup_file .
        '</div>';
        $elements[$delta] = array(
        '#markup' => $markup,
        );
        }*/
      }

      break;
  }
  return $elements;
}


/**
 * Custom function to generates string representation for the given byte count.
 *
 * @param float $size
 *   A size in bytes.
 * @param int $decimal_places
 *   Number of decimal places.
 * @param string $langcode
 *   Optional language code to translate to a language other than what is used
 *   to display the page.
 *
 * @return string
 *   A translated string representation of the size.
 */
function _nexteuropa_fields_formatters_format_size($size, $decimal_places = 1, $langcode = NULL) {
  $units = array();
  if ($size < DRUPAL_KILOBYTE) {
    return format_plural($size,
      '1 byte',
      '@count bytes',
      [],
      ['langcode' => $langcode]);
  }
  else {
    // Convert bytes to kilobytes.
    $size = $size / DRUPAL_KILOBYTE;
    $units = [
      t('@size KB', [], ['langcode' => $langcode]),
      t('@size MB', [], ['langcode' => $langcode]),
      t('@size GB', [], ['langcode' => $langcode]),
      t('@size TB', [], ['langcode' => $langcode]),
      t('@size PB', [], ['langcode' => $langcode]),
      t('@size EB', [], ['langcode' => $langcode]),
      t('@size ZB', [], ['langcode' => $langcode]),
      t('@size YB', [], ['langcode' => $langcode]),
    ];
    foreach ($units as $unit) {
      if (round($size, $decimal_places) >= DRUPAL_KILOBYTE) {
        $size = $size / DRUPAL_KILOBYTE;
      }
      else {
        break;
      }
    }
    return str_replace('@size', round($size, $decimal_places), $unit);
  }
}
