<?php

/**
 * @file
 * Defines custom Nexteuropa components field formatters.
 */

/**
 * Implements hook_field_formatter_info().
 */
function nexteuropa_fields_formatters_field_formatter_info() {
  return array(
    'ne_bs_button' => array(
      'label' => t('NE Bootstrap button'),
      'description' => t('Displays as a button.'),
      'field types' => array(
        'list_text',
        'taxonomy_term_reference',
        'link_field',
      ),
      'settings' => array(
        'variation' => 'default',
      ),
    ),
    'ne_button' => array(
      'label' => t('NE button'),
      'description' => t('Displays as a button.'),
      'field types' => array(
        'list_text',
        'taxonomy_term_reference',
        'link_field',
      ),
      'settings' => array(
        'variation' => 'default',
      ),
    ),
    'ne_listing' => array(
      'label' => t('NE Listing'),
      'description' => t('Renders line items as listing component'),
      'field types' => array('link_field'),
      'settings' => array(
        'class' => '',
      ),
    ),
    'ne_download_button' => array(
      'label' => t('NE Download button'),
      'description' => t('Button to download file'),
      'field types' => array('file'),
      'settings' => array(
        'label' => 'Download file',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function nexteuropa_fields_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_bs_button':
      $element['variation'] = array(
        '#type' => 'select',
        '#title' => t('Variation'),
        '#options' => array(
          'default' => 'Default',
          'ctn' => 'Call to action',
          'ctn--border' => 'Call to action with border',
          'info' => 'Info',
          'menu' => 'Menu',
          'primary' => 'Primary',
          'secondary' => 'Secondary',
        ),
        '#default_value' => $settings['variation'],
        '#description' => t('Please select the button variation you need.'),
      );
      break;

    case 'ne_button':
      $element['variation'] = array(
        '#type' => 'select',
        '#title' => t('Variation'),
        '#options' => array(
          'ecl-default' => 'Default',
          'ecl-ctn' => 'Call to action',
          'ecl-ctn--border' => 'Call to action with border',
          'ecl-info' => 'Info',
          'ecl-menu' => 'Menu',
          'ecl-primary' => 'Primary',
          'ecl-secondary' => 'Secondary',
        ),
        '#default_value' => $settings['variation'],
        '#description' => t('Please select the button variation you need.'),
      );
      break;

    case 'ne_listing':
      $element['class'] = array(
        '#type' => 'textfield',
        '#title' => t('Classes'),
        '#default_value' => $settings['class'],
        '#description' => t('You can add additional listing modifiers here.'),
      );
      break;

    case 'ne_download_button':
      $element['label'] = array(
        '#type' => 'textfield',
        '#title' => t('Button label'),
        '#default_value' => $settings['label'],
        '#description' => t('Text to be displayed inside the button.'),
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function nexteuropa_fields_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_download_button':
      if (isset($settings['label'])) {
        $summary[] = t('Button label: @label', array('@label' => $settings['label']));
      }
      break;

    case 'ne_bs_button':
    case 'ne_button':
      if (isset($settings['variation'])) {
        $summary[] = t('Variation: @variation', array('@variation' => $settings['variation']));
      }
      break;

    case 'be_listing':
      if (isset($settings['class'])) {
        $summary[] = t('Class: @class', array('@class' => $settings['class']));
      }
      break;
  }

  $summary = implode('<br />', $summary);
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function nexteuropa_fields_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $settings = $display['settings'];
  $path = drupal_get_path('module', 'nexteuropa_fields_formatters');

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_bs_button':
      foreach ($items as $delta => $item) {
        switch ($field['type']) {
          case 'taxonomy_term_reference':
            $term = taxonomy_term_load($item['tid']);
            $uri = taxonomy_term_uri($term);
            $label = '<a class="btn btn-' . $settings['variation'] . '" href="#">' . $term->name . '</a>&nbsp;';
            $markup = l($label, $uri['path'], array('html' => TRUE));
            break;

          case 'link_field':
            $markup = l($item['title'], $item['url'], array('attributes' => array('class' => array('btn', 'btn-' . $settings['variation']))));
            break;

          default:
            $markup = '<span class="btn btn-' . $settings['variation'] . '">' . $item['value'] . '</span>&nbsp;';
            break;
        }
        $elements[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;

    case 'ne_button':
      foreach ($items as $delta => $item) {
        switch ($field['type']) {

          case 'taxonomy_term_reference':
            $term = taxonomy_term_load($item['tid']);
            $uri = taxonomy_term_uri($term);
            $label = '<a class="btn ecl-btn-' . $settings['variation'] . '" href="#">' . $term->name . '</a>&nbsp;';
            $markup = l($label, $uri['path'], array('html' => TRUE));
            break;

          case 'link_field':
            $markup = l($item['title'], $item['url'], array('attributes' => array('class' => array('btn', 'ecl-btn-' . $settings['variation']))));
            break;

          default:
            $markup = '<span class="btn ecl-btn-' . $settings['variation'] . '">' . $item['value'] . '</span>&nbsp;';
            break;
        }
        $elements[$delta] = array(
          '#markup' => $markup,
        );

      }
      break;

    case 'ne_listing':
      $markup = '<div class="listing ' . $settings['class'] . '">';
      foreach ($items as $delta => $item) {
        switch ($field['type']) {

          case 'link_field':
            $link = l($item['title'], $item['url'], array('attributes' => $item['attributes']));
            $markup .= '
              <div class="listing__item">
                <h3 class="listing__item-title">
                  <span class="icon icon--link"></span>' . $link . '
                </h3>
              </div>';
            break;
        }
        $markup .= '</div>';

        $elements[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;

    case 'ne_download_button':
      foreach ($items as $delta => $item) {
        $url = file_create_url($item['uri']);
        $icon = ' <span class="icon icon--download"></span>';
        $link = l($settings['label'] . $icon, $url, array(
          'attributes' => array(
            'class' => array('btn', 'btn-primary', 'btn-lg'),
            'target' => '_blank',
          ),
          'html' => TRUE,
        ));
        $elements[$delta] = array(
          '#markup' => $link . '<br />',
        );
      }
      break;
  }
  return $elements;
}
