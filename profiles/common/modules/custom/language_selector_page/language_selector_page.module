<?php

/**
 * @file
 * Manage language switcher at page level.
 */

/**
 * Implements hook_page_build().
 *
 * As we can not alter the autocomplete path without a hook_form_alter we add a
 * bit of javascript to alter these urls. We cannot load this last in the page
 * as this might break the purpose of it.
 */
function language_selector_page_page_build(&$page) {
  $path = drupal_get_path('module', 'language_selector_page');
  $page['content']['#attached']['js'][] = array(
    'type' => 'file',
    'data' => $path . '/js/language_selector_page.js',
  );
}

/**
 * Implements hook_block_info().
 */
function language_selector_page_block_info() {
  $block = array();
  $block['language_selector_page'] = array(
    'info' => t('Language selector (Page)'),
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function language_selector_page_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'language_selector_page':
      $block['content'] = language_selector_page_block_content();
      break;
  }

  return $block;
}

/**
 * Manage content of the block.
 */
function language_selector_page_block_content() {
  global $language;

  $languages = language_list('enabled');
  $block = array();

  // Load current node.
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));

    // Doesn't manage neutral language.
    if ($node->language !== LANGUAGE_NONE) {

      // Initialize variables.
      $is_available = FALSE;
      $not_available = '';
      $served = '';
      $other = array();

      // Get currently served language.
      $served_code = entity_translation_get_existing_language('node', $node);
      $served = $languages[1][$served_code];

      // Display the switcher only if the current language is not available.
      if (!in_array($language->language, array_keys($node->translations->data))) {
        // Check available translations.
        foreach ($node->translations->data as $code => $lang) {
          if ($code == $language->language) {
            $is_available = TRUE;
          }

          if ($code != $served->language) {
            $other[$code] = $languages[1][$code];
          }
        }

        // Check if required language is available.
        if (!$is_available) {
          $not_available = $language;
        }

        // Update block.
        $block = array(
          'not_available' => array(
            '#type' => 'object',
            '#markup' => $not_available,
          ),
          'served' => array(
            '#type' => 'object',
            '#markup' => $served,
          ),
          'other' => array(
            '#type' => 'array',
            '#markup' => $other,
          ),
        );
      }
    }
  }

  return $block;
}

/**
 * Implements hook_preprocess_block().
 *
 * Default implementation of language selector.
 */
function language_selector_page_preprocess_block(&$variables) {
  if (isset($variables['block']->bid) && $variables['block']->bid === 'language_selector_page-language_selector_page') {

    // Initialize variables.
    $not_available = '';
    $served = '';
    $other = '';

    // Render 'not_available' languages.
    if (!empty($variables['elements']['not_available']['#markup'])) {
      $not_available = '<li class="lang-select-page__not-available">' . $variables['elements']['not_available']['#markup']->native . '</li>';
    }

    // Render 'served' languages.
    if (!empty($variables['elements']['served']['#markup'])) {
      $served = '<li class="lang-select-page__served">' . $variables['elements']['served']['#markup']->native . '</li>';
    }

    // Render 'other' languages.
    if (!empty($variables['elements']['other']['#markup'])) {
      // Order the language list by using language weight.
      uasort($variables['elements']['other']['#markup'], 'multisite_drupal_toolbox_sort_weight_object');

      // Render elements.
      foreach ($variables['elements']['other']['#markup'] as $code => $lang) {
        $options = array(
          'query' => drupal_get_query_parameters(),
        );
        $options['query']['2nd-language'] = $code;

        $other .= '<li>' . l($lang->native, current_path(), $options) . '</li>';
      }
    }

    // Add class to block.
    $variables['classes_array'][] = 'lang-selector-page';

    // Add content to block.
    $content = '<ol>' . $not_available . $served . $other . '</ol>';
    $variables['content'] = $content;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Signal link that the "2nd-language" logic should be applied to the link,
 * See also hook_url_outbound_alter(), which is called before preprocessment
 * and then we don't want this logic to apply.
 */
function language_selector_page_preprocess_link(&$variables) {
  $variables['options']['2nd-language-apply'] = TRUE;
}

/**
 * Implements hook_url_outbound_alter().
 *
 * We alter the outbound url here, as this allows further modification and does
 * not require JS. We simply check for the $_GET parameter and reappend it where
 * it is needed (everywhere).
 */
function language_selector_page_url_outbound_alter(&$path, &$options, $original_path) {

  // We only want to change, links preprocessed, not external,
  // not autocomplete and if it wasn't previously defined.
  if (
    isset($options['2nd-language-apply']) &&
    !$options['external'] &&
    strpos($path, 'autocomplete') === FALSE &&
    empty($options['query']['2nd-language'])
  ) {

    // Get our url parameters.
    $parameters = drupal_get_query_parameters();

    // Check if we have a 2nd-language parameter.
    if (isset($parameters['2nd-language'])) {
      $options['query']['2nd-language'] = $parameters['2nd-language'];
    }
  }
}

/**
 * Implements hook_drupal_goto_alter().
 */
function language_selector_page_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // First we get our url parameters.
  $parameters = drupal_get_query_parameters();

  // Check if our parameter is set.
  if (isset($parameters['2nd-language'])) {
    $options['query']['2nd-language'] = $parameters['2nd-language'];
  }
}


/**
 * Implements hook_field_language_alter().
 */
function language_selector_page_field_language_alter(&$display_language, $context) {
  // First we get our url parameters.
  $parameters = drupal_get_query_parameters();

  // Check if our parameter is set.
  if (isset($parameters['2nd-language'])) {
    locale_field_language_fallback($display_language, $context['entity'], $context['language']);
  }
}
