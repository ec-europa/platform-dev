<?php

/**
 * @file
 * Defines custom Nexteuropa components field formatters.
 */

/**
 * Implements hook_field_formatter_info().
 */
function nexteuropa_formatters_fields_field_formatter_info() {
  return array(
    'ne_button' => array(
      'label' => t('NE ECL button'),
      'description' => t('Displays as a button.'),
      'field types' => array(
        'link_field',
        'taxonomy_term_reference',
        'entityreference',
      ),
      'settings' => array(
        'variation' => 'default',
        'link_title' => '',
        'force_language_default' => 0,
        'align_right' => 0,
      ),
    ),
    'ne_date' => array(
      'label' => t('NE date display'),
      'description' => t('Displays a date.'),
      'field types' => array(
        'date',
        'datestamp',
        'datetime',
      ),
      'settings' => array(
        'variation' => 'default',
      ),
    ),
    'ne_listing' => array(
      'label' => t('NE Listing'),
      'description' => t('Renders line items as listing component'),
      'field types' => array('link_field'),
      'settings' => array(
        'class' => '',
      ),
    ),
    'ne_download_button' => array(
      'label' => t('NE Download button'),
      'description' => t('Button to download file'),
      'field types' => array(
        'link_field',
        'file',
      ),
      'settings' => array(
        'label' => 'Download',
        'show_translations' => TRUE,
      ),
    ),
    'ne_social_icon' => array(
      'label' => t('NE Social Icon'),
      'description' => t('Displays as a Social Icon'),
      'field types' => array(
        'link_field',
      ),
      'settings' => array(
        'type' => 'email',
      ),
    ),
    'ne_social_icon_link' => array(
      'label' => t('NE Social Icon - link'),
      'description' => t('Render a link as a Social Icon'),
      'field types' => array(
        'link_field',
      ),
      'settings' => array(
        'type' => 'email',
      ),
    ),
    'ne_tags' => array(
      'label' => t('NE Tags'),
      'field types' => array(
        'taxonomy_term_reference',
        'link_field',
        'entityreference',
      ),
    ),
    'ne_labels' => array(
      'label' => t('NE Labels'),
      'field types' => array(
        'list_boolean',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function nexteuropa_formatters_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_button':
      $element['variation'] = array(
        '#type' => 'select',
        '#title' => t('Variation'),
        '#options' => array(
          'block' => 'Default',
          'primary' => 'Primary',
          'secondary' => 'Secondary',
          'call' => 'Call to action',
          'timeline' => 'Timeline',
          'caret_up' => 'Caret Up',
          'caret_right' => 'Caret Right',
          'caret_down' => 'Caret Down',
          'caret_left' => 'Caret Left',
          'primary_block' => 'Primary block wide',
        ),
        '#default_value' => $settings['variation'],
        '#description' => t('Please select the button variation you need. Examples for each variations are illustrated on the <a href="!url">ECL Library</a>', array('!url' => 'https://ec-europa.github.io/europa-component-library/components/detail/ecl-buttons')),
      );
      break;

    case 'ne_date':
      $element['variation'] = array(
        '#type' => 'select',
        '#title' => t('Variation'),
        '#options' => array(
          ' ' => 'Default',
          'live_streaming' => 'Events',
          'past' => 'Past events',
        ),
        '#default_value' => $settings['variation'],
        '#description' => t('Please select the date type you need.'),
      );
      break;

    case 'ne_listing':
      $element['class'] = array(
        '#type' => 'textfield',
        '#title' => t('Classes'),
        '#default_value' => $settings['class'],
        '#description' => t('You can add additional listing modifiers here.'),
      );
      break;

    case 'ne_download_button':
      $element['label'] = array(
        '#type' => 'textfield',
        '#title' => t('Button label'),
        '#default_value' => $settings['label'],
        '#description' => t('Text to be displayed inside the button.'),
      );
      break;

    case 'ne_social_icon':
    case 'ne_social_icon_link':
      $types = array(
        'Arto', 'Facebook', 'Bebo', 'Bitly', 'Blinklist', 'Blog', 'Blogger', 'Delicious', 'Digg', 'Diigo',
        'Dzone', 'Email', 'Flickr', 'Foursquare', 'Generic', 'Google', 'Gplus', 'Instagram', 'Linkarena', 'Linkedin',
        'Live', 'Meneame', 'Misterwong', 'Myspace', 'Netlog', 'Netvibes', 'Newsvine', 'Nujij', 'Pinterest', 'Pocket',
        'Reddit', 'RSS', 'Share', 'Skype', 'Slashdot', 'Sonico', 'Spotify', 'Storify', 'Studivz', 'Stumbleupon',
        'Technorati', 'Tuenti', 'Tumblr', 'Tumblr', 'Twitter', 'Viadeo', 'Vine', 'Wordpress', 'Wykop', 'Xerpi',
        'Yammer', 'Youtube', 'Print',
      );
      $options = array();
      foreach ($types as $type) {
        $options[drupal_strtolower($type)] = $type;
      }
      $element['type'] = array(
        '#type' => 'select',
        '#title' => t('Social icon:'),
        '#options' => $options,
        '#default_value' => $settings['type'],
        '#description' => t('Type of Social Icon.'),
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function nexteuropa_formatters_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_download_button':
      if (isset($settings['label'])) {
        $summary[] = t('Button label: @label', array(
          '@label' => $settings['label'],
        ));
      }
      break;

    case 'ne_social_icon':
    case 'ne_social_icon_link':
      if (isset($settings['type'])) {
        $summary[] = t('Social icon: @type', array(
          '@type' => $settings['type'],
        ));
      }
      break;

    case 'ne_button':
    case 'ne_date':
      if (isset($settings['variation'])) {
        $summary[] = t('Variation: @variation', array(
          '@variation' => $settings['variation'],
        ));
      }
      break;

    case 'ne_listing':
      if (isset($settings['class'])) {
        $summary[] = t('Class: @class', array('@class' => $settings['class']));
      }
      break;

  }
  $summary = implode('<br />', $summary);

  return $summary;
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function nexteuropa_fields_formatters_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $display_modes = array('ne_button', 'ne_tags');
  $target_ids = array();
  $target_type = FALSE;
  $column = NULL;

  // Collect every possible entity attached to any of the entities.
  foreach ($entities as $id => $entity) {
    if (in_array($displays[$id]['type'], $display_modes)) {
      if (is_null($column)) {
        $field_type_settings = entityreference_field_type_settings($field);
        $target_type = $field_type_settings['entity_type'];
        $column = $field_type_settings['column'];
      }

      foreach ($items[$id] as $delta => $item) {
        if (isset($item[$column])) {
          $target_ids[] = $item[$column];
        }
      }
    }
  }

  // If not target ids, no need to continue the process.
  if (empty($target_ids)) {
    return;
  }

  $target_entities = array();
  if ($target_ids) {
    $target_entities = entity_load($target_type, $target_ids);
  }

  // Iterate through the fieldable entities again to attach the loaded data.
  foreach ($entities as $id => $entity) {
    $rekey = FALSE;

    foreach ($items[$id] as $delta => $item) {
      // Check whether the referenced entity could be loaded.
      if (isset($target_entities[$item[$column]])) {
        // Replace the instance value with the term data.
        $items[$id][$delta]['entity'] = $target_entities[$item[$column]];
        // Check whether the user has access to the referenced entity.
        $has_view_access = (entity_access('view', $target_type, $target_entities[$item[$column]]) !== FALSE);
        $has_update_access = (entity_access('update', $target_type, $target_entities[$item[$column]]) !== FALSE);
        $items[$id][$delta]['access'] = ($has_view_access || $has_update_access);
      }
      // Otherwise, unset the instance value, since the entity does not exist.
      else {
        unset($items[$id][$delta]);
        $rekey = TRUE;
      }
    }
    if ($rekey) {
      // Rekey the items array.
      $items[$id] = array_values($items[$id]);
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function nexteuropa_formatters_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $settings = $display['settings'];

  if ($field['type'] === 'taxonomy_term_reference' || $field['type'] === 'entityreference') {
    $field_type_settings = entityreference_field_type_settings($field);
    $target_type = $field_type_settings['entity_type'];
  }

  // Switch for the different formatters.
  switch ($display['type']) {
    case 'ne_tags':
      foreach ($items as $delta => $item) {
        switch ($field['type']) {
          case 'taxonomy_term_reference':
          case 'entityreference':
            // If the access is denied to the term, we do not display it.
            if (empty($item['access'])) {
              continue;
            }

            // Calling EntityReferenceHandler::getLabel() would make a repeated,
            // wasteful call to entity_access().
            $label = entity_label($target_type, $item['entity']);
            $uri = entity_uri($target_type, $item['entity']);

            $link = array(
              '#theme' => 'link',
              '#text' => $label,
              '#path' => $uri['path'],
              '#options' => array(
                'attributes' => array(
                  'class' => array(
                    'ecl-tag__item',
                  ),
                ),
              ),
            );
            break;

          case 'link_field':
            $link = array(
              '#theme' => 'link',
              '#text' => $item['title'],
              '#path' => $item['url'],
              '#options' => array(
                'attributes' => array(
                  'class' => array(
                    'ecl-tag__item',
                  ),
                ),
              ),
            );
            break;
        }
        $elements[$delta] = $link;
      }
      break;

    case 'ne_button':
      foreach ($items as $delta => $item) {
        switch ($field['type']) {
          case 'taxonomy_term_reference':
          case 'entityreference':
            // If the access is denied to the term, we do not display it.
            if (empty($item['access'])) {
              continue;
            }

            // Calling EntityReferenceHandler::getLabel() would make a repeated,
            // wasteful call to entity_access().
            $label = entity_label($target_type, $item['entity']);
            $uri = entity_uri($target_type, $item['entity']);
            $path = $uri['path'];
            $title = $label;
            break;

          case 'link_field':
            $title = $item['title'];
            $path = $item['url'];
            break;
        }

        $link = array(
          '#theme' => 'link__' . $settings['variation'],
          '#text' => $title,
          '#path' => $path,
          '#options' => array(
            'attributes' => array(
              'class' => $settings['variation'],
            ),
          ),
        );
        $elements[$delta] = $link;
      }
      break;

    case 'ne_date':
      foreach ($items as $delta => $item) {
        $markup = '<div class="date-block event ' . $settings['variation'] . '">' . $item['value'] . '</div>&nbsp;';
        $elements[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;

    case 'ne_listing':
      $markup = '<div class="listing ' . $settings['class'] . '">';
      foreach ($items as $delta => $item) {
        switch ($field['type']) {

          case 'link_field':
            $link = array(
              '#theme' => 'link',
              '#text' => $item['title'],
              '#path' => $item['url'],
              '#options' => array(
                'attributes' => array(
                  $item['attributes'],
                ),
              ),
            );
            $markup .= '
              <div class="listing__item">
                <h3 class="ecl-heading ecl-heading--h3 listing__item-title">
                  <span class="icon icon--link"></span>' . $link . '
                </h3>
              </div>';
            break;
        }
        $markup .= '</div>';

        $elements[$delta] = array(
          '#markup' => $markup,
        );
      }
      break;

    // @TODO improve and Fix this by using a template.
    case 'ne_download_button':
      if ($field['type'] == 'link_field') {
        foreach ($items as $delta => $item) {
          $link = array(
            '#theme' => 'link',
            '#text' => $item['title'],
            '#path' => $item['url'],
            '#options' => array(
              'attributes' => array(
                'class'  => array(
                  'btn-download',
                ),
              ),
            ),
          );
          $elements[$delta] = $link;
        }
      }
      break;

    case 'ne_social_icon':
      if ($field['type'] == 'link_field') {
        foreach ($items as $delta => $item) {
          $link = array(
            '#theme' => 'social_icon',
            '#text' => $item['title'],
            '#type' => $settings['type'],
          );
          $elements[$delta] = $link;
        }
      }
      break;

    case 'ne_social_icon_link':
      if ($field['type'] == 'link_field') {
        foreach ($items as $delta => $item) {
          $link = array(
            '#theme' => 'link',
            '#text' => $item['title'],
            '#path' => $item['url'],
            '#options' => array(
              'attributes' => array(
                'class'  => array(
                  'ecl-link',
                  'ecl-icon-social',
                  'ecl-icon-social--' . $settings['type'],
                ),
              ),
            ),
          );
          $elements[$delta] = $link;
        }
      }
      break;

    case 'ne_labels':
      if ('list_boolean' == $field['type']) {
        $theme_names = array('labels__open', 'labels__closed');
        foreach ($items as $delta => $item) {
          $elements[$delta] = array(
            '#theme' => $theme_names[$item['value']],
            '#content' => $field['settings']['allowed_values'][$item['value']],
          );
        }
      }
      break;
  }
  return $elements;
}

/**
 * Custom function to generates string representation for the given byte count.
 *
 * @param float $size
 *   A size in bytes.
 * @param int $decimal_places
 *   Number of decimal places.
 * @param string $langcode
 *   Optional language code to translate to a language other than what is used
 *   to display the page.
 *
 * @return string
 *   A translated string representation of the size.
 */
function _nexteuropa_formatters_fields_format_size($size, $decimal_places = 1, $langcode = NULL) {
  $units = array();
  if ($size < DRUPAL_KILOBYTE) {
    return format_plural($size,
      '1 byte',
      '@count bytes',
      array(),
      array('langcode' => $langcode));
  }
  else {
    // Convert bytes to kilobytes.
    $size = $size / DRUPAL_KILOBYTE;
    $units = array(
      t('@size KB', array(), array('langcode' => $langcode)),
      t('@size MB', array(), array('langcode' => $langcode)),
      t('@size GB', array(), array('langcode' => $langcode)),
      t('@size TB', array(), array('langcode' => $langcode)),
      t('@size PB', array(), array('langcode' => $langcode)),
      t('@size EB', array(), array('langcode' => $langcode)),
      t('@size ZB', array(), array('langcode' => $langcode)),
      t('@size YB', array(), array('langcode' => $langcode)),
    );
    foreach ($units as $unit) {
      if (round($size, $decimal_places) >= DRUPAL_KILOBYTE) {
        $size = $size / DRUPAL_KILOBYTE;
      }
      else {
        break;
      }
    }
    return str_replace('@size', round($size, $decimal_places), $unit);
  }
}
