<?php

/**
 * @file
 * Main functions and hook implementations of Multisite OG Navigation Tree.
 */

define('MULTISITE_OG_NAVIGATION_TREE_OG_TAXONOMY_FIELD', 'group_taxonomy');
define('MULTISITE_OG_NAVIGATION_TREE_TBL_GROUP_TAXONOMY_RELATION', 'multisite_og_navigation_tree_grouptaxonomy');

require_once 'multisite_og_navigation_tree.api.inc';

/**
 * Implements hook_permission().
 */
function multisite_og_navigation_tree_permission() {
  $perm = array();
  $perm['administer OG Navigation Tree'] = array(
    'title' => t('Administer OG Navigation Tree'),
    'description' => t('Administer OG Navigation Tree'),
  );
  return $perm;
}

/**
 * Implements hook_og_fields_info().
 */
function _mont_taxonomy_field_allowed_values() {
  $vid = variable_get('multisite_og_navigation_tree_vid', 0);
  if ($vid) {
    $vocab = taxonomy_vocabulary_load($vid);
  }

  $settings = array(
    'settings' => array(
      'allowed_values' => array(
        0 => array(
          'vocabulary' => $vocab->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );

  $context = og_context();
  if ($context) {
    $nid = $context['gid'];
    $group_taxonomy = _mont_group_taxonomy_load($nid);
    if (is_object($group_taxonomy)) {
      $vocab = taxonomy_vocabulary_load($group_taxonomy->vid);
      $settings['settings']['allowed_values'][0] = array(
        'vocabulary' => $vocab->machine_name,
        'parent' => $group_taxonomy->tid,
      );
    }
  }
  $values = taxonomy_allowed_values($settings);
  return $values;
}

/**
 * Implements hook_og_fields_info().
 */
function multisite_og_navigation_tree_og_fields_info() {
  $vid = variable_get('multisite_og_navigation_tree_vid', 0);

  if ($vid) {
    $vocab = taxonomy_vocabulary_load($vid);
    $machine_name = $vocab->machine_name;
    $items[MULTISITE_OG_NAVIGATION_TREE_OG_TAXONOMY_FIELD] = array(
      'type' => array('group content'),
      'description' => t('Determine to which content group taxonomy is added'),
      'entity' => array('node'),
      'field' => array(
        'field_name' => MULTISITE_OG_NAVIGATION_TREE_OG_TAXONOMY_FIELD,
        'no_ui' => TRUE,
        'type' => 'taxonomy_term_reference',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'settings' => array(
          'allowed_values' => array(
            array(
              'vocabulary' => $machine_name,
              'parent' => '0',
            ),
          ),
          'options_list_callback' => '_mont_taxonomy_field_allowed_values',
        ),
      ),
      'instance' => array(
        'label' => t('Group Taxonomy'),
        'required' => FALSE,
        'default_value' => array(0 => array('tid' => 0)),
        'default_formatter' => 'taxonomy_term_reference_link',
        'widget_type' => 'options_select',
        'behaviors' => array(
          'multiple values' => FIELD_BEHAVIOR_CUSTOM,
          'default value' => FIELD_BEHAVIOR_CUSTOM,
        ),
        'view modes' => array(
          'full' => array(
            'label' => 'above',
            'type' => 'list_default',
          ),
          'teaser' => array(
            'label' => 'above',
            'type' => 'list_default',
          ),
        ),
      ),
    );
    return $items;
  }
}

/**
 * Implements hook_field_storage_details_alter().
 *
 * Ensure _mont_taxonomy_field_allowed_values is used for group_taxonomy field.
 * (i18n rewrite options_list_callback for all type taxonomy_term_reference).
 */
function multisite_og_navigation_tree_field_storage_details_alter(&$details, &$field) {
  if ($field['type'] === 'taxonomy_term_reference' && $field['field_name'] === MULTISITE_OG_NAVIGATION_TREE_OG_TAXONOMY_FIELD) {
    $field['settings']['options_list_callback'] = '_mont_taxonomy_field_allowed_values';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function multisite_og_navigation_tree_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'field_storage_details_alter') {
    $group = $implementations['multisite_og_navigation_tree'];
    unset($implementations['multisite_og_navigation_tree']);
    $implementations['multisite_og_navigation_tree'] = $group;
  }
}

/**
 * Autoloader for OG Navigation Tree enabled nodes.
 *
 * @param int $nid
 *   The node ID of the node to load.
 *
 * @return object|FALSE
 *   The node, or FALSE if the node is not part of an OG Navigation Tree group.
 */
function mont_node_load($nid) {
  $node = node_load($nid);
  $vid = _mont_group_taxonomy_enabled($node);
  if ($vid) {
    return $node;
  }
  return FALSE;
}

/**
 * Implements hook_admin_paths().
 */
function multisite_og_navigation_tree_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'node/*/mont_vocabulary' => TRUE,
      'node/*/mont_vocabulary/add_term' => TRUE,
      'node/*/mont_vocabulary/edit_term/*' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_menu().
 */
function multisite_og_navigation_tree_menu() {
  $items = array();

  $items['admin/config/group/multisite_og_navigation_tree'] = array(
    'title' => 'OG Navigation Tree',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_og_navigation_tree_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer OG Navigation Tree'),
    'file' => 'multisite_og_navigation_tree.settings.inc',
  );

  $items['admin/config/group/multisite_og_navigation_tree/settings'] = array(
    'title' => 'OG Navigation Tree',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['node/%mont_node/vocabulary'] = array(
    'title' => 'Group taxonomy tree',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      '_mont_overview_terms',
      1,
    ),
    'access callback' => '_mont_access_vocabulary',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'multisite_og_navigation_tree.taxonomy.inc',
  );

  $items['node/%mont_node/vocabulary/overview'] = array(
    'title' => 'Group taxonomy tree',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'multisite_og_navigation_tree.taxonomy.inc',
  );

  $items['node/%mont_node/vocabulary/add_term'] = array(
    'title' => 'Add taxonomy term',
    'page callback' => '_mont_group_taxonomy_add_term',
    'page arguments' => array(1),
    'access callback' => '_mont_access_vocabulary',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'multisite_og_navigation_tree.taxonomy.inc',
  );

  $items['node/%mont_node/vocabulary/edit_term/%'] = array(
    'title' => 'Edit taxonomy term',
    'page callback' => '_mont_group_taxonomy_edit_term',
    'page arguments' => array(1, 4),
    'access callback' => '_mont_access_vocabulary',
    'access arguments' => array(1),
    'type' => MENU_CONTEXT_PAGE,
    'file' => 'multisite_og_navigation_tree.taxonomy.inc',
  );

  $items['node/%mont_node/vocabulary/view/%'] = array(
    'title' => 'Edit taxonomy term',
    'page callback' => '_mont_group_taxonomy_view_term',
    'page arguments' => array(1, 4),
    'access callback' => '_mont_access_vocabulary',
    'access arguments' => array(1),
    'type' => MENU_CONTEXT_PAGE,
    'file' => 'multisite_og_navigation_tree.taxonomy.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function multisite_og_navigation_tree_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'multisite_og_navigation_tree') . '/views',
  );
}

/**
 * Access callback. Checks access to the given node.
 */
function _mont_access_vocabulary($node) {
  global $user;

  if (!_mont_is_group($node)) {
    return FALSE;
  }

  if ($access = og_node_access($node, 'update', $user)) {
    if ($access != NODE_ACCESS_DENY) {
      return TRUE;
    }
  }

  if ($user->uid == $node->uid) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function multisite_og_navigation_tree_theme() {
  return array(
    'mont_group_settings' => array(
      'render element' => 'form',
      'file' => 'multisite_og_navigation_tree.theme.inc',
    ),
    'mont_group_vocabulary' => array(
      'render element' => 'form',
      'file' => 'multisite_og_navigation_tree.theme.inc',
    ),
    'mont_taxonomy_overview_terms' => array(
      'render element' => 'form',
      'file' => 'multisite_og_navigation_tree.theme.inc',
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function multisite_og_navigation_tree_node_insert($node) {
  if ($group_taxonomy_vid = _mont_group_taxonomy_enabled($node)) {
    if (_mont_is_group($node)) {
      _mont_group_taxonomy_insert($node, $group_taxonomy_vid);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function multisite_og_navigation_tree_node_update($node) {
  $node_type = $node->type;
  $nid = $node->nid;

  if (og_is_group_type('node', $node_type) && $group_taxonomy_vid = _mont_group_taxonomy_enabled($node)) {
    if (_mont_is_group($node) && !_mont_group_taxonomy_load($node->nid)) {
      _mont_group_taxonomy_insert($node, $group_taxonomy_vid);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function multisite_og_navigation_tree_node_delete($node) {
  if (og_is_group_type('node', $node->type) && $group_taxonomy = _mont_group_taxonomy_load($node->nid)) {
    // Delete taxonomy terms of deleted group.
    $child_terms = taxonomy_get_tree($group_taxonomy->vid, $group_taxonomy->tid);
    if (!empty($child_terms)) {
      foreach ($child_terms as $child_term) {
        taxonomy_term_delete($child_term->tid);
      }
    }
    taxonomy_term_delete($group_taxonomy->tid);

    // Delete og_navigation_tree_grouptaxonomy entry.
    db_delete('multisite_og_navigation_tree_grouptaxonomy')->condition('nid', $node->nid)->execute();
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function multisite_og_navigation_tree_taxonomy_term_delete($term) {
  $tid = $term->tid;
  db_delete('multisite_og_navigation_tree_grouptaxonomy')->condition('tid', $tid)->execute();
}

/**
 * Implements hook_taxonomy_vocabulary_delete().
 */
function multisite_og_navigation_tree_taxonomy_vocabulary_delete($vocabulary) {
  $vid = $vocabulary->vid;
  db_delete('multisite_og_navigation_tree_grouptaxonomy')->condition('vid', $vid)->execute();
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function multisite_og_navigation_tree_og_context_negotiation_info() {
  $providers = array();
  $providers['group_taxonomy'] = array(
    'name' => t('Group taxonomy'),
    'description' => t("Determine context by group taxonomy term"),
    'callback' => '_mont_og_context_handler',
    'menu path' => array('taxonomy/term/%'),
  );
  return $providers;
}

/**
 * Implements hook_block_info().
 */
function multisite_og_navigation_tree_block_info() {
  $blocks['mont-navigation'] = array('info' => t('OG Navigation Tree'));

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function multisite_og_navigation_tree_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'mont-navigation':
      return (_mont_block_taxonomy_navigation());
  }
  return $block;
}

/**
 * Returns a node if it applies to the OG Taxonomy Tree context.
 *
 * Checks if we are on a taxonomy page and if the taxonomy term belongs to the
 * group taxonomy vocabulary.
 *
 * @return array
 *   An array of contexts.
 */
function _mont_og_context_handler() {
  $group_vocab = variable_get('multisite_og_navigation_tree_vid', 0);
  $term = menu_get_object('taxonomy_term', 2);

  if (!is_object($term)) {
    $tid = arg(2);
    $term = taxonomy_term_load($tid);
  }

  if (is_object($term) && ($group_vocab == $term->vid)) {
    $parents = taxonomy_get_parents_all($term->tid);
    $parent = array_pop($parents);
    if ($grouptaxonomy = _mont_group_taxonomy_load_by_term($parent->tid)) {
      $nid = $grouptaxonomy->nid;
      $node = node_load($nid);
      return _group_context_handler_entity('node', $node);
    };
  }

  return array();
}

/**
 * Helper function to fetch the links.
 *
 * @return array|FALSE
 *   Either the Taxonomy Navigation block or FALSE if the block couldn't be
 *   rendered.
 */
function _mont_block_taxonomy_navigation() {
  $context = og_context();
  if ($context) {
    $nid = $context['gid'];
    $group_taxonomy = _mont_group_taxonomy_load($nid);
    if ($group_taxonomy) {
      $root_term = $group_taxonomy->tid;
      $tree = taxonomy_get_tree($group_taxonomy->vid, $root_term);
      $child_elements = array();
      $root_elements = array();

      // @todo Variable $current_term_id is unused in its scope.
      $current_term_id = FALSE;
      $current_term = menu_get_object('taxonomy_term', 2);
      $active_class = array();
      if ($current_term) {
        $active_parents = taxonomy_get_parents_all($current_term->tid);
        array_pop($active_parents);
        foreach ($active_parents as $active_parent) {
          $active_class[] = $active_parent->tid;
        }
      }

      foreach ($tree as $term) {
        $parents = $term->parents;
        if (current($parents) != $root_term) {
          $child_elements[$parents[0]][$term->tid] = $term;
        }
        else {
          $root_elements[$term->tid] = $term;
        }
      }

      $items = array();

      foreach ($root_elements as $tid => $term) {
        $item = _mont_block_item_list_children($root_elements, $child_elements, $term, $active_class);
        $items[] = $item;
      }
      // @todo Variable $node is unused in its scope.
      $node  = node_load($nid);
      if (count($items)) {
        $block['subject'] = t('navigation');
        $block['content'] = theme('item_list', array('items' => $items, 'attributes' => array('class' => 'menu')));
        return $block;
      }
    }
  }
  return FALSE;
}

/**
 * Recursively compiles a list of child taxonomy terms belonging to a class.
 *
 * @param mixed $root_elements
 *   A parameter which is passed on when recursing but is otherwise unused.
 * @param array $child_elements
 *   An array of child elements.
 * @param object $term
 *   The taxonomy term to check for inclusion in the list.
 * @param array $active_class
 *   An array of data potentially containing term IDs against which to check the
 *   given term.
 *
 * @return array
 *   An associative array with the following keys:
 *   - 'data': A link to the taxonomy term.
 *   - 'class': An array containing CSS classes that indicate whether the term
 *     tree is expanded or collapsed.
 *   - 'children': An array of children of the taxonomy term. Each of these
 *     children are an array with the same keys as the parent item.
 */
function _mont_block_item_list_children($root_elements, array $child_elements, $term, array $active_class) {
  if (array_key_exists($term->tid, $child_elements)) {
    $item = array();
    $item['data'] = l(i18n_taxonomy_term_name($term), 'taxonomy/term/' . $term->tid, array(
      'attributes' => array('class' => array('collapsed')),
    ));

    if (in_array($term->tid, $active_class)) {
      $item['class'] = array('expanded', 'active-trail');
      $item['children'] = array();
      foreach ($child_elements[$term->tid] as $child) {
        $item['children'][] = _mont_block_item_list_children($root_elements, $child_elements, $child, $active_class);
      }
    }
    else {
      $item['class'] = array('collapsed');
    }
  }
  else {
    $item = array(
      l($term->name, 'taxonomy/term/' . $term->tid, array(
        'attributes' => array(
          'class' => array('collapsed'),
        ),
      )),
    );
  }
  return $item;
}
