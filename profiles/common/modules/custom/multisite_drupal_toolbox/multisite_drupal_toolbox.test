<?php

/**
 * @file
 * Test files for the toolbox.
 */

/**
 * Test Multisite Forum features to ensure it follows QA requirements.
 */
class MultisiteDrupalToolboxDrupalWebTestCase extends DrupalWebTestCase {

  /**
   * Set up.
   */
  public function setUp() {
    global $user, $language, $conf;

    // Create the database prefix for this test.
    $this->prepareDatabasePrefix();

    // Prepare the environment for running tests.
    $this->prepareEnvironment();
    if (!$this->setupEnvironment) {
      return FALSE;
    }

    // Reset all statics and variables to perform tests in a clean environment.
    $conf = array();
    drupal_static_reset();

    // Change the database prefix.
    // All static variables need to be reset before the database prefix is
    // changed, since DrupalCacheArray implementations attempt to
    // write back to persistent caches when they are destructed.
    $this->changeDatabasePrefix();
    if (!$this->setupDatabasePrefix) {
      return FALSE;
    }

    // Preset the 'install_profile' system variable, so the first call into
    // system_rebuild_module_data() (in drupal_install_system()) will register
    // the test's profile as a module. Without this, the installation profile of
    // the parent site (executing the test) is registered, and the test
    // profile's hook_install() and other hook implementation are never invoked.
    $conf['install_profile'] = $this->profile;

    // Perform the actual Drupal installation.
    include_once DRUPAL_ROOT . '/includes/install.inc';
    drupal_install_system();

    $this->preloadRegistry();

    // Set path variables.
    variable_set('file_public_path', $this->public_files_directory);
    variable_set('file_private_path', $this->private_files_directory);
    variable_set('file_temporary_path', $this->temp_files_directory);

    // Set the 'simpletest_parent_profile' variable to add the parent profile's
    // search path to the child site's search paths.
    // See drupal_system_listing().
    // @todo This may need to be primed like 'install_profile' above.
    variable_set('simpletest_parent_profile', $this->originalProfile);

    // Include the testing profile.
    variable_set('install_profile', $this->profile);
    install_profile_info($this->profile, 'en');

    // OVERRIDE : Always install required modules first.
    // Respect the dependencies between the modules.
    variable_set('sweaver_skin', 'grey');

    $modules_profile = $this->multisiteDrupalToolboxProfileModulesEnable();
    foreach ($modules_profile as $module => $weight) {
      $success = module_enable(array($module));
      $success_tab[$success][] = $module;
    }
    foreach ($success_tab as $success_type => $success_modules) {
      $this->assertTrue($success_type, t('Enabled modules: %modules', array('%modules' => implode(', ', $success_modules))));
    }

    // Install modules needed for this test.
    // This could have been passed in as
    // either a single array argument or a variable number of string arguments.
    // @todo Remove this compatibility layer in Drupal 8, and only accept
    // $modules as a single array argument.
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    if ($modules) {
      $success = module_enable($modules, TRUE);
      $this->assertTrue($success, t('Enabled modules: %modules', array('%modules' => implode(', ', $modules))));
    }

    // Run the profile tasks.
    $install_profile_module_exists = db_query("SELECT 1 FROM {system} WHERE type = 'module' AND name = :name", array(
      ':name' => $this->profile,
    ))->fetchField();
    if ($install_profile_module_exists) {
      module_enable(array($this->profile), FALSE);
      $this->assertTrue($success, t('Enabled profile: %profile', array('%profile' => $this->profile)));
    }

    // Reset/rebuild all data structures after enabling the modules.
    $this->resetAll();

    // Run cron once in that environment, as install.php does at the end of
    // the installation process.
    drupal_cron_run();

    // Ensure that the session is not written to the new environment and replace
    // the global $user session with uid 1 from the new test site.
    drupal_save_session(FALSE);
    // Login as uid 1.
    $user = user_load(1);

    // Restore necessary variables.
    variable_set('install_task', 'done');
    variable_set('clean_url', $this->originalCleanUrl);
    variable_set('site_mail', 'simpletest@example.com');
    variable_set('date_default_timezone', date_default_timezone_get());

    // Set up English language.
    unset($conf['language_default']);
    $language = language_default();

    // Use the test mail class instead of the default mail handler class.
    variable_set('mail_system', array('default-system' => 'TestingMailSystem'));

    drupal_set_time_limit($this->timeLimit);
    $this->setup = TRUE;
  }

  /**
   * Custom enabling modules respecting dependances.
   */
  public function multisiteDrupalToolboxProfileModulesEnable() {
    $profile_details = install_profile_info($this->profile, 'en');
    $modules = $profile_details['dependencies'];
    $modules[] = $this->profile;
    $files = system_rebuild_module_data();
    $this->verbose('test');

    // Install the modules specified by the testing profile
    // Always install required modules first. Respect the dependencies between
    // the modules.
    $required = array();
    $non_required = array();
    // Although the profile module is marked as required, it needs to go after
    // every dependency, including non-required ones. So clear its required
    // flag for now to allow it to install late.
    $files[$this->profile]->info['required'] = FALSE;
    // Add modules that other modules depend on.
    foreach ($modules as $module) {
      if ($files[$module]->requires) {
        $modules = array_merge($modules, array_keys($files[$module]->requires));
      }
    }
    $modules = array_unique($modules);
    foreach ($modules as $module) {
      if (!empty($files[$module]->info['required'])) {
        $required[$module] = $files[$module]->sort;
      }
      else {
        $non_required[$module] = $files[$module]->sort;
      }
    }
    arsort($required);
    arsort($non_required);

    return $required + $non_required;
  }

  /**
   * Get comment by subject.
   */
  public function multisiteDrupalToolboxGetCommentBySubject($title, $reset = FALSE) {
    $nodes = comment_load_multiple(array(), array('subject' => $title), $reset);
    // Load the first node returned from the database.
    $returned_node = reset($nodes);
    return $returned_node;
  }

  /**
   * Create a user.
   */
  public function multisiteDrupalToolboxCreateUserWithRole($role_name) {

    $role = user_role_load_by_name($role_name);

    // Create a user assigned to that role.
    $edit           = array();
    $edit['name']   = $this->randomName();
    $edit['mail']   = $edit['name'] . '@example.com';
    $edit['pass']   = user_password();
    $edit['status'] = 1;
    $edit['roles']  = array(
      2 => 2,
      $role->rid => $role_name,
    );

    $account = user_save(drupal_anonymous_user(), $edit);

    // @todo This construct is not only unreadable but it is also useless since
    //   it will always evaluate to TRUE.
    $this->assertTrue(
      !empty($account->uid) ?
      t('User with role %role_name created with name %name and pass %pass',
        array(
          '%role_name' => $role_name,
          '%name' => $edit['name'],
          '%pass' => $edit['pass'],
        )
      ) : t('User login')
    );

    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }

}
