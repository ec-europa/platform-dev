<?php

/**
 * @file
 * Multisite Toolbox definition module.
 */

define('MULTISITE_DRUPAL_TOOLBOX_FEATURES_REVERT_BLACKLISTED', 'cce_basic_config,multisite_settings_core');
define('MULTISITE_DRUPAL_TOOLBOX_DRUPAL_MIN_WEIGHT', -50);
define('MULTISITE_DRUPAL_TOOLBOX_DRUPAL_MAX_WEIGHT', 50);

/**
 * Implements hook_permission().
 */
function multisite_drupal_toolbox_permission() {
  return array(
    'view alert message' => array(
      'title' => t('View Alert message'),
      'description' => t('View the Alert message'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function multisite_drupal_toolbox_menu() {
  $items['admin/workbench/comment'] = array(
    'title' => 'Comments',
    'description' => 'List and edit site comments and the comment approval queue.',
    'page callback' => 'comment_admin',
    'access arguments' => array('administer comments'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'file' => 'comment.admin.inc',
    'file path' => drupal_get_path('module', 'comment'),
  );
  $items['admin/workbench/comment/new'] = array(
    'title' => 'Published comments',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/workbench/comment/approval'] = array(
    'title' => 'Unapproved comments',
    'title callback' => 'comment_count_unpublished',
    'page arguments' => array('approval'),
    'access arguments' => array('administer comments'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/workbench/linkchecker'] = array(
    'access callback' => 'multisite_drupal_toolbox_linkchecker_user_access_account_broken_links_report_workbench',
    'description' => 'Shows a list of broken links in content.',
    'page callback' => 'linkchecker_user_report_page_workbench',
    'title' => 'Broken links',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/config/security'] = array(
    'title' => 'Security settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_drupal_toolbox_form_security_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/security/settings'] = array(
    'title' => 'Security settings',
    'description' => 'Configure security settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_drupal_toolbox_form_security_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/system/contact'] = array(
    'title' => 'Contact Form Settings',
    'description' => 'Configure the contact form settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_drupal_toolbox_contact_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => -5,
  );
  $items['check_url'] = array(
    'title' => 'Check URLs',
    'page callback' => '_multisite_drupal_toolbox_url_exists',
    'access arguments' => array('use text format full_html'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_preprocess_html().
 *
 * Alter html code (to add js and css).
 */
function multisite_drupal_toolbox_preprocess_html(&$variables) {
  // Add icons font.
  drupal_add_css(drupal_get_path('module', 'multisite_drupal_toolbox') . '/icons/style.css', array('basename' => 'icons-font'));

  // Add Fancybox.
  $path = libraries_get_path('fancybox');
  if ($path) {
    drupal_add_css($path . '/jquery.fancybox.css');
    drupal_add_js($path . '/jquery.fancybox.pack.js');
    drupal_add_css($path . '/helpers/jquery.fancybox-buttons.css');
    drupal_add_js($path . '/helpers/jquery.fancybox-buttons.js');
    drupal_add_js($path . '/helpers/jquery.fancybox-media.js');
    drupal_add_css($path . '/helpers/jquery.fancybox-thumbs.css');
    drupal_add_js($path . '/helpers/jquery.fancybox-thumbs.js');
  }

  // Add survey JS on all site in the white list.
  if (variable_get('toolbox_survey_whitelist_js', FALSE)) {
    drupal_add_js('//ec.europa.eu/wel/surveys/wr_survey01/wr_survey.js', 'external');
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * We ensure our hook_boot is called first.
 */
function multisite_drupal_toolbox_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'boot') {
    $group = array('multisite_drupal_toolbox' => $implementations['multisite_drupal_toolbox']);
    unset($implementations['multisite_drupal_toolbox']);
    $implementations = $group + $implementations;
  }
}

/**
 * Implements hook_boot().
 *
 * Force en prefix language in url even if there is one language.
 */
function multisite_drupal_toolbox_boot() {
  global $conf;
  if (!isset($conf["language_count"])) {
    $conf["language_count"] = 2;
  }
  else {
    if ($conf["language_count"] == 1 && $conf["language_default"]->language == 'en') {
      $conf["language_count"] = 2;
    }
  }
}

/**
 * Implements hook_init().
 *
 * Set language_count to 2 to force the display
 * of the language prefix and language switcher.
 */
function multisite_drupal_toolbox_init() {
  if (variable_get("language_count", 1) == 1) {
    variable_set("language_count", 2);
  }

  if (variable_get('alert_message_enable', FALSE) && user_access('view alert message')) {
    drupal_set_message(variable_get('alert_message_body', ''), 'warning', FALSE);
  }
}

/**
 * Implements hook_menu_alter().
 */
function multisite_drupal_toolbox_menu_alter(&$items) {
  // Use default theme for specific admin pages.
  $list_pages = variable_get('cce_basic_config_admin_pages', array());
  foreach ($items as $url => $item) {
    foreach ($list_pages as $page) {
      if (strpos($url, $page) === 0) {
        $items[$url]['theme callback'] = 'multisite_cce_theme';
      }
    }
  }

  // Hide broken links tab in the my account page.
  $items['user/%user/linkchecker']['access callback'] = FALSE;

  if (module_exists('apachesolr')) {
    // Only super admin can configure apache solR.
    $items['admin/config/search/apachesolr/multisite-filters']['access callback'] = 'multisite_drupal_toolbox_is_admin';
    $items['admin/config/search/apachesolr/settings/%apachesolr_environment/index']['access callback'] = 'multisite_drupal_toolbox_is_admin';
    $items['admin/config/search/apachesolr/settings/%apachesolr_environment/edit']['access callback'] = 'multisite_drupal_toolbox_is_admin';
    $items['admin/config/search/apachesolr/settings/%apachesolr_environment/delete']['access callback'] = 'multisite_drupal_toolbox_is_admin';
    $items['admin/config/search/apachesolr/settings/%apachesolr_environment/clone']['access callback'] = 'multisite_drupal_toolbox_is_admin';
    $items['admin/config/search/apachesolr/settings']['access callback'] = 'multisite_drupal_toolbox_is_admin';
    $items['admin/config/search/apachesolr/settings/add']['access callback'] = 'multisite_drupal_toolbox_is_admin';
    $items['admin/config/search/apachesolr/attachments']['access callback'] = 'multisite_drupal_toolbox_is_admin';
  }

  $items['user/%user/edit']['access callback'] = 'multisite_drupal_toolbox_edit_access';
  $items['user/%user/cancel']['access callback'] = 'multisite_drupal_toolbox_edit_access';
}

/**
 * Block edit access to user 1 account.
 */
function multisite_drupal_toolbox_edit_access($account) {
  if ($account->uid == 1 and $GLOBALS['user']->uid != 1) {
    return FALSE;
  }

  return user_edit_access($account);
}

/**
 * Implements hook_theme().
 */
function multisite_drupal_toolbox_theme($existing, $type, $theme, $path) {
  $items = array(
    'dropdown' => array(
      'variables' => array(
        'items' => array(),
      ),
    ),
  );
  return $items;
}

/**
 * Returns HTML for a dropdown.
 */
function theme_dropdown(array $variables) {
  return(theme("item_list", $variables));
}

/**
 * Implements hook_media_wysiwyg_token_to_markup_alter().
 */
function multisite_drupal_toolbox_media_wysiwyg_token_to_markup_alter(&$element, &$tag_info, &$settings) {
  // Add bootstrap responsive class.
  $element['content']['file']['#attributes']['class'][] = "img-responsive";
  $element['content']['file']['#attributes']['class'][] = "img-responsive3";

  // Add the media img css styles to the containing div.
  if (isset($element['content']['#bundle'])
    && ($element['content']['#bundle'] == 'image')) {

    // Wrap element in a fancybox hyperlink.
    if (isset($element['content']['file']['#theme'])
      && ($element['content']['file']['#theme']) == 'image_style') {
      $element['content']['file']['#prefix'] = '<div><a href="' . file_create_url($element['content']['file']['#file']->uri) . '" class="fancybox">';
      $element['content']['file']['#suffix'] = '</a></div>';
    };

    if (isset($element['content']['file']['#item']['attributes']['style'])) {
      $style = $element['content']['file']['#item']['attributes']['style'];
      // Add the img style to the containing div.
      $element['content']['#attributes']['style'] = $style;
    }
  }

  // Add title and alt attributes to the img markup.
  if (isset($tag_info['attributes']['alt'])) {
    $element['content']['file']['#item']['alt'] = $tag_info['attributes']['alt'];
    $element['content']['file']['#item']['title'] = $tag_info['attributes']['alt'];
  }
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Santizie URL inputs.
 */
function multisite_drupal_toolbox_url_inbound_alter(&$path, $original_path, $path_language) {
  if (!($path == '<front>') && !(url_is_external($path))) {
    $path = check_url($path);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_system_modules_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    unset($form['modules']['Core']['php']);
    // Prevent users to give the permission to inject PHP.
    // in input text area.
    unset($form['modules']['Development']);
    // Prevent users to give access to the devel modules.
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_user_admin_permissions_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    // Prevent users to give certain permissions.
    unset($form['permission']['administer modules']);
    unset($form['permission']['administer features']);
    unset($form['permission']['manage features']);
    unset($form['permission']['administer software updates']);

    if (isset($form['permission']['administer varnish'])) {
      unset($form['permission']['administer varnish']);
    }

    // Auto_nodetile module.
    if (isset($form['permission']['use PHP for title patterns'])) {
      unset($form['permission']['use PHP for title patterns']);
    }

    foreach (array_keys(user_roles()) as $rid) {
      // Hide checkboxes in the permissions admin page.
      unset($form['checkboxes'][$rid]['#options']['administer modules']);
      unset($form['checkboxes'][$rid]['#options']['administer features']);
      unset($form['checkboxes'][$rid]['#options']['manage features']);
      unset($form['checkboxes'][$rid]['#options']['administer software updates']);
      if (isset($form['checkboxes'][$rid]['#options']['use PHP for title patterns'])) {
        unset($form['checkboxes'][$rid]['#options']['use PHP for title patterns']);
      }
      if (isset($form['checkboxes'][$rid]['#options']['administer varnish'])) {
        unset($form['checkboxes'][$rid]['#options']['administer varnish']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_user_admin_account_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    unset($form['accounts']['#options'][1]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_user_admin_role_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    // Prevent predefined roles updated for non admin.
    if (isset($form['rid'])) {
      $rid_administrator = multisite_drupal_toolbox_get_rid('administrator');
      $rid_contributor = multisite_drupal_toolbox_get_rid('contributor');
      $rid_editor = multisite_drupal_toolbox_get_rid('editor');
      if ($form['rid']['#value'] == $rid_administrator || $form['rid']['#value'] == $rid_contributor || $form['rid']['#value'] == $rid_editor) {
        unset($form['actions']);
        $form["name"]['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_workbench_moderation_admin_states_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    // Prevent administrator from changing existing workflow states.
    $blocked_states = array(
      'draft',
      'validated',
      'published',
      'needs_review',
      'archived',
    );
    $states = $form['states'];

    foreach ($states as $state_id => $state) {
      if (isset($state['delete']) && in_array($state_id, $blocked_states)) {
        $form['states'][$state_id]['delete']['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_workbench_moderation_admin_transitions_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    // Prevent administrator from changing existing workflow transitions.
    $blocked_transitions = array(
      'published_archived',
      'draft_needs_review',
      'needs_review_published',
      'needs_review_draft',
      'needs_review_validated',
      'validated_published',
    );
    $transitions = $form['transitions'];
    foreach ($transitions as $transition_id => $transition) {
      if (isset($transition['delete'])) {
        $transition_name = $transition['transition']['#value']->from_name . '_' . $transition['transition']['#value']->to_name;
        if (in_array($transition_name, $blocked_transitions)) {
          $form['transitions'][$transition_id]['delete']['#disabled'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    $maximum_limit = (int) variable_get('contact_form_maxlength', 1000);
    if (isset($maximum_limit) && is_numeric($maximum_limit)) {
      if ($form['message']) {
        $form['message']['#title'] = $form['message']['#title'] . ' ' . t('(maximum @max characters)', array('@max' => $maximum_limit));
        $form['message']['#maxlength'] = $maximum_limit;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_contact_personal_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    $maximum_limit = (int) variable_get('contact_form_maxlength', 1000);
    if (isset($maximum_limit) && is_numeric($maximum_limit)) {
      if ($form['message']) {
        $form['message']['#title'] = $form['message']['#title'] . ' ' . t('(maximum @max characters)', array('@max' => $maximum_limit));
        $form['message']['#maxlength'] = $maximum_limit;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_menu_edit_item_alter(&$form, &$form_state, $form_id) {
  // Check the "Show as expanded" box. Used to created dropdown menus.
  if (isset($form['original_item']['#value']['expanded']) && (isset($form['original_item']['#value']['mlid']) && $form['original_item']['#value']['mlid'] != 0)) {
    $form['expanded']['#default_value'] = $form['original_item']['#value']['expanded'];
  }
  else {
    $form['expanded']['#default_value'] = 1;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_comment_admin_overview_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'workbench_redirect_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_drupal_toolbox_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $form['name']['#attributes']['autocomplete'] = 'off';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds important block in the description of toolbox_sanitize and
 * filter_html_escape filter fields.
 */
function multisite_drupal_toolbox_form_filter_admin_format_form_alter(&$form, &$form_state, $form_id) {
  $filter_html_escape = &$form['filters']['status']['filter_html_escape'];
  $toolbox_sanitize = &$form['filters']['status']['toolbox_sanitize'];

  $addendum = '<span style="font-weight: bold;color: red;">' . t('Important:') . '</span> ';
  $filter_html_escape['#description'] .= $addendum;
  $addendum = '<br />' . $addendum;
  $toolbox_sanitize['#description'] .= $addendum;

  $filter_title = $toolbox_sanitize['#title'];
  $filter_html_escape['#description'] .= t('The "@title" filter is <strong>enforced automatically</strong> if this one is not enabled.', array('@title' => $filter_title));
  $filter_title = $filter_html_escape['#title'];
  $toolbox_sanitize['#description'] .= t('This filter is <strong>enforced automatically</strong> if the "@title" one is not enabled.', array('@title' => $filter_title));
}

/**
 * Implements hook_filter_format_insert().
 */
function multisite_drupal_toolbox_filter_format_insert($format) {
  multisite_drupal_toolbox_filter_format_update($format);
}

/**
 * Implements hook_filter_format_update().
 *
 * Enforces the activation of 'toolbox_sanitize' filter, if
 * 'filter_html_escape' is not.
 */
function multisite_drupal_toolbox_filter_format_update($format) {
  $filters = &$format->filters;
  $filter_html_escape_status = $filters['filter_html_escape']['status'];
  $toolbox_sanitize_status = $filters['toolbox_sanitize']['status'];

  // If the both status are different, configuration is safe.
  // Then, nothing to do.
  if ($filter_html_escape_status != $toolbox_sanitize_status) {
    return;
  }

  if (!$toolbox_sanitize_status) {
    // Save the enforcing. Cannot pass by a normal save because that causes an
    // infinitive loop.
    $fields = array(
      'status' => 1,
      'weight' => MULTISITE_DRUPAL_TOOLBOX_DRUPAL_MIN_WEIGHT,
    );

    db_merge('filter')
      ->key(array(
        'format' => $format->format,
        'name' => 'toolbox_sanitize',
      ))
      ->fields($fields)
      ->execute();

    $watchdog_variables = array(
      '@text_format' => $format->format,
      '@value' => (!$filter_html_escape_status),
    );
    watchdog('multisite drupal toolbox', '"toolbox_sanitize" status has been set to @value for @text_format.', $watchdog_variables, WATCHDOG_INFO);
  }
}

/**
 * Implements hook_filter_info_alter().
 */
function multisite_drupal_toolbox_filter_info() {
  $info['toolbox_sanitize'] = array(
    'title' => t('Sanitize HTML'),
    'description' => t('Security process to prevent xss attack (provided by nexteuropa toolbox)'),
    'process callback' => '_multisite_drupal_toolbox_filter_sanitize',
  );
  return $info;
}


/**
 * Alter filter process callback for the token input filter.
 *
 * @see multisite_drupal_toolbox_filter_info()
 */
function _multisite_drupal_toolbox_filter_sanitize($text, $filter, $format, $langcode, $cache, $cache_id) {
  $nid = NULL;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
  }
  return multisite_drupal_toolbox_sanitize($text, $nid);
}

/**
 * Custom sanitize function.
 */
function multisite_drupal_toolbox_sanitize($content, $nid) {
  // Security process to prevent xss attack in node contents.
  $nodes_bypass = explode("\n", variable_get("security_bypassed_nodes", ""));

  // Check if the node must be bypass.
  if (!in_array($nid, $nodes_bypass) || is_null($nid)) {
    // Retrieve the list of allowed tags that were configured in the UI.
    $tags_allowed = explode("\n", variable_get("security_allowed_tags", ""));
    // Trim whitespace and filter empty lines.
    $tags_allowed = array_map('trim', $tags_allowed);
    $tags_allowed = array_filter($tags_allowed);

    module_load_include('inc', 'multisite_drupal_toolbox', 'multisite_drupal_toolbox.sanitize');
    $filter_options = multisite_drupal_toolbox_get_default_filter_options();
    $filter_options['valid_elements'] = array_fill_keys($tags_allowed, array('*' => TRUE));

    $content = multisite_drupal_toolbox_filter_xss($content, $filter_options);
  }
  return $content;
}

/**
 * Public function to disable a content type.
 *
 * @obsolete
 *   See 'multisite_drupal_toolbox_features_post_restore'.
 */
function multisite_drupal_toolbox_disable_content_type($type) {
  $type_info = node_type_load($type);
  $type_info->module = 'node';
  $type_info->custom = 1;
  $type_info->modified = 1;
  $type_info->locked = 0;
  $type_info->disabled = 1;
  node_type_save($type_info);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   See 'multisite_drupal_toolbox_features_post_restore'.
 */
function _disable_content_type($type) {
  multisite_drupal_toolbox_disable_content_type($type);
}

/**
 * Public function to add block to a context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_add_block_context($context_name, $block_title, $module, $delta, $region, $weight = '-10') {
  // Load context.
  $context = module_invoke('context', 'load', $context_name);
  // Make some modifications.
  $block_to_add = array(
    'module' => $module,
    'delta' => $delta,
    'region' => $region,
    'weight' => $weight,
  );
  // Add modification to the context.
  $context->reactions['block']['blocks'][$block_title] = $block_to_add;
  // Update the context.
  module_invoke('context', 'save', $context);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_add_block_context() instead.
 */
function _add_block_context($context_name, $block_title, $module, $delta, $region, $weight = '-10') {
  multisite_drupal_toolbox_add_block_context($context_name, $block_title, $module, $delta, $region, $weight);
}

/**
 * Public function to remove block from context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_remove_block_context($context_name, $block_title) {
  // Load context.
  $context = module_invoke('context', 'load', $context_name);
  // Remove element from the context.
  unset($context->reactions['block']['blocks'][$block_title]);
  // Update the context.
  module_invoke('context', 'save', $context);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_remove_block_context() instead.
 */
function _remove_block_context($context_name, $block_title) {
  multisite_drupal_toolbox_remove_block_context($context_name, $block_title);
}

/**
 * Public function to add view to a context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_add_views_context($context_name, $view_title) {
  // Load context.
  $context = module_invoke('context', 'load', $context_name);
  // Add modification to the context.
  $context->conditions['views']['values'][$view_title] = $view_title;
  // Update the context.
  module_invoke('context', 'save', $context);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_add_views_context() instead.
 */
function _add_views_context($context_name, $view_title) {
  multisite_drupal_toolbox_add_views_context($context_name, $view_title);
}

/**
 * Public function to remove block from context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_remove_views_context($context_name, $view_title) {
  // Load context.
  $context = module_invoke('context', 'load', $context_name);
  // Remove element from the context.
  unset($context->conditions['views']['values'][$view_title]);
  // Update the context.
  module_invoke('context', 'save', $context);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_remove_views_context() instead.
 */
function _remove_views_context($context_name, $view_title) {
  multisite_drupal_toolbox_remove_views_context($context_name, $view_title);
}

/**
 * Public function to add content type from context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_add_content_type_context($context_name, $content_type) {
  // Load context.
  $context = module_invoke('context', 'load', $context_name);
  // Add modification to the context.
  $context->conditions['node']['values'][$content_type] = $content_type;
  // Update the context.
  module_invoke('context', 'save', $context);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_add_content_type_context() instead.
 */
function _add_content_type_context($context_name, $content_type) {
  multisite_drupal_toolbox_add_content_type_context($context_name, $content_type);
}

/**
 * Public function to remove content type from context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_remove_content_type_context($context_name, $content_type) {
  // Load context.
  $context = module_invoke('context', 'load', $context_name);
  // Remove element from the context.
  unset($context->conditions['node']['values'][$content_type]);
  // Update the context.
  module_invoke('context', 'save', $context);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_remove_content_type_context() instead.
 */
function _remove_content_type_context($context_name, $content_type) {
  multisite_drupal_toolbox_remove_content_type_context($context_name, $content_type);
}

/**
 * Public function to add path condition to a context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_add_path_context($context_name, $path) {
  // Load context.
  $context = module_invoke('context', 'load', $context_name);
  // Add modification to the context.
  $context->conditions['path']['values'][$path] = $path;
  // Update the context.
  module_invoke('context', 'save', $context);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_add_path_context() instead.
 */
function _add_path_context($context_name, $path) {
  multisite_drupal_toolbox_add_path_context($context_name, $path);
}

/**
 * Public function to remove path from context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_remove_path_context($context_name, $path) {
  // Load context.
  $context = module_invoke('context', 'load', $context_name);
  // Remove element from the context.
  unset($context->conditions['path']['values'][$path]);
  // Update the context.
  module_invoke('context', 'save', $context);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_remove_path_context() instead.
 */
function _remove_path_context($context_name, $path) {
  multisite_drupal_toolbox_remove_path_context($context_name, $path);
}

/**
 * Public function to deactivate a context.
 *
 * You need to add the module context as a dependancy to your feature.
 */
function multisite_drupal_toolbox_remove_context($context_name) {
  $context = context_load($context_name);
  if ($context) {
    ctools_export_set_object_status($context);
  }
}

/**
 * Public function to add content type to newsletter related content field.
 *
 * You need to add the feature newsletters as a dependancy to your feature.
 */
function multisite_drupal_toolbox_add_content_type_newsletters($node_type) {
  if ($field = field_info_field('field_related_contents')) {
    $field['settings']['referenceable_types'][$node_type] = $node_type;
    field_update_field($field);
  }
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_add_content_type_newsletters().
 */
function add_content_type_newsletters($node_type) {
  multisite_drupal_toolbox_add_content_type_newsletters($node_type);
}

/**
 * Public function to disable a block.
 */
function multisite_drupal_toolbox_disable_block($module, $delta) {
  db_update('block')
    ->fields(array('status' => '0'))
    ->condition('module', $module, '=')
    ->condition('delta', $delta, '=')
    ->execute();
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_disable_block() instead.
 */
function _disable_block($module, $delta) {
  multisite_drupal_toolbox_disable_block($module, $delta);
}

/**
 * Public function to add or delete nodes from the index.
 *
 * You need to add the module apachesolr as a dependency to your feature.
 *
 * @param string $bundle
 *   Node type (node entity bundle) to perform the operation with.
 * @param string $op
 *   Operation to perform, either 'add' or 'delete.
 */
function multisite_drupal_toolbox_config_solr_bundle($bundle, $op) {
  if (!in_array($op, array('delete', 'add'))) {
    return;
  }

  if (!module_exists('apachesolr')) {
    return;
  }

  // Update hook cache to find new hooks (see module_implements()).
  cache_set('module_implements', array(), 'cache_bootstrap');
  drupal_static_reset('module_hook_info');
  drupal_static_reset('drupal_alter');
  cache_clear_all('hook_info', 'cache_bootstrap');

  // We ensures that all node type are created.
  node_types_rebuild();

  $info = new stdClass();
  $info->type = $bundle;

  switch ($op) {
    case 'add':
      // Normally aparchsolr add automatically new content type to index bundles
      // but for some feature, when disables the content type is not deleted
      // (so when re-active, no run the hook_node_type_insert of apacheSolr).
      apachesolr_node_type_insert($info);
      break;

    case 'delete':
      apachesolr_node_type_delete($info);
      break;
  }
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_config_solr_bundle() instead.
 */
function config_solr_bundle($bundle, $op) {
  multisite_drupal_toolbox_config_solr_bundle($bundle, $op);
}

/**
 * No longer in use.
 */
function multisite_drupal_toolbox_notification_content_type($content_type, $op) {

}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_notification_content_type() instead.
 */
function notification_content_type($content_type, $op) {
  multisite_drupal_toolbox_notification_content_type($content_type, $op);
}

/**
 * Custom function. Get the rid for communities.
 */
function multisite_drupal_toolbox_get_og_rid($role_name) {
  $r = db_select('og_role', 'r')
    ->condition('name', $role_name, '=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();
  return $r['rid'];
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_get_og_rid() instead.
 */
function get_og_rid($role_name) {
  return multisite_drupal_toolbox_get_og_rid($role_name);
}

/**
 * Custom function. Get the rid.
 */
function multisite_drupal_toolbox_get_rid($role_name) {
  $r = db_select('role', 'r')
    ->condition('name', $role_name, '=')
    ->fields('r', array('rid'))
    ->execute()
    ->fetchAssoc();
  return $r['rid'];
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_get_rid() instead.
 */
function get_rid($role_name) {
  return multisite_drupal_toolbox_get_rid($role_name);
}

/**
 * Custom function. Check if the user is super admin.
 */
function multisite_drupal_toolbox_is_admin() {
  global $user;

  if ($user->uid == 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_is_admin().
 */
function is_admin() {
  return multisite_drupal_toolbox_is_admin();
}

/**
 * Check if current theme is ec_default theme.
 */
function multisite_drupal_toolbox_cce_theme() {
  return variable_get('theme_default', 'ec_resp');
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_cce_theme() instead.
 */
function multisite_cce_theme() {
  return multisite_drupal_toolbox_cce_theme();
}

/**
 * Custom function : redirects to comments tab in workbench.
 */
function multisite_drupal_toolbox_workbench_redirect_submit($form, &$form_state) {
  $form_state['redirect'] = array(
    'admin/workbench/comment',
  );
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_workbench_redirect_submit() instead.
 */
function workbench_redirect_submit($form, &$form_state) {
  multisite_drupal_toolbox_workbench_redirect_submit($form, $form_state);
}

/**
 * Custom function.
 *
 * Hide publish and unpublish options from the admin content form.
 * Should only be done through workbench.
 */
function multisite_drupal_toolbox_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  unset($form['admin']['options']['operation']['#options']['publish']);
  unset($form['admin']['options']['operation']['#options']['unpublish']);
}

/**
 * Public function  .
 *
 * Used to add content type to the "related-contents"
 * field of the simplenews content type
 * You need to add the feature newsletters as a dependancy to
 * your feature.
 */
function multisite_drupal_toolbox_simplenews_related_content_type($content_type, $op) {
  switch ($op) {
    case 'add':
      $field = field_read_fields(array('field_name' => "field_related_contents"));
      if ($field) {
        $field["field_related_contents"]["settings"]["handler_settings"]["target_bundles"][$content_type] = $content_type;
        field_update_field($field["field_related_contents"]);
      }
      break;

    case 'delete':
      $field = field_read_fields(array('field_name' => "field_related_contents"));
      if ($field) {
        unset($field["field_related_contents"]["settings"]["handler_settings"]["target_bundles"][$content_type]);
        field_update_field($field["field_related_contents"]);
      }
      break;

  }
}

/**
 * Obsolete.
 *
 * You need to add the module rate as a dependancy to your feature.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_simplenews_related_content_type().
 */
function simplenews_related_content_type($content_type, $op) {
  multisite_drupal_toolbox_simplenews_related_content_type($content_type, $op);
}

/**
 * Public function to add content type to the rate widget.
 *
 * You need to add the module rate as a dependancy to your feature.
 */
function multisite_drupal_toolbox_rate_content_type($content_type, $op) {
  switch ($op) {
    case 'add':
      if (module_exists('rate')) {
        $rw = variable_get("rate_widgets", array());
        foreach ($rw as $value) {
          if ('rate_fivestar' == $value->name) {
            $value->node_types[] = $content_type;
          }
        }
        variable_set("rate_widgets", $rw);
      }
      break;

    case 'delete':
      if (module_exists('rate')) {
        $rw = variable_get("rate_widgets", array());
        foreach ($rw as $value) {
          if ('rate_fivestar' == $value->name) {
            foreach ($value->node_types as $id => $item) {
              if ($content_type == $item) {
                unset($value->node_types[$id]);
              }
            }
          }
        }
        variable_set("rate_widgets", $rw);
      }
      break;

  }
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_rate_content_type() instead.
 */
function rate_content_type($content_type, $op) {
  multisite_drupal_toolbox_rate_content_type($content_type, $op);
}

/**
 * Adds the linkchecked user report page to the workbench.
 *
 * You need to add the module linkchecker as a dependancy to your feature.
 */
function multisite_drupal_toolbox_linkchecker_user_report_page_workbench() {
  global $user;
  module_load_include('inc', 'linkchecker', 'linkchecker.pages');
  return linkchecker_user_report_page($user);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_linkchecker_user_report_page_workbench().
 */
function linkchecker_user_report_page_workbench() {
  return multisite_drupal_toolbox_linkchecker_user_report_page_workbench();
}

/**
 * Set permissions to access link checker.
 *
 * You need to add the module linkchecker as a dependancy to your feature.
 */
function multisite_drupal_toolbox_linkchecker_user_access_account_broken_links_report_workbench() {
  global $user;
  module_load_include('inc', 'linkchecker', 'linkchecker.pages');
  return _linkchecker_user_access_account_broken_links_report($user);
}

/**
 * Obsolete.
 *
 * @obsolete
 */
function _linkchecker_user_access_account_broken_links_report_workbench() {
  return multisite_drupal_toolbox_linkchecker_user_access_account_broken_links_report_workbench();
}

/**
 * Public function to add content type to be checked by linkchecker.
 *
 * You need to add the module linkchecker as a dependancy to your feature.
 */
function multisite_drupal_toolbox_content_type_linkchecker($type, $op) {
  $node_type_scan = variable_get("linkchecker_scan_nodetypes", array());
  switch ($op) {
    case 'add':
      $node_type_scan[$type] = $type;
      break;

    case 'delete':
      unset($node_type_scan[$type]);
      break;

  }
  variable_set("linkchecker_scan_nodetypes", $node_type_scan);
}

/**
 * Obsolete.
 */
function _content_type_linkchecker($type, $op) {
  multisite_drupal_toolbox_content_type_linkchecker($type, $op);
}

/**
 * Modifies the security settings.
 */
function multisite_drupal_toolbox_form_security_settings($form, &$form_state) {
  $form['security_allowed_tags'] = array(
    '#type' => 'textarea',
    '#title' => t('allowed tags'),
    '#default_value' => variable_get('security_allowed_tags'),
    '#description' => t('One tag per line.'),
  );

  $form['security_bypassed_nodes'] = array(
    '#type' => 'textarea',
    '#title' => t('nodes to bypass'),
    '#default_value' => variable_get('security_bypassed_nodes'),
    '#description' => t('Insert the nid of nodes that must not be filtered to check xss attacks.<br/>One nid per line.'),
  );

  return system_settings_form($form);
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_form_security_settings() instead.
 */
function form_security_settings($form, &$form_state) {
  return multisite_drupal_toolbox_form_security_settings($form, $form_state);
}

/**
 * Retrieve relevant information about a URL.
 *
 * Specifically this function is
 * usable for internal (absolute) URL:s, but it also works for external URL:s.
 *
 * @param string $url
 *   The url that should be scanned.
 *
 * @return path_info
 *   An associative array containing:
 *   - url: The same as the argument $url, untouched.
 *   - target: Either "internal" or "external".
 *   - requested_path: If internal, the path requested relative to Drupal root.
 *     The only exception is when frontpage is referred directly, then it will
 *     be whatever the frontpage is set to.
 *   - system_path: If internal and the path is valid, the Drupal system path,
 *     e.g. "node/23".
 *   - query_fragment: If internal, the query and fragment of the url.
 *     Typically it is not needed for searching and is just reappended back
 *     when processing of the path is done. It could e.g. look like
 *     "?foo=bar#anchor".
 *   - safe_url: If external, and the protocol is http or https, this will be
 *     the original url, stripped from everything that could potentially be
 *     dangerous. E.g. "http://user:pass@example.org/settings?evilaction=true"
 *     will become "http://example.org/settings".
 */
function multisite_drupal_toolbox_linkit_scan_url($url, $field) {

  // Note this function has been heavily modified.
  // To see original see linkit.module.
  global $base_url;

  // We will not use the drupal wrapper function 'drupal_pasre_url' as that
  // function should only be used for URLs that have been generated by the
  // system, and we cant be sure that this is the case here.
  $parts['path'] = '';
  $parts = drupal_parse_url(trim($url, '/'));

  if (!isset($parts['scheme']) || !isset($parts['host'])) {
    // Not an absolute URL.
    form_set_error($field, t('Please insert a complete url. ex: !url', array('!url' => 'http://www.myurl.com')));
    return FALSE;
  }

  // Make a new array, this will hold the components from drupal_parse_url()
  // and our own "Linkit" components.
  $path_info = array();

  // Append the original components from drupal_parse_url() to our array.
  $path_info += $parts;

  // Save the whole URL.
  $path_info['url'] = $url;

  if (!isset($path_info['query'])) {
    $path_info['query'] = '';
  }

  // Convert the query string to an array as Drupal can only handle querys as
  // arrays.
  // @see http://api.drupal.org/drupal_http_build_query
  parse_str($path_info['query'], $path_info['query']);

  // The 'q' parameter contains the path of the current page if clean URLs are
  // disabled. It overrides the 'path' of the URL when present, even if clean
  // URLs are enabled, due to how Apache rewriting rules work.
  if (isset($path_info['query']['q'])) {
    $path_info['path'] = $path_info['query']['q'];
    unset($path_info['query']['q']);
  }

  // Internal URL.
  // @TODO: Handle https and other schemes here?
  if (trim($path_info['scheme'] . '://' . $path_info['host'] . base_path(), '/') == $base_url) {
    $path_info['target'] = 'internal';

    // Handle Multilingual internal urls.
    $langs = array();
    $lang_list = language_list();
    foreach ($lang_list as $key => $value) {
      $langs[] = '/' . $key . '/';
    }
    $path_info['path'] = str_replace($langs, '/', $path_info['path']);

    // Remove the subdirectory name from the path if the site is installed in
    // subdirectory. It will be added again by the url() function.
    if (base_path() != "/") {
      $base = base_path();
      $path = $path_info['path'];
      $path_info['path'] = trim(str_replace($base, '', $path), '/');
    }

    // Trim the path from slashes.
    $path_info['path'] = trim($path_info['path'], '/');

    // If we have an empty path, and an internal target, we can assume that the
    // URL should go the the frontpage.
    if (empty($path_info['path'])) {
      $path_info['frontpage'] = TRUE;
      $path_info['path'] = variable_get('site_frontpage', 'node');
    }

    if (!drupal_valid_path($path_info['path'])) {
      drupal_set_message(t('Please check that @url does exist on this site', array('@url' => $url)), 'warning');
    };
  }
  // External URL.
  else {
    // Try to see if link is valid.
    $geturl = drupal_http_request($url);
    if ($geturl->error == 'Not Found') {
      drupal_set_message(t('Please check that @url does exist', array('@url' => $url)), 'warning');
    };
  }

  return $path_info;
}

/**
 * Obsolete.
 *
 * @obsolete
 *   Use multisite_drupal_toolbox_linkit_scan_url() instead.
 */
function linkit_scan_url($url, $field) {
  return multisite_drupal_toolbox_linkit_scan_url($url, $field);
}

/**
 * Implements hook_token_info().
 *
 * Provide a new token for node [node:title-source-translation]
 * to provide get the title of the source node.
 */
function multisite_drupal_toolbox_token_info() {
  $node['title-source-translation'] = array(
    'name' => t("Title source"),
    'description' => t("Title of the translation source."),
  );
  return array(
    'tokens' => array('node' => $node),
  );
}

/**
 * Implements hook_token().
 */
function multisite_drupal_toolbox_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'title-source-translation':
          $language_default = language_default();
          if ($node->language == LANGUAGE_NONE || $node->language == $language_default->language) {
            $replacements[$original] = $node->title;
          }
          else {
            $translations = translation_node_get_translations($node->tnid);
            if ($translations == NULL && $node->is_new == TRUE) {
              $replacements[$original] = $node->translation_source->title;
            }
            else {
              $replacements[$original] = (isset($translations[$language_default->language]->title)) ? $translations[$language_default->language]->title : $node->title;
            }
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implments hook_tokens_alter().
 */
function multisite_drupal_toolbox_tokens_alter(array &$replacements, array $context) {
  // Preserve recipient_user token (rules automatically cleans non replaced
  // token).
  if ($context['type'] == 'recipient_user') {
    if (isset($context['data']['recipient_user'])) {
      unset($replacements[current($context['tokens'])]);
    }
    else {
      $replacements[current($context['tokens'])] = current($context['tokens']);
    }
  }

  // Add aliases to manage multiple instances of the same object type.
  if (isset($context['options']['aliases']) && in_array($context['type'], array_keys($context['options']['aliases']))) {
    $new_data = array($context['options']['aliases'][$context['type']] => $context['data'][$context['type']]);
    $replacements += token_generate($context['options']['aliases'][$context['type']], $context['tokens'], $new_data, $context['options']);
  }
}

/**
 * Implements hook_mail_alter().
 *
 * Replace 'recipient_user' tokens
 * 'recipient_user' can be used on every mail.
 */
function multisite_drupal_toolbox_mail_alter(&$message) {
  // Using 'to' email to get recipient user.
  $recipient_mail = $message['to'];
  $recipient_user = user_load_by_mail($recipient_mail);

  if ($recipient_user) {
    $data = array();
    // Recipient_user is an alias of user.
    $data['recipient_user'] = $recipient_user;
    $aliases = array('recipient_user' => 'user');
    $body = $message['body']['0'];
    // Replace token.
    $message['body']['0'] = token_replace($body, $data, array('aliases' => $aliases));
  }
}

/**
 * Useful custom debug function.
 */
function echopre($variable, $description = NULL, $background_color = 'lightgrey') {
  echo '<pre>';
  echo '<h2 class=background="' . $background_color . '">' . $description . '</h2>';
  echo '<span>Type: ' . gettype($variable) . '</span><hr/>';
  print_r($variable);
  echo '</pre>';
}

/**
 * Fix bug : ckeditor strips media markups.
 */
function multisite_drupal_toolbox_wysiwyg_editor_settings_alter(&$settings, &$context) {
  if ($context['profile']->editor == 'ckeditor') {
    $settings['allowedContent'] = TRUE;
  }
}

/**
 * Administration form to set the maximum length.
 */
function multisite_drupal_toolbox_contact_settings() {
  $form['contact_form_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contact form configuration'),
  );
  $form['contact_form_information']['contact_form_maxlength'] = array(
    '#type' => 'textfield',
    '#title' => t('Message maximum length'),
    '#default_value' => variable_get('contact_form_maxlength', 1000),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_views_query_alter().
 */
function multisite_drupal_toolbox_views_query_alter(&$view, &$query) {
  if ($view->base_table == 'node') {
    // Bypass node access check on the node views relationships :
    // put the tag bypass_relationship_node_access.
    // Fix know bug https://drupal.org/node/1349080.
    $query->add_tag('bypass_relationship_node_access');
  }
}

/**
 * Implements hook_block_info_alter().
 */
function multisite_drupal_toolbox_block_info_alter(&$blocks, $theme, $code_blocks) {
  // Remove the node recent content block.
  $blocks['node']['recent']['info'] = t('Recent content (Obsolete)');
}

/**
 * Helper function to get the base theme used.
 */
function multisite_drupal_toolbox_get_base_theme() {
  global $theme_info, $base_theme_info;
  if (count($base_theme_info) > 0) {
    return $base_theme_info[0]->name;
  }
  else {
    // Fallback, return the main theme if there is no base theme.
    return $theme_info->name;
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function multisite_drupal_toolbox_taxonomy_term_delete($term_obj) {
  // Clean properly all the orphan term references in the database.
  // Find all the taxonomy reference fields.
  $fields = field_info_fields();
  $operations = array();
  foreach ($fields as $field) {
    if ($field['type'] == 'taxonomy_term_reference') {
      $query = db_select('field_data_' . $field['field_name'], 'f');
      $query->fields('f', array(
        'entity_type',
        'entity_id',
        $field['field_name'] . '_tid',
        'language',
      ))
        ->leftJoin('taxonomy_term_data', 't', 't.tid=f.' . $field['field_name'] . '_tid');
      $query->where('t.tid IS NULL')
        ->where('f.' . $field['field_name'] . '_tid=' . $term_obj->tid)
        ->orderBy('f.entity_id', 'ASC');
      $res = $query->execute();
      foreach ($res as $target) {
        $operations[] = array(
          'multisite_drupal_toolbox_taxonomy_term_delete_batch_process',
          array($target, $field, $term_obj),
        );
      }
    }
  }
  if (!empty($operations)) {
    $batch = array(
      'title' => t('Taxonomy term deletion process'),
      'operations' => $operations,
      'finished' => 'multisite_drupal_toolbox_build_batch_finished',
      'init_message' => t('Initializing...'),
      'progress_message' => t('Operation @current out of @total.'),
      'error_message' => t('Found some error here.'),
    );
    batch_set($batch);
    // Only trigger the processing of the batch when none is running.
    $current_batch =& batch_get();
    // A batch with an id is currently being executed.
    if (empty($current_batch['id'])) {
      batch_process();
    }
  }
}

/**
 * Batch taxonomy_term_delete: operation.
 */
function multisite_drupal_toolbox_taxonomy_term_delete_batch_process($target, $field, $term, &$context) {
  $entities = entity_load($target->entity_type, array($target->entity_id));
  if (!empty($entities)) {
    $entity = array_shift($entities);

    // Clean current publishing node.
    multisite_drupal_toolbox_taxonomy_term_delete_clean_node($target, $field, $term, $entity);

    // Clean current draft node.
    if ($target->entity_type == 'node') {
      $current_node = workbench_moderation_node_current_load($entity);
      if ($current_node && $entity->vid != $current_node->vid) {
        multisite_drupal_toolbox_taxonomy_term_delete_clean_node($target, $field, $term, $current_node);
      }
    }
    if (db_table_exists('field_revision_' . $field['field_name'])) {
      // Clean revision field.
      db_delete('field_revision_' . $field['field_name'])
        ->condition('entity_type', $target->entity_type)
        ->condition('entity_id', $target->entity_id)
        ->condition($field['field_name'] . '_tid', $term->tid)
        ->execute();
    }
  }
}

/**
 * Remove taxonomy term from entity.
 */
function multisite_drupal_toolbox_taxonomy_term_delete_clean_node($target, $field, $term, $entity) {
  if (empty($entity->{$field['field_name']}[$target->language])) {
    return;
  }
  foreach ($entity->{$field['field_name']}[$target->language] as $key => $value) {
    if ($value['tid'] == $term->tid) {
      unset($entity->{$field['field_name']}[$target->language][$key]);
      entity_save($target->entity_type, $entity);
      break;
    }
  }
}

/**
 * Batch taxonomy_term_delete: finish.
 */
function multisite_drupal_toolbox_taxonomy_term_delete_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Assigned taxonomy term cleaned'));
  }
  else {
    drupal_set_message(t('Error: Assigned taxonomy term not cleaned'));
  }
}

/**
 * Implements hook_modules_installed().
 */
function multisite_drupal_toolbox_modules_installed($modules) {
  // Hide workbench information block.
  if (in_array('workbench', $modules)) {
    db_update('block')
      ->fields(array('region' => '-1'))
      ->condition('module', 'workbench', '=')
      ->condition('delta', 'block', '=')
      ->execute();
  }
}

/**
 * Implements hook_library_alter().
 */
function multisite_drupal_toolbox_library_alter(&$javascript, $module) {

  global $theme;

  // Use jquery 1.10 when ec_resp is used.
  if (module_exists('jquery_update') && $theme === multisite_drupal_toolbox_cce_theme()) {

    $path = drupal_get_path('module', 'jquery_update');
    $version = variable_get('jquery_update_jquery_version', '1.10');

    $min = variable_get('jquery_update_compression_type', 'min') == 'none' ? '' : '.min';
    $cdn = variable_get('jquery_update_jquery_cdn', 'none');

    jquery_update_jquery_replace($javascript, $cdn, $path, $min, $version);
  }
}

/**
 * Page callback that returns if an URL is valid with drupal_http_request().
 *
 * Returns a boolean in JSON format.
 *
 * @todo This is redundant and should be removed. The calling code can simply
 *   inspect the HTTP response code of the URL to see if it exists. This is now
 *   doing two requests where one would be sufficient.
 */
function _multisite_drupal_toolbox_url_exists() {
  $response = drupal_http_request($_GET['url']);
  $output = isset($response->errno) && $response->errno == 0 && $response->code >= 200 && $response->code < 300;
  drupal_add_http_header('Content-Type', 'application/json');
  echo drupal_json_encode($output);
  drupal_exit();
}

/**
 * Sorts an object by the 'weight' element.
 *
 * Extend drupal API.
 *
 * @see drupal_sort_weight
 */
function multisite_drupal_toolbox_sort_weight_object($a, $b) {
  $a_weight = (is_object($a) && isset($a->weight)) ? $a->weight : 0;
  $b_weight = (is_object($b) && isset($b->weight)) ? $b->weight : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Implements hook_features_post_restore().
 *
 * When a features module is disabled, disable any node types it provides.
 *
 * @see node_features_disable_feature
 */
function multisite_drupal_toolbox_features_post_restore($op, $items) {
  if ($op == 'disable') {
    foreach ($items as $module => $components) {
      if (in_array('node', $components) && $default_types = features_get_default('node', $module)) {
        foreach ($default_types as $type_name => $type_info) {
          $type_info = node_type_load($type_name);
          $type_info->disabled = 1;
          node_type_save($type_info);
        }
      }
    }
  }
}

/**
 * Remove PHP Warning logs from HTML5 during a loadHTML.
 *
 * Extend DOMDocument::LoadHTML() function.
 *
 * @param DOMDocument $dom
 *   The DOMDocument $dom.
 * @param string $html
 *   The html string.
 *
 * @return bool
 *   Return False if an error occurred.
 *
 * @see $dom->loadHTML;
 */
function multisite_drupal_toolbox_load_html(DOMDocument $dom, $html) {
  $old = libxml_use_internal_errors(TRUE);
  libxml_clear_errors();
  if (!$dom->loadHTML($html)) {
    return FALSE;
  }
  $errors = libxml_get_errors();
  libxml_use_internal_errors($old);
  multisite_drupal_toolbox_filter_errors($errors);
  return TRUE;
}

/**
 * Remove PHP Warning logs from HTML5 during a loadHTMLFile.
 *
 * Extend DOMDocument::LoadHTMLFile() function.
 *
 * @param DOMDocument $dom
 *   The DOMDocument $dom.
 * @param string $htmlfile
 *   The path to the HTML file.
 *
 * @return bool
 *   Return False if an error occurred.
 *
 * @see $dom->loadHTMLFile;
 */
function multisite_drupal_toolbox_load_html_file(DOMDocument $dom, $htmlfile) {
  $old = libxml_use_internal_errors(TRUE);
  libxml_clear_errors();
  if (!$dom->loadHTMLFile($htmlfile)) {
    return FALSE;
  }
  $errors = libxml_get_errors();
  libxml_use_internal_errors($old);
  multisite_drupal_toolbox_filter_errors($errors);
  return TRUE;
}

/**
 * Filter errors removing PHP Warning concerning HTML5.
 *
 * @param array $errors
 *   Return an array with LibXMLError objects.
 */
function multisite_drupal_toolbox_filter_errors($errors) {
  $re = '#Tag (article|aside|audio|bdi|canvas|data|datalist|figcaption|figure|footer|header|keygen|main|mark'
    . '|meter|nav|output|progress|rb|rp|rt|rtc|ruby|section|source|template|time|track|video|wbr) invalid#';
  foreach ($errors as $error) {
    if (!preg_match($re, $error->message)) {
      trigger_error(__METHOD__ . ": $error->message on line $error->line.", E_USER_WARNING);
    }
  }
}
