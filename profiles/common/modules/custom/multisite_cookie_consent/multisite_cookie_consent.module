<?php
/**
 * @file
 * Main functions and hook implementations for the cookie consent module.
 */

/**
 * Implements hook_menu().
 */
function multisite_cookie_consent_menu() {
  $items = array();
  $items['admin/config/eucookie-consent'] = array(
    'title' => 'eucookie consent settings',
    'description' => 'Administer Eu cookie consent.',
    'page arguments' => array('multisite_cookie_consent_admin_settings'),
    'access arguments' => array('administer_eucookie_consent'),
    'file' => 'multisite_cookie_consent.admin.inc',
    'page callback' => 'drupal_get_form',
    'weight' => -8,
    'type' => MENU_LOCAL_TASK,
  );

  $items['cookie-notice'] = array(
    'title' => 'Cookies',
    'description' => 'Notice page',
    'page callback' => array('multisite_cookie_consent_notice'),
    'access arguments' => array('access content'),
    'weight' => -7,
    'type' => MENU_CALLBACK,
  );

  $items['rebuild/%'] = array(
    'title' => 'Rebuild',
    'description' => 'Rebuilding cookies',
    'page callback' => array('multisite_cookie_consent_rebuild_cookie'),
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'weight' => 0,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function multisite_cookie_consent_init() {
  // Don't display banner in cookie page.
  if (current_path() != 'cookie-notice') {
    // Notice url.
    $notice_page = url('cookie-notice', array('absolute' => TRUE));
    // Add for example external.
    drupal_add_js('http://ec.europa.eu/wel/like/js/likedislike.js', 'external');
    // Add js inline (example for now).
    drupal_add_js('var consent_required_cookies = {
      "a":{
          "' . _multisite_cookie_consent_site_name() . '":[' . _multisite_cookie_consent_cookielistheader() . ']}
      };
      var cookie_notice_url = {
      ' . _get_site_languages($notice_page) . '};', 'inline');
    // External pointer to EC consent.js file.
    $consent_js = variable_get('eucookie_consent_ec_consent_javascript',
      'http://ec.europa.eu/wel/cookie-consent/consent.js');
    // Consent banner.
    if (user_is_logged_in()) {
      if (variable_get('eucookie_consent_ec_consent_loggedin') == 1) {
        // Inclusion of external JavaScript from EC.
        drupal_add_js($consent_js, 'external');
      }
    }
    else {
      // Inclusion of external JavaScript from EC.
      drupal_add_js($consent_js, 'external');
    }
  }
}

/**
 * Implements hook_permission().
 */
function multisite_cookie_consent_permission() {
  return array(
    'administer_eucookie_consent' => array(
      'title' => t('Administer eucookie consent settings'),
    ),
  );
}

/**
 * Page callback; displays cookie notice page passing current language.
 */
function multisite_cookie_consent_notice() {
  global $language;
  // Get all descriptions available for the cookies.
  $descriptions = multisite_cookie_consent_getcookie($language->language);
  return $descriptions;
}

/**
 * Saves cookie description to the database.
 *
 * @param string $cookie_id
 *   The ID of the cookie to store.
 * @param string $cookie
 *   The value of the cookie.
 */
function multisite_cookie_consent_savecookie($cookie_id, $cookie) {
  // Insert to db.
  db_insert('eucookie_consent')
    ->fields(array(
      'cookie_id' => $cookie_id,
      'cookie_description' => drupal_json_encode($cookie),
    ))
    ->execute();
}

/**
 * Removes previous cookies stored in the database.
 *
 * @param bool $cookie_id
 *   Optional ID of the cookie to remove. If omitted all cookies will be
 *   removed.
 */
function multisite_cookie_consent_removecookie($cookie_id = FALSE) {
  // Remove to db.
  if (!$cookie_id) {
    db_delete('eucookie_consent')
      ->execute();
  }
  else {
    if (is_numeric($cookie_id)) {
      db_delete('eucookie_consent')
        ->conditions('cookie_id', $cookie_id)
        ->execute();
    }
  }
}

/**
 * Get cookie(s) description and name generates notice page.
 *
 * @param string $language
 *   Optional language for the page, defaults to English.
 *
 * @return string
 *   A string of HTML.
 */
function multisite_cookie_consent_getcookie($language = 'en') {
  $output = '';
  // todo: filter by specific cookie.
  $result = db_query("SELECT * FROM {eucookie_consent}");
  $cookies = variable_get('cck_registered_cookies');

  // Load static text from db.
  $static_text = drupal_json_decode(_multisite_cookie_statictext_load());

  // Start creating the page output.
  $output .= _multisite_cookie_statictext($static_text['text'], 'header', $language);

  foreach ($result as $record) {
    // Unserialize.
    $cookie_info = drupal_json_decode($record->cookie_description);

    // Check if cookie exists in cookie variable.
    if (in_array($cookie_info['_id'], $cookies)) {
      if (isset($cookie_info['translation'])) {
        // Build output for notice page, check if language is supported.
        if (!isset($cookie_info['translation'][$language])) {
          // Loop through out all the languages to find which one is the
          // default.
          foreach ($cookie_info['translation'] as $languages => $lang) {
            if ($lang['default']) {
              $output .= '<h3 class="ecl-heading ecl-heading--h3">' . $lang['name'] . '</h3>';
              $output .= '<p>' . $lang['description'] . '</p>';
            }
          }

        }
        else {
          $output .= '<h3 class="ecl-heading ecl-heading--h3">' . $cookie_info['translation'][$language]['name'] . '</h3>';
          $output .= '<p>' . $cookie_info['translation'][$language]['description'] . '</p>';
        }
      }
      else {
        $output .= '<h3 class="ecl-heading ecl-heading--h3">' . $cookie_info['_id'] . '</h3>';
        $output .= '<p>' . t('No description provided for this cookie yet.') . '</p>';
      }
    }

  }
  // Footer.
  $output .= _multisite_cookie_statictext($static_text['text'], 'footer', $language);
  // Javascript link.
  $output .= _multisite_cookie_statictext($static_text['text'], 'footer_links', $language);

  return $output;
}

/**
 * Returns the site name.
 *
 * @return string
 *   The site name.
 */
function _multisite_cookie_consent_site_name() {
  global $base_url;
  global $base_path;
  $url = parse_url($base_url . $base_path);
  return $url['host'];
}

/**
 * Implements hook_modules_disabled().
 */
function multisite_cookie_consent_modules_disabled($modules) {
  // Go through all modules and gather cookies that can be removed.
  $cookies = _multisite_cookie_consent_cookie_list($modules);
  if (!empty($cookies)) {
    $registered_cookies = variable_get('cck_registered_cookies', array());
    foreach ($registered_cookies as $key => $registered_cookie) {
      foreach ($cookies as $cookie) {
        if ($cookie == $registered_cookie) {
          unset($registered_cookies[$key]);
        }
      }
    }
    variable_set('cck_registered_cookies', $registered_cookies);

    _multisite_cookie_consent_fetch_registered_cookies();
  }
}

/**
 * Implements hook_modules_enabled().
 */
function multisite_cookie_consent_modules_enabled($modules) {
  // Go through all modules and gather cookies that can be enabled.
  $cookies = _multisite_cookie_consent_cookie_list($modules);
  if (!empty($cookies)) {
    $registered_cookies = variable_get('cck_registered_cookies', array());
    $registered_cookies = array_merge($registered_cookies, $cookies);
    variable_set('cck_registered_cookies', array_unique($registered_cookies));

    _multisite_cookie_consent_fetch_registered_cookies();
  }
}

/**
 * Rebuild registered cookies list.
 */
function _multisite_cookie_consent_rebuild_registered_cookies() {
  $cookies = _multisite_cookie_consent_cookie_list();
  variable_set('cck_registered_cookies', array_unique($cookies));

  _multisite_cookie_consent_fetch_registered_cookies();
  watchdog('multisite_cookie_consent', 'Registered cookies list rebuilt');
}

/**
 * Fetches the cookies from remote service and stores them in the database.
 */
function _multisite_cookie_consent_fetch_registered_cookies() {
  // Get connection.
  $connection_name = variable_get('multisite_cookie_connection');
  if ($connection_name) {
    $connection = clients_connection_load($connection_name);
    try {
      // Check connection with the cookie server.
      $cookies = $connection->serverCheck(TRUE);
    }
    catch (Exception $e) {
      drupal_set_message(t('Could not connect to the Cookie remote service, see error message "@message".', array(
        '@message' => $e->getMessage(),
      )), 'error');
      $cookies = FALSE;
    }

    if ($cookies) {
      // Remove previously stored cookies.
      multisite_cookie_consent_removecookie();
      $registered_cookies = variable_get('cck_registered_cookies', array());
      foreach ($registered_cookies as $key => $registered_cookie_id) {
        foreach ($cookies['rows'] as $cookie) {
          if ($cookie['id'] == $registered_cookie_id) {
            // Save each cookie on client side.
            multisite_cookie_consent_savecookie($cookie['id'], $cookie['value']);
            // Remove to keep missing cookies for later.
            unset($registered_cookies[$key]);
          }
        }
      }
      if (!empty($registered_cookies)) {
        foreach ($registered_cookies as $new_cookie_id) {
          $new_cookie = array(
            '_id' => $new_cookie_id,
            'type' => 'cookie',
            'cck' => FALSE,
          );

          try {
            // Send new cookie to server.
            $cookie = $connection->makeCookieRequest('POST', $new_cookie);
          }
          catch (Exception $e) {
            drupal_set_message(t('Could not save cookie "@cookie" to the Cookie remote service, see error message "@message".', array(
              '@message' => $e->getMessage(),
              '@cookie' => $new_cookie_id,
            )), 'error');
          }

          try {
            // Get new cookie from server.
            $new_cookie = $connection->retrieveCookie($cookie->id, 'GET', TRUE);
          }
          catch (Exception $e) {
            drupal_set_message(t('Could not fetch cookie "@cookie" from the Cookie remote service, see error message "@message".', array(
              '@message' => $e->getMessage(),
              '@cookie' => $cookie->id,
            )), 'error');
          }
          // Save new cookie on client side.
          multisite_cookie_consent_savecookie($new_cookie['_id'], $new_cookie);
        }
      }
      $url = url('cookie-notice', array('absolute' => TRUE));
      $args = array('%cookie_notice_page' => $url);
      drupal_set_message(t('Cookies saved! Visit cookie notice page: %cookie_notice_page', $args));
    }
  }
  else {
    drupal_set_message(t('Please configure your connection first.'));
  }
}

/**
 * List of cookies required by the modules.
 *
 * @param array $modules
 *   Optional list of modules to check. If omitted all modules will be scanned.
 *
 * @return array
 *   An array of cookies.
 */
function _multisite_cookie_consent_cookie_list(array $modules = NULL) {
  $cookies = array();
  // All modules and features if none given.
  if (!$modules) {
    $modules = module_list(TRUE);
  }
  foreach ($modules as $module) {
    $info = _multisite_cookie_consent_load_info($module);
    if (isset($info['cookies'])) {
      $cookies = array_merge($cookies, $info['cookies']);
    }
  }
  return array_unique($cookies);
}

/**
 * Loads info file definitions for a given module.
 *
 * @param string $module
 *   The module for which to load the information.
 *
 * @return array
 *   The info array.
 */
function _multisite_cookie_consent_load_info($module) {
  return drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
}

/**
 * Creates links to be added in JavaScript header for CCK integration.
 *
 * These are links to cookie pages per language.
 *
 * @param string $notice_page
 *   The URL of the notice page.
 *
 * @return string
 *   A serialized string of language codes and the notice page URL, quoted and
 *   separated with commas.
 */
function _get_site_languages($notice_page) {
  $languages = '';
  foreach (language_list() as $lang) {
    $languages .= '"' . $lang->language . '":"' . $notice_page . '",';
  }

  return $languages;
}

/**
 * Stores the latest notice templates from the remote service in the database.
 */
function _multisite_cookie_consent_rebuild_static_text() {
  $connection_info = variable_get('multisite_cookie_connection');
  // If there is a connection.
  if ($connection_info) {
    $connection = clients_connection_load($connection_info);

    try {
      // Get static text from remote service.
      $text = $connection->retrieveStatictext();
    }
    catch (Exception $e) {
      drupal_set_message(t('Could not connect to the Cookie remote service, see error message "@message".', array(
        '@message' => $e->getMessage(),
      )), 'error');
    }

    // Stores data in database.
    multisite_cookie_consent_savestatictext($text);
    drupal_set_message(t('Remote notice templates saved!'));
    watchdog('multisite_cookie_consent', 'Cookie notice page static text rebuilt');
  }
}

/**
 * Records static text to the database.
 *
 * @param string $static_text
 *   The static text to store in the database. This will replace the existing
 *   text.
 */
function multisite_cookie_consent_savestatictext($static_text) {
  db_delete('eucookie_static_text')
    ->execute();
  // Insert to db.
  db_insert('eucookie_static_text')
    ->fields(array(
      'static_text' => $static_text,
    ))
    ->execute();
}

/**
 * Gets static text from the database.
 *
 * @return string
 *   The static text.
 */
function _multisite_cookie_statictext_load() {
  $result = db_query("SELECT * FROM {eucookie_static_text}")->fetchAll();
  return $result[0]->static_text;

}

/**
 * Retrieves all static content from data array per language and key.
 *
 * @param array $data
 *   The data array.
 * @param string $key
 *   The key to retrieve.
 * @param string $lang
 *   The language to retrieve.
 *
 * @return mixed
 *   The requested data.
 */
function _multisite_cookie_statictext(array $data, $key, $lang) {
  $output_text = $data[$lang][$key];
  return $output_text;
}

/**
 * Returns the indicators table.
 *
 * @return string
 *   The themed indicators table.
 */
function multisite_cookie_consent_indicators() {
  $header = array(
    t('Cookie'),
    t('Revision'),
    t('Managed'),
    t('Translations'),
    t('Description (Default language)'),
    t('Rebuild'),
  );
  $output = '';
  $cookies = variable_get('cck_registered_cookies');
  foreach ($cookies as $cookie) {
    $result = db_query("SELECT * FROM {eucookie_consent} WHERE cookie_id = :nid", array(":nid" => $cookie))->fetchObject();
    if ($result) {
      // Make sure we have data back.
      if (isset($result->cookie_description)) {
        $cookie_data = drupal_json_decode($result->cookie_description);
      }
      $data = array();
      $description = '--';
      $li_translation = '--';

      if (isset($cookie_data['translation'])) {
        // Display cookie translations.
        foreach ($cookie_data['translation'] as $translation => $translation_info) {
          $default = '';
          if ($translation_info['default']) {
            $default = t(': Default language');
            $description = $translation_info['description'];
          }
          $data['items'][] = $translation . $default;
        }
        $li_translation = theme('item_list', $data);
      }

      $cck_managed = ($cookie_data['cck']) ? t('Yes') : t('No');
      $rebuild = l(t('Rebuild'), 'rebuild/' . $result->cookie_id);
      $rows[] = array(
        $result->cookie_id,
        $cookie_data['_rev'],
        $cck_managed,
        $li_translation,
        $description,
        $rebuild,
      );
    }
  }

  if (isset($rows)) {
    $output = theme('table',
      array(
        'header' => $header,
        'rows' => $rows,
      ));
  }

  return $output;
}

/**
 * Rebuilds cookie fetching latest information.
 *
 * @param string $cookie_id
 *   The ID of the cookie to rebuild.
 */
function multisite_cookie_consent_rebuild_cookie($cookie_id) {

  if ($cookie_id) {
    $connection_info = variable_get('multisite_cookie_connection');
    $connection = clients_connection_load($connection_info);

    try {
      // Get cookie information.
      $getcookieinfo = $connection->retrieveCookie($cookie_id, 'GET', TRUE);
    }
    catch (Exception $e) {
      drupal_set_message(t('Could not connect to the Cookie remote service, see error message "@message".', array(
        '@message' => $e->getMessage(),
      )), 'error');
    }

    // Updates cookie information.
    multisite_cookie_consent_save_cookie($getcookieinfo);
    drupal_set_message(t('Cookie updated!'));
    // Redirect user to its destination.
    drupal_goto('admin/config/eucookie-consent');
  }
}

/**
 * Writes a cookie to the database.
 *
 * @param array $getcookieinfo
 *   An array of cookie information.
 */
function multisite_cookie_consent_save_cookie(array $getcookieinfo) {
  db_update('eucookie_consent')
    ->fields(array(
      'cookie_description ' => $getcookieinfo,
    ))
    ->condition('cookie_id', $getcookieinfo['_id'], '=')
    ->execute();
}

/**
 * Returns a serialized version of the registered cookies array.
 *
 * @return string
 *   The registered cookies as a serialized string, quoted and separated
 *   with commas.
 */
function _multisite_cookie_consent_cookielistheader() {
  $cookies = '"' . implode('","', variable_get('cck_registered_cookies', array())) . '"';
  return $cookies;
}

/**
 * Implements hook_cron().
 */
function multisite_cookie_consent_cron() {
  // Default to a daily interval.
  $interval = variable_get('eucookie_consent_cron_interval', 60 * 60 * 24);
  if (time() >= variable_get('eucookie_consent_cron_next_execution', 0)) {
    _multisite_cookie_consent_rebuild_static_text();
    _multisite_cookie_consent_rebuild_registered_cookies();
    variable_set('eucookie_consent_cron_next_execution', time() + $interval);
  }
}
