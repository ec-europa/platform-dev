<?php

/**
 * @file
 * Anonymous subscriptions module (load-on-demand admin functions).
 */

/**
 * Implements hook_FORM_ID_alter().
 */
function subscriptions_anonymous_form_subscriptions_ui_node_form_alter(&$form, &$form_state, $form_id) {
  // @TODO make it more generic than only for nodes
  if ($form['#form_id'] == 'subscriptions_ui_node_form') {
    $form['wrapper']['mail'] = array(
      '#title' => t('Email'),
      '#type' => 'textfield',
      '#access' => user_access('subscribe to content') && user_is_anonymous(),
      '#required' => user_access('subscribe to content') && user_is_anonymous(),
    );
    if (user_is_anonymous()) {
      $form['#submit'][] = '_subscriptions_anonymous_submit';
    }
  }
}

/**
 * Validation handler for subscriptions form.
 */
function _subscriptions_anonymous_validate($form, &$form_state) {
  if (!empty($form_state['values']['mail'])) {
    if (!valid_email_address($form_state['values']['mail'])) {
      form_set_error('mail', t('Email address is invalid.'));
    }
  }
}

/**
 * Validation handler for subscriptions form.
 */
function _subscriptions_anonymous_submit($form, &$form_state) {
  // Get the lower uid found and decrement it.
  $query = db_select('subscriptions_queue', 'sq');
  $query->addExpression('MIN(uid)', 'min_uid');
  $min_uid = $query->execute()
    ->fetchAssoc();
  $form_state['uid'] = 32;

}

/**
 * Implements hook_node_view().
 *
 * Inject the node subform or a 'Subscribe' link into node pages
 * (depending on the Display Settings).
 *
 * @param object $node
 * @param string $view_mode
 * @param string $langcode
 *
 * @return
 *
 * @ingroup hooks
 * @ingroup form
 */
function subscriptions_anonymous_node_view($node, $view_mode, $langcode) {
  global $user;

  if ($node->nid && $view_mode == 'full' && user_access('subscribe to content')) {
    $arg2 = subscriptions_arg(2);
    if (!variable_get('subscriptions_form_in_block', 0) &&
      (!variable_get('subscriptions_form_link_only', 0) && (empty($arg2) || $arg2 == 'view') ||
        variable_get('subscriptions_form_link_only', 0) && $arg2 == 'subscribe' )) {
      if ($form = drupal_get_form('subscriptions_ui_node_form', $node, $arg2 == 'subscribe')) {
        $node->content['subscriptions_ui'] = array(
          'subscriptions_ui_form' => $form,
          '#weight' => 100,
        );
        return;
      }
    }

    subscriptions_suspended($user->uid, TRUE);
    if (variable_get('subscriptions_form_link_only', 0) && $arg2 != 'subscribe' && (!variable_get('subscriptions_avoid_empty_subscribe_links', 0) || module_invoke_all('subscriptions', 'node_options', $user, $node))) {
      /** @var $blocked_types array */
      $blocked_types = variable_get('subscriptions_blocked_content_types', array());
      if (in_array($node->type, $blocked_types) && !user_access('subscribe to all content types')) {
        return;
      }
      $node->content['links']['node']['#links']['subscriptions-subscribe'] = array(
        'href' => current_path() . '/subscribe',
        'title' => t('Subscribe') . (in_array($node->type, $blocked_types) ? SUBSCRIPTIONS_UNAVAILABLE : ''),
        'html' => TRUE,
        'fragment' => 'subscribe',
        'attributes' => array('title' => t('Receive notifications about changes and/or comments to this page (and possibly similar pages).')),
      );
    }
  }
}
