<?php
/**
 * @file
 * Views implementing europa components.
 */

/**
 * Implements hook_views_api().
 */
function nexteuropa_core_views_views_api() {
  return ['api' => 3.0];
}

/**
 * Implements hook_theme_registry_alter().
 *
 * AFAIK, there is no other way to do this horrendous hack to retrieve ALL the
 * themes hooks available.
 * We could use the regular way to do it with module_invoke_all('theme') and it
 * works properly. The only issue is that theme hooks defined in the theme are
 * not detected because we are using an admin theme.
 *
 * Any alternative way is very welcome.
 */
function nexteuropa_core_views_theme_registry_alter(&$hook_definitions) {
  global $theme;

  // Bails out if we are not in the default theme context.
  if ($theme != variable_get('default_theme')) {
    return;
  }

  $hooks = array();

  // Reset the variable.
  variable_set('nexteuropa_core_views_hooks', $hooks);

  // Get the path to the europa theme.
  // Should we allow users to change that theme ?
  // Ex: when they will create a subtheme? What will be the behavior of this?
  $path = drupal_get_path('theme', 'europa');

  foreach ($hook_definitions as $hook => $data) {
    if (isset($data['path']) && (strpos($data['path'],
          $path) !== FALSE || $data['path'] == $path)
    ) {
      if (isset($data['variables']) && is_array($data['variables']) && !isset($data['render element'])) {
        $data['variables'] = array_filter($data['variables'],
          function ($value) {
            return !is_array($value) ||
              !in_array(
                $value,
                array(
                  'content_attributes',
                  'wrapper_attributes',
                  'title_attributes',
                )
              );
          });
        // Filter out theme hooks with no variables.
        if (count($data['variables']) >= 1) {
          $hooks[$hook] = $data;
        }
      }
    }
  }

  // Sort hooks alphabetically.
  ksort($hooks);
  // Store hooks in a variable, once again, not the best way.
  variable_set('nexteuropa_core_views_hooks', $hooks);
}
