<?php

/**
 * @file
 * Module file of ecas_import_users.
 */

/**
 * Implements hook_permission().
 */
function ecas_import_users_permission() {
  return array(
    'access ecas import users function' => array(
      'title' => t('Import ECAS users'),
      'description' => t('Import users from the ECAS server into Drupal.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ecas_import_users_menu() {
  $items = array();

  $items['admin/people/import/%ecas_import_users_names/%ecas_import_users_group/%ecas_import_users_search_by/%ecas_import_users_country/%ecas_import_users_mail'] = array(
    'page callback' => 'ecas_import_users_show_user_content',
    'access arguments' => array('access ecas import users function'),
    'page arguments' => array(3, 4, 5, 6, 7),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/people/import'] = array(
    'title' => 'Import users',
    'page callback' => 'ecas_import_users_page_content',
    'access arguments' => array('access ecas import users function'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/ecas/import_users'] = array(
    'title' => 'Import user settings',
    'description' => 'Configure ECAS import user settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecas_import_users_admin_settings'),
    'access arguments' => array('administer ecas'),
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Returns $arg or everybody if $arg is '%' or empty.
 *
 * @param string $arg
 *   Parameter from url.
 *
 * @return string
 *   Give back 'everybody' or the $arg itself.
 */
function ecas_import_users_names_to_arg($arg) {
  return (empty($arg) || $arg == '%') ? 'everybody' : $arg;
}

/**
 * Returns $arg or all-groups if $arg is '%' or empty.
 *
 * @param string $arg
 *   Parameter from url.
 *
 * @return string
 *   Give back 'all-groups' or the $arg itself.
 */
function ecas_import_users_group_to_arg($arg) {
  return (empty($arg) || $arg == '%') ? 'all-groups' : $arg;
}

/**
 * Returns $arg or by-lastname if $arg is '%' or empty.
 *
 * @param string $arg
 *   Parameter from url.
 *
 * @return string
 *   Give back 'by-lastname' or the $arg itself.
 */
function ecas_import_users_search_by_to_arg($arg) {
  return (empty($arg) || $arg == '%') ? 'by-lastname' : $arg;
}

/**
 * Returns $arg or all-countries if $arg is '%' or empty.
 *
 * @param string $arg
 *   Parameter from url.
 *
 * @return string
 *   Return
 */
function ecas_import_users_country_to_arg($arg) {
  return (empty($arg) || $arg == '%') ? 'all-countries' : $arg;
}

/**
 * Returns $arg or no-mail if $arg is '%' or empty.
 *
 * @param string $arg
 *   Parameter from url.
 *
 * @return string
 *   Give back 'no-mail' or the $arg itself.
 */
function ecas_import_users_mail_to_arg($arg) {
  return (empty($arg) || $arg == '%') ? 'no-mail' : $arg;
}

/**
 * Page callback: displays the 'admin/config/ecas/ecas_import_users' page.
 */
function ecas_import_users_admin_settings($form, &$form_state) {
  $form['param'] = array(
    '#type' => 'fieldset',
    '#title' => t('ECAS Import users module settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $options = array('1' => t('Active'), '0' => t('Blocked'));
  $form['param']['ecas_import_users_default_status'] = array(
    '#type' => 'radios',
    '#title' => sprintf('%s (%s)', t('User account status'), l(t('admin import'), 'admin/people/import')),
    '#default_value' => variable_get('ecas_import_users_default_status', 1),
    '#options' => $options,
    '#description' => t('Status of the user account after import by an administrator'),
  );

  return system_settings_form($form);
}

/**
 * Page callback: displays the 'admin/people/import' page.
 */
function ecas_import_users_page_content() {
  // Display tabs.
  $output = theme('tabs_tabset', menu_local_tasks());

  // Forms.
  if (function_exists('getLdapEntries')) {
    // Search by lastname.
    $form = drupal_get_form('ecas_import_user_ldap_user_form');
    $output .= drupal_render($form);
  }
  else {
    $output .= t('Sorry, this function currently appears to be unavailable - please check the FPFIS_Common libraries setup.');
  }

  return $output;
}

/**
 * Returns the already defined FPFIS_LDAP_BASE_DN_DG or the basic value of it.
 *
 * @todo It can be a variable instead of using contant.
 *
 * @return string
 *   The base Distinguished Name that contains the groups within the LDAP.
 */
function _ecas_import_users_groups_dn() {
  return defined('FPFIS_LDAP_BASE_DN_DG') ? constant('FPFIS_LDAP_BASE_DN_DG') : 'ou=Groups,o=cec.eu.int';
}

/**
 * Form construction for the ldap handled user form.
 */
function ecas_import_user_ldap_user_form($form, &$form_state) {
  $result = getLdapEntries(_ecas_import_users_groups_dn(), 'cn=DG_*', array('cn'));

  $rows_dg = array();
  for ($i = 0; $i < $result['count']; ++$i) {
    if ($result[$i]['cn'][0] != '') {
      $array_dg = explode('_', $result[$i]['cn'][0]);
      $rows_dg[$array_dg[1]] = $array_dg[1];
    }
  }

  ksort($rows_dg);

  $form['dg'] = array(
    '#type' => 'select',
    '#title' => t('Search by group (LDAP DG)'),
    '#options' => array_merge(array('none' => t('No group'), 'all-groups' => t('In all groups')), $rows_dg),
    '#required' => FALSE,
    '#default_value' => 'all-groups',
  );

  $form['search_by'] = array(
    '#type' => 'select',
    '#title' => t('Search by field'),
    '#options' => array('by-lastname' => t('Lastname'), 'by-username' => t('Username')),
    '#required' => FALSE,
  );

  $form['lastname'] = array(
    '#type' => 'textarea',
    '#cols' => 20,
    '#rows' => 3,
    '#title' => t('Lastname or username'),
    '#required' => FALSE,
    '#description' => t('You can search for several users by using the comma separator (,).'),
  );

  $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Search by country'),
    '#options' => array_merge(array('all-countries' => t('From all countries')), getCountryList()),
    '#required' => FALSE,
    '#default_value' => 'all-countries',
  );

  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Search by mail'),
    '#required' => FALSE,
    '#description' => t('You can search by mail suffix, example : @ec.europa.eu'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Form validation handler for ldap_user_form().
 */
function ecas_import_user_ldap_user_form_validate($form, &$form_state) {
  if ($form_state['values']['lastname'] == '' && $form_state['values']['dg'] == 'all-groups' && $form_state['values']['country'] == 'all-countries' && $form_state['values']['mail'] == '') {
    form_set_error('', t('You must fill in at least one of the search fields.'));
  }
}

/**
 * Clean the content of the given value.
 *
 * @param string $value
 *   Contains the content.
 *
 * @return string
 *   Cleaned $value.
 */
function _ecas_import_users_clean_name_field($value) {
  if (empty($value)) {
    $value = 'everybody';
  }
  else {
    // Replace every space or end of line by a comma.
    $value = preg_replace('($|\s+)', ',', $value);
    // Remove empty parts between commas.
    $value = implode(',', preg_split('/,/', $value, -1, PREG_SPLIT_NO_EMPTY));
  }

  return $value;
}

/**
 * Form submission handler for ldap_user_form().
 */
function ecas_import_user_ldap_user_form_submit($form, &$form_state) {
  $form_state['redirect'] = sprintf(
    'admin/people/import/%s/%s/%s/%s/%s',
    _ecas_import_users_clean_name_field($form_state['values']['lastname']),
    $form_state['values']['dg'],
    $form_state['values']['search_by'],
    $form_state['values']['country'],
    (empty($form_state['values']['mail']) ? 'no-mail' : $form_state['values']['mail'])
  );
}

/**
 * Generate the 'admin/people/import/%/%/%/%/%' page.
 *
 * @return html
 *   Rendered form with tabs_tabset local menu.
 */
function ecas_import_users_show_user_content() {
  $received_arguments = func_get_args();
  $import_arguments = array(
    'names'      => isset($received_arguments[0]) ? $received_arguments[0] : '',
    'dg'         => isset($received_arguments[1]) ? $received_arguments[1] : '',
    'search_by'  => isset($received_arguments[2]) ? $received_arguments[2] : '',
    'country'    => isset($received_arguments[3]) ? $received_arguments[3] : '',
    'mail'       => isset($received_arguments[4]) ? $received_arguments[4] : '',
  );

  // Display tabs.
  $output = theme('tabs_tabset', menu_local_tasks());
  $form = drupal_get_form('ecas_import_users_show_user_content_form', $import_arguments);
  $output .= drupal_render($form);

  return $output;
}

/**
 * Form constructor for the admin/people/import pages.
 */
function ecas_import_users_show_user_content_form($form, &$form_state, $arguments) {
  $filters = '';

  $arguments += array(
    'names' => 'everybody',
    'dg' => 'all-groups',
    'search_by' => 'by-username',
    'country' => 'all-countries',
    'mail' => 'no-mail',
  );

  $names = $arguments['names'];
  $dg = $arguments['dg'];
  $search_by = $arguments['search_by'];
  $country = $arguments['country'];
  $mail = $arguments['mail'];

  if ($names != 'everybody') {
    $names = trim($names);
    $search_by = ($search_by == 'by-username') ? 'uid' : 'cn';

    if (strpos($names, ',')) {
      $names = explode(',', $names);
    }

    if (is_array($names)) {
      $filter_names = '(|';
      foreach ($names as $name) {
        $name = trim($name);
        if (!empty($name)) {
          $filter_names .= "($search_by=$name*)";
        }
      }
      $filter_names .= ')';
    }
    else {
      $filter_names = "($search_by=$names*)";
    }

    $filters .= $filter_names;
  }

  if ($country != 'all-countries') {
    $filters .= "(c=$country*)";
  }

  if ($mail != '' && $mail != 'no-mail') {
    $filters .= "(mail=*$mail*)";
  }

  if ($dg == 'all-groups') {
    $result = getLdapEntries(FPFIS_LDAP_BASE_DN,
      '(&' . $filters . '(|(employeeType=f)(employeeType=E)(employeeType=n)(employeeType=i))(recordStatus=a))',
      array(
        'cn',
        'givenname',
        'dg',
        'c',
        'departmentnumber',
        'o',
        'uid',
        'mail',
        'sn',
      )
    );
  }
  else {
    if ($dg == 'none') {
      $result = getLdapEntries(FPFIS_LDAP_BASE_DN,
        '(&' . $filters . '(!(dg=*))(|(employeeType=f)(employeeType=E)(employeeType=n)(employeeType=i))(recordStatus=a))',
        array(
          'cn',
          'givenname',
          'dg',
          'c',
          'departmentnumber',
          'o',
          'uid',
          'mail',
          'sn',
        )
      );
    }
    else {
      $result = getLdapEntries(FPFIS_LDAP_BASE_DN,
        '(&' . $filters . '(dg=' . $dg . ')(|(employeeType=f)(employeeType=E)(employeeType=n)(employeeType=i))(recordStatus=a))',
        array(
          'cn',
          'givenname',
          'dg',
          'c',
          'departmentnumber',
          'o',
          'uid',
          'mail',
          'sn',
        )
      );
    }
  }
  if ($result['count'] == 0) {
    $message = '<div class="messages status">' . t('No user found') . '</div>';
    $form['div_tag'] = array('#markup' => $message);
  }
  else {
    drupal_add_js(drupal_get_path('module', 'ecas_import_users') . '/js/check_users.js');

    $form['fs'] = array(
      '#type' => 'fieldset',
      '#title' => t('List users LDAP'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form['fs']['check_all_top'] = array(
      '#markup' => '<a id="check_users_link_top" href="javascript:selectAllEcasUsers(true);">Check all users</a>',
      '#weight' => -42,
    );

    $count = 0;
    for ($r = 0; $r < $result['count']; $r++, $count++) {
      $row['cn'] = isset($result[$r]['cn'][0]) ? $result[$r]['cn'][0] : '';
      $row['dg'] = isset($result[$r]['dg'][0]) ? $result[$r]['dg'][0] : '';
      $row['departmentnumber'] = isset($result[$r]['departmentnumber'][0]) ? $result[$r]['departmentnumber'][0] : '';
      $row['domain'] = isset($result[$r]['o'][0]) ? $result[$r]['o'][0] : '';

      if ($row['cn'] == '') {
        // User needs a cn!
        break;
      }

      $uid = isset($result[$r]['uid'][0]) ? $result[$r]['uid'][0] : '';
      $mail = isset($result[$r]['mail'][0]) ? $result[$r]['mail'][0] : '';

      $lastname = isset($result[$r]['sn'][0]) ? $result[$r]['sn'][0] : '';
      $firstname = isset($result[$r]['givenname'][0]) ? $result[$r]['givenname'][0] : '';
      $country = isset($result[$r]['c'][0]) ? $result[$r]['c'][0] : '';

      $form['fs'][$count] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($row['cn']) . '<div>' . check_plain($mail) . '</div><div><b>username : </b>' . check_plain($uid) . '</div><div><b>DG</b> : ' . check_plain($row['dg']) . '</div><div><b>domain</b> : ' . check_plain($row['domain']) . '</div><div><b>country : </b>' . check_plain($country) . '</div>',
        '#return_value' => implode(
          '|',
          array(
            check_plain($uid),
            $mail,
            $firstname,
            $lastname,
            check_plain($row['domain']),
            check_plain($row['departmentnumber']),
          )
        ),
        '#prefix' => '<div class="ldap_entry">',
        '#suffix' => '</div>',
      );

    }

    if ($count > 10) {
      $form['fs']['check_all_bottom'] = array(
        '#markup' => '<a id="check_users_link_bottom" href="javascript:selectAllEcasUsers(true);">Check all users</a>',
        '#weight' => 42,
      );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Import'),
    );
  }

  return $form;
}

/**
 * Form submission handler for show_user_content().
 */
function ecas_import_users_show_user_content_form_submit($form, &$form_state) {
  $users = $form_state['values']['fs'];

  $imported_users = array();
  foreach ($users as $value) {
    if ($value != '0') {
      list($uid, $mail, $firstname, $lastname, $domain, $departmentnumber) = explode('|', $value);
      $account = user_load_by_name($uid);
      // If the user account doesn't exit.
      if (!$account) {

        // 1 is "active", 0 is "blocked".
        $account = ecas_create_user($uid, array(
          'status' => variable_get('ecas_import_users_default_status', 1),
        ));

        if ($account && $account->uid > 0) {
          // Save user profile data.
          ecas_sync_user_info(
              $account,
              array(
                'cas:email' => $mail,
                'cas:firstName' => $firstname,
                'cas:lastName' => $lastname,
                'cas:domain' => $domain,
                'cas:departmentNumber' => $departmentnumber,
              ),
              // This allows other modules to detect a user creation.
              array('ecas_import_users_user_creation' => TRUE)
          );
          drupal_set_message(t('User @user_uid imported', array('@user_uid' => $uid)));
          $imported_users[] = $uid;
        }
        else {
          drupal_set_message(t('User @user_uid not imported', array('@user_uid' => $uid)));
        }
      }
      else {
        drupal_set_message(t('User @user_uid not imported', array('@user_uid' => $uid)));
      }
    }
  }
  module_invoke_all('ecas_users_imported', array('imported_users' => $imported_users));

  // Tries to guess the original form URL.
  $matches = array();
  if (preg_match('/(.*import)\/.*$/', current_path(), $matches)) {
    $form_state['#redirect'] = $matches[1];
  }
  else {
    $form_state['#redirect'] = url('admin/people/import');
  }
}
