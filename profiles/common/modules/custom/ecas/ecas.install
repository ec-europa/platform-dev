<?php

/**
 * @file
 * Install, uninstall, update and schema hooks for the ECAS module.
 */

/**
 * Implements hook_install().
 */
function ecas_install() {
  $t = get_t();
  variable_set('ecas_warning_message', $t('Your account is not yet approved'));

  // Check for Curl support.
  if (!function_exists('curl_version')) {
    drupal_set_message(
      $t('Your PHP installation does not seem to provide the Curl extension. Please check your PHP configuration since Curl functions are required by the "ecas" module.'),
      'warning'
    );
  }

  // Check for LDAP support.
  if (!function_exists('ldap_connect')) {
    drupal_set_message(
      $t('Your PHP installation does not seem to provide the LDAP extension. Please check your PHP configuration since LDAP functions are required by the "ecas" module.'),
      'warning'
    );
  }
}

/**
 * Implements hook_uninstall().
 */
function ecas_uninstall() {
  variable_del('ecas_assurance_level');
  variable_del('ecas_domain');
  variable_del('ecas_account_request_url');
  variable_del('ecas_change_password_url');
  variable_del('ecas_phpcas_debug');
  variable_del('ecas_phpcas_debug_logpath');
  variable_del('ecas_account_option');
  variable_del('ecas_login_message');
  variable_del('ecas_warning_message');
  variable_del('ecas_update_mail_address');
  variable_del('ecas_default_mail_address');
  variable_del('ecas_profile_core_enabled');
  variable_del('ecas_profile_core_firstname_field');
  variable_del('ecas_profile_core_lastname_field');
  variable_del('ecas_profile_core_ecas_email_field');
  variable_del('ecas_profile_core_ecas_creator_field');
  variable_del('ecas_group_sync_enabled');
  variable_del('ecas_pages_method');
  variable_del('ecas_pages');
  variable_del('ecas_use_shared_fpfis');
}

/**
 * Implements hook_requirements().
 */
function ecas_requirements($phase) {
  $requirements = array();
  if ($phase != 'runtime') {
    return $requirements;
  }

  $t = get_t();
  $requirements['ecas_library']['title'] = $t('CAS Library');
  $cas_version = constant('PHPCAS_VERSION');
  $min_version = constant('ECAS_MIN_PHPCAS_VERSION');
  if (!$cas_version) {
    $requirements['ecas_library']['value'] = $t('phpcas library not found.');
    $requirements['ecas_library']['severity'] = REQUIREMENT_ERROR;
  }
  elseif (version_compare($cas_version, $min_version) >= 0) {
    $requirements['ecas_library']['value'] = $cas_version;
    $requirements['ecas_library']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['ecas_library']['value'] = $t('At least @version', array('@version' => $min_version));
    $requirements['ecas_library']['severity'] = REQUIREMENT_ERROR;
    $requirements['ecas_library']['description'] = $t("The phpcas version (%version) is not correct for ECAS module.", array('%version' => $cas_version));
  }

  if ($cert_path = variable_get('ecas_certificate_path', '')) {
    if (!file_exists($cert_path)) {
      $requirements['ecas_path'] = array(
        'title' => $t('CAS Certificate Path'),
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Not found'),
        'description' => $t('The ECAS certificate file path is set but the file is not found. Please check its configuration.'),
      );

      return $requirements;
    }

    $requirements['ecas_path'] = array(
      'title' => $t('CAS Certificate File Path'),
      'severity' => REQUIREMENT_OK,
      'value' => $t('Defined'),
    );

    return $requirements;
  }

  if (module_exists('advanced_help')) {
    $description = $t('To set the ECAS certificate file path, please read more !here', array('!here' => advanced_help_l($t('here'), "admin/help/ah/ecas")));
  }
  else {
    $description = $t('To set the ECAS certificate file path, please consult the README file of the module.');
  }

  $requirements['ecas_path'] = array(
    'title' => $t('CAS Certificate File filePath'),
    'severity' => REQUIREMENT_WARNING,
    'value' => $t('Not configured'),
    'description' => $description,
  );

  return $requirements;
}
