<?php

/**
 * @file
 * Install, uninstall, update and schema hooks for the ECAS module.
 */

/**
 * Implements hook_install().
 */
function ecas_install() {
  $t = get_t();
  variable_set(ECAS_WARNING_MESSAGE, 'Your account is not yet approved');

  // Check for Curl support.
  if (!function_exists('curl_version')) {
    drupal_set_message(
      $t('Your PHP installation does not seem to provide the Curl extension. Please check your PHP configuration since Curl functions are required by the "ecas" module.'),
      'warning'
    );
  }

  // Check for LDAP support.
  if (!function_exists('ldap_connect')) {
    drupal_set_message(
      $t('Your PHP installation does not seem to provide the LDAP extension. Please check your PHP configuration since LDAP functions are required by the "ecas" module.'),
      'warning'
    );
  }

  if (module_exists('i18n_variable')) {
    $variable_realm_list_language = variable_get('variable_realm_list_language', array());
    $variable_realm_list_language += array(
      ECAS_EMAIL_ERROR_MESSAGE,
      ECAS_EMAIL_ERROR_MESSAGE_FACEBOOK,
      ECAS_LOGIN_MESSAGE,
      ECAS_WARNING_MESSAGE,
    );
    variable_set('variable_realm_list_language', $variable_realm_list_language);
  }
}

/**
 * Implements hook_uninstall().
 */
function ecas_uninstall() {
  variable_del('ecas_assurance_level');
  variable_del('ecas_domain');
  variable_del('ecas_account_request_url');
  variable_del('ecas_change_password_url');
  variable_del('ecas_phpcas_debug');
  variable_del('ecas_phpcas_debug_logpath');
  variable_del('ecas_account_option');
  variable_del('ecas_login_message');
  variable_del('ecas_warning_message');
  variable_del('ecas_update_mail_address');
  variable_del('ecas_default_mail_address');
  variable_del('ecas_profile_core_enabled');
  variable_del('ecas_profile_core_firstname_field');
  variable_del('ecas_profile_core_lastname_field');
  variable_del('ecas_profile_core_ecas_email_field');
  variable_del('ecas_profile_core_ecas_creator_field');
  variable_del('ecas_group_sync_enabled');
  variable_del('ecas_pages_method');
  variable_del('ecas_pages');
  variable_del('ecas_use_shared_fpfis');
}

/**
 * Implements hook_requirements().
 */
function ecas_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $t = get_t();
    $requirements['ecas_library']['title'] = $t('CAS Library');
    $cas_version = constant('PHPCAS_VERSION');
    $min_version = constant('ECAS_MIN_PHPCAS_VERSION');
    if (!$cas_version) {
      $requirements['ecas_library']['value'] = $t('phpcas library not found.');
      $requirements['ecas_library']['severity'] = REQUIREMENT_ERROR;
    }
    elseif (version_compare($cas_version, $min_version) >= 0) {
      $requirements['ecas_library']['value'] = $cas_version;
      $requirements['ecas_library']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['ecas_library']['value'] = $t('At least @version', array('@version' => $min_version));
      $requirements['ecas_library']['severity'] = REQUIREMENT_ERROR;
      $requirements['ecas_library']['description'] = $t("The phpcas version (%version) is not correct for ECAS module.", array('%version' => $cas_version));
    }
  }
  return $requirements;
}

/**
 * Sets the default value for the new variables and make them translatable.
 */
function ecas_update_7001() {
  if (module_exists('i18n_variable')) {
    $variable_realm_list_language = variable_get('variable_realm_list_language', array());
    $variable_realm_list_language += array(
      ECAS_EMAIL_ERROR_MESSAGE,
      ECAS_EMAIL_ERROR_MESSAGE_FACEBOOK,
      ECAS_LOGIN_MESSAGE,
      ECAS_WARNING_MESSAGE,
    );
    variable_set('variable_realm_list_language', $variable_realm_list_language);
  }
}
