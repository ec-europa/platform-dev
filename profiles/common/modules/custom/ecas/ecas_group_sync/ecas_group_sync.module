<?php

/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * Implements hook_menu().
 */
function ecas_group_sync_menu() {
  $items['admin/config/ecas/group_sync'] = array(
    'title' => 'Group sync settings',
    'description' => 'Configure group sync mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecas_group_sync_mapping_form'),
    'access arguments' => array('administer ecas'),
    'file' => 'ecas_group_sync.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/ecas/group_sync/role'] = array(
    'title' => 'Roles mapping',
    'description' => 'Configure group sync mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecas_group_sync_mapping_form'),
    'access arguments' => array('administer ecas'),
    'file' => 'ecas_group_sync.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  if (module_exists('og')) {
    $items['admin/config/ecas/group_sync/group'] = array(
      'title' => 'Groups mapping',
      'description' => 'Configure group sync mapping',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ecas_group_sync_mapping_group_form'),
      'access arguments' => array('administer ecas'),
      'file' => 'ecas_group_sync_group.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
    );
  }
  return $items;
}

/**
 * Implements hook_info_ecas_update().
 *
 * Implement mapping between LDAP data and user accounts.
 */
function ecas_group_sync_info_ecas_update($user, $user_info, $args) {
  // Mapping between DG and drupal roles.
  if (isset($user_info['dg'])) {
    // The user is affected to a DG.
    $query = db_select('ecas_sync_mapping', 'esm');
    // Get mapping rules.
    $query->condition('synctype', 'role', '=');
    $query->condition('LDAPfield', 'dg', '=');
    $query->condition('LDAPfield_value', $user_info['dg'], '=');
    $query->fields('esm');
    $query->join('role', 'r', 'esm.synctype_value = r.rid');
    $query->fields('r', array('name'));
    $results = $query->execute();

    $roles = $user->roles;
    while ($row = $results->fetchAssoc()) {
      $roles[$row['synctype_value']] = $row['name'];
    }
    $user->roles = $roles;
    user_save($user, array('roles' => $roles));
  }

  // Mapping between DG and og roles.
  if (module_exists('og')) {
    if (isset($user_info['dg'])) {
      // The user is affected to a DG.
      $query = db_select('ecas_sync_mapping', 'esm');
      // Get mapping rules.
      $query->condition('synctype', 'group', '=');
      $query->condition('LDAPfield', 'dg', '=');
      $query->condition('LDAPfield_value', $user_info['dg'], '=');
      $query->fields('esm');
      $results = $query->execute();

      while ($row = $results->fetchAssoc()) {
        og_role_grant('node', $row['synctype_value'], $user->uid, $row['synctype_value_extra']);
      }
    }
  }
}

/**
 * Get the list of DG from the LDAP.
 */
function get_dg() {
  if (($cache = cache_get('list_dg', 'cache')) && !empty($cache->data)) {
    $list_dg = $cache->data;
  }
  else {
    $result = getLdapEntries(_ecas_import_users_groups_dn(), 'cn=DG_*', array('cn'));
    $list_dg = array();
    for ($i = 0; $i < $result['count']; ++$i) {
      if ($result[$i]['cn'][0] != '') {
        $array_dg = explode('_', $result[$i]['cn'][0]);
        $list_dg[$array_dg[1]] = $array_dg[1];
      }
    }
    ksort($list_dg);

    cache_clear_all('list_dg', 'cache', TRUE);
    cache_set('list_dg', $list_dg, 'cache');
  }

  return $list_dg;
}
