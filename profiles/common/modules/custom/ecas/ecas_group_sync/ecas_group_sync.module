<?php
/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * Implements hook_menu().
 */
function ecas_group_sync_menu() {
  $items['admin/config/ecas/group_sync'] = array(
    'title' => 'Group sync settings',
    'description' => 'Configure group sync mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecas_group_sync_mapping_form'),
    'access arguments' => array('administer ecas'),
    'file' => 'ecas_group_sync.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/ecas/group_sync/role'] = array(
    'title' => 'Roles mapping',
    'description' => 'Configure group sync mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecas_group_sync_mapping_form'),
    'access arguments' => array('administer ecas'),
    'file' => 'ecas_group_sync.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  if (module_exists('og')) {
    $items['admin/config/ecas/group_sync/group'] = array(
      'title' => 'Groups mapping',
      'description' => 'Configure group sync mapping',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ecas_group_sync_mapping_group_form'),
      'access arguments' => array('administer ecas'),
      'file' => 'ecas_group_sync_group.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
    );
  }
  return $items;
}

/**
 * Implements hook_info_ecas_update().
 *
 * Implement mapping between LDAP data and user accounts.
 */
function ecas_group_sync_info_ecas_update($user, $user_info, $args) {
  $user_department = ecas_get_user_department($user_info);

  if (empty($user_department['dg'])) {
    return;
  }

  $dg_id = $user_department['dg'];

  // Mapping between DG and drupal roles.
  $rules = ecas_group_sync_get_ecas_sync_rules($dg_id, 'role');
  if ($rules) {
    $roles = $user->roles;
    foreach ($rules as $rule) {
      $roles[$rule->synctype_value] = $rule->name;
    }

    $user->roles = $roles;
    user_save($user, array('roles' => $roles));
  }

  if (!module_exists('og')) {
    // If OG is disable, we can stop the process here.
    return;
  }

  // Attaching the user to the OG groups
  // and mapping between DG and og roles.
  $rules = ecas_group_sync_get_ecas_sync_rules($dg_id, 'group');
  if ($rules) {
    foreach ($rules as $rule) {
      og_group('node', $rule->synctype_value, array(
        "entity type" => "user",
        "entity" => $user,
        "field_name" => 'og_user_node',
      ));
      og_role_grant('node', $rule->synctype_value, $user->uid, $rule->synctype_value_extra);
    }
  }
}

/**
 * Gets rules to map user's dg to Drupal or OG roles.
 *
 * @param string $dg_id
 *   The user's DG identifier; e.g. DIGIT.
 * @param string $sync_type
 *   The type of roles implied in the mappung; 'role' for DG/Drupal roles
 *   mapping, 'group' for for DG/OG roles.
 *
 * @return array|bool
 *    An array of objects containing rules data; otherwise FALSE.
 */
function ecas_group_sync_get_ecas_sync_rules($dg_id, $sync_type = 'role') {
  $sync_rules = &drupal_static(__FUNCTION__);

  // Static cache.
  if (!empty($sync_rules[$sync_type . '_' . $dg_id])) {
    return $sync_rules[$sync_type . '_' . $dg_id];
  }

  // Drupal cache.
  if ($cache = cache_get('ecas_group_sync_rules')) {
    $sync_rules = $cache->data;
  }

  if (empty($sync_rules[$sync_type . '_' . $dg_id])) {
    // Initializing the array if not in the static yet.
    if (!$sync_rules) {
      $sync_rules = array();
    }

    $query = db_select('ecas_sync_mapping', 'esm');
    // Get mapping rules.
    $query->condition('synctype', $sync_type, '=');
    $query->condition('LDAPfield', 'dg', '=');
    $query->condition('LDAPfield_value', $dg_id, '=');
    $query->fields('esm');
    if ($sync_type == 'role') {
      $query->join('role', 'r', 'esm.synctype_value = r.rid');
      $query->fields('r', array('name'));
    }
    else {
      $query->join('og_role', 'ogr', 'esm.synctype_value_extra = ogr.rid');
      $query->fields('ogr', array('name'));
    }
    $sync_rules[$sync_type . '_' . $dg_id] = $query->execute()->fetchAll();

    cache_set('ecas_group_sync_rules', $sync_rules, 'cache', CACHE_TEMPORARY);
  }

  return $sync_rules[$sync_type . '_' . $dg_id];
}

/**
 * Get the list of DG from the LDAP.
 *
 * @return array
 *   The list of DGs to use.
 */
function ecas_group_sync_get_dg() {
  if (($cache = cache_get('list_dg', 'cache')) && !empty($cache->data)) {
    $list_dg = $cache->data;
  }
  else {
    $result = getLdapEntries(_ecas_import_users_groups_dn(), 'cn=DG_*', array('cn'));
    $list_dg = array();
    for ($i = 0; $i < $result['count']; ++$i) {
      if ($result[$i]['cn'][0] != '') {
        $array_dg = explode('_', $result[$i]['cn'][0]);
        $list_dg[$array_dg[1]] = $array_dg[1];
      }
    }
    ksort($list_dg);

    cache_clear_all('list_dg', 'cache', TRUE);
    cache_set('list_dg', $list_dg, 'cache');
  }

  return $list_dg;
}
