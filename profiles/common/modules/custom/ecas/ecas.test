<?php
/**
 * @file
 * Tests for ecas.module.
 */

/**
 * Test the administration pages.
 */
class EcasAdminSettingsTest extends DrupalWebTestCase {

  /**
   * A test web user.
   *
   * @var object
   */
  protected $webUser;

  /**
   * A test administrator user.
   *
   * @var object
   */
  protected $adminUser;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Core admin settings',
      'description' => 'Test the admin pages of ECAS core module. Make sure you have defined the correct settings in the ecas.constants.inc file to ensure correct testing on a ECAS and LDAP server.',
      'group' => 'ECAS',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('ecas'));

    $this->webUser = $this->drupalCreateUser(array(
      'create article content',
      'create page content',
    ));

    $this->adminUser = $this->drupalCreateUser(array(
      'bypass node access',
      'administer nodes',
      'administer ecas',
    ));
  }

  /**
   * Try to access the pages with the web user and admin user.
   */
  public function testMenuAccess() {
    $this->drupalLogin($this->webUser);
    $this->drupalGet('admin/config/ecas');
    $this->assertNoResponse(200, 'User without "administer ecas" permission does not have access to the ECAS administration pages');

    $this->drupalGet('<front>');

    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas');
    $this->assertResponse(200, 'User with "administer ecas" permission has access to the ECAS administration pages');
  }

  /**
   * Verify the defaults are set.
   */
  public function testDefaultSettings() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas/settings');

    $this->assertFieldById('edit-ecas-assurance-level', ECAS_DEFAULT_ASSURANCE_LEVEL);
    $this->assertFieldById('edit-ecas-domain', ECAS_DEFAULT_DOMAIN);
    $this->assertFieldById('edit-ecas-account-request-url', ECAS_DEFAULT_ACCOUNT_REQUEST_URL);
    $this->assertFieldById('edit-ecas-change-password-url', ECAS_DEFAULT_CHANGE_PASSWORD_URL);
    $this->assertNoFieldChecked('edit-ecas-phpcas-debug');
    $this->assertFieldChecked('edit-ecas-account-option-1');
    $this->assertNoFieldChecked('edit-ecas-account-option-0');
    $this->assertFieldById('edit-ecas-login-message', ECAS_DEFAULT_LOGIN_MESSAGE);
    $this->assertFieldById('edit-ecas-warning-message', ECAS_DEFAULT_WARNING_MESSAGE);
    $this->assertFieldChecked('edit-ecas-update-mail-address');
    $this->assertFieldById('edit-ecas-default-mail-address', ECAS_DEFAULT_MAIL_ADDRESS);
    $this->assertNoFieldChecked('edit-ecas-profile-core-enabled');
    $this->assertFieldById('edit-ecas-profile-core-firstname-field', ECAS_DEFAULT_PROFILE_FIRSTNAME_FIELD);
    $this->assertFieldById('edit-ecas-profile-core-lastname-field', ECAS_DEFAULT_PROFILE_LASTNAME_FIELD);
    $this->assertFieldById('edit-ecas-profile-core-ecas-email-field', ECAS_DEFAULT_PROFILE_ECAS_MAIL_FIELD);
    $this->assertNoFieldChecked('edit-ecas-use-shared-fpfis');
  }

  /**
   * Verify settings are saved correctly.
   */
  public function testSavingSettings() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas/settings');

    $edit = array(
      'ecas_assurance_level' => 'TOP',
      'ecas_domain' => "eu.europa.ec",
      'ecas_account_request_url' => 'http://test.account.url',
      'ecas_change_password_url' => 'http://test.password.url',
      'ecas_phpcas_debug' => '1',
      'ecas_account_option' => '0',
      'ecas_login_message' => 'test log message',
      'ecas_warning_message' => 'test warning message',
      'ecas_update_mail_address' => FALSE,
      'ecas_default_mail_address' => 'test@default.email.be',
      'ecas_profile_core_enabled' => '1',
      'ecas_profile_core_firstname_field' => 'test_firstname',
      'ecas_profile_core_lastname_field' => 'test_lastname',
      'ecas_profile_core_ecas_email_field' => 'test_email',
      'ecas_use_shared_fpfis' => '1',
      // This causes exceptions in the test because the ecas.inc file is no
      // longer loaded. Reason is the menu has been build up already and is
      // looking for the access callbacks. These are no longer defined (since
      // the ecas.inc file isn't loaded). A bug in menu.inc causes the
      // item['access'] property to being not set, which later on causes an
      // exception in core. Once the fix for this core bug is added to core,
      // this test will run without exceptions.
    );
    $this->drupalPost(NULL, $edit, 'Save configuration');

    // Check the values are stored correctly.
    $this->assertFieldById('edit-ecas-assurance-level', 'TOP');
    $this->assertFieldById('edit-ecas-domain', "eu.europa.ec");
    $this->assertFieldById('edit-ecas-account-request-url', 'http://test.account.url');
    $this->assertFieldById('edit-ecas-change-password-url', 'http://test.password.url');
    $this->assertFieldChecked('edit-ecas-phpcas-debug');
    $this->assertNoFieldChecked('edit-ecas-account-option-1');
    $this->assertFieldChecked('edit-ecas-account-option-0');
    $this->assertFieldById('edit-ecas-login-message', 'test log message');
    $this->assertFieldById('edit-ecas-warning-message', 'test warning message');
    $this->assertNoFieldChecked('edit-ecas-update-mail-address');
    $this->assertFieldById('edit-ecas-default-mail-address', 'test@default.email.be');
    $this->assertFieldChecked('edit-ecas-profile-core-enabled');
    $this->assertFieldById('edit-ecas-profile-core-firstname-field', 'test_firstname');
    $this->assertFieldById('edit-ecas-profile-core-lastname-field', 'test_lastname');
    $this->assertFieldById('edit-ecas-profile-core-ecas-email-field', 'test_email');
    $this->assertFieldChecked('edit-ecas-use-shared-fpfis');
  }

}

/**
 * Test the functionality pages.
 */
class EcasFunctionalTest extends DrupalWebTestCase {

  /**
   * A test web user.
   *
   * @var object
   */
  protected $webUser;

  /**
   * A test ECAS user.
   *
   * @var object
   */
  protected $ecasUser;

  /**
   * A test administrator user.
   *
   * @var object
   */
  protected $adminUser;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Core functionality',
      'description' => 'Test the functionality of ECAS core module. Make sure you have defined the correct settings in the ecas.constants.inc file to ensure correct testing on a ECAS and LDAP server.',
      'group' => 'ECAS',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('ecas'));

    $this->webUser = $this->drupalCreateUser(array(
      'create article content',
      'create page content',
    ));
    $this->ecasUser = $this->drupalCreateUser(array(
      'create article content',
      'create page content',
    ));
    db_insert('authmap')
      ->fields(array(
        'authname' => $this->ecasUser->name,
        'uid' => $this->ecasUser->uid,
        'module' => 'ecas',
      ))
      ->execute();

    $this->adminUser = $this->drupalCreateUser(array(
      'bypass node access',
      'administer nodes',
      'administer ecas',
      'administer blocks',
    ));
  }

  /**
   * Try to set the EU Login (former ECAS) block.
   */
  public function testEcasBlock() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/structure/block');

    $this->assertText(t('EU Login'), 'The EU Login block was found.');

    $edit = array(
      'blocks[ecas_ecas][region]' => 'sidebar_first',
      'blocks[user_login][region]' => '-1',
    );
    $this->drupalPost(NULL, $edit, 'Save blocks');

    $this->drupalGet('<front>');
    $this->assertText('User Login', 'Authenticated admin user: The ECAS login block is available in the sidebar.');
    $this->assertLinkByHref('ecaslogout', 0, 'Authenticated admin user: The ECAS block displays the ecas logout link.');

    $this->drupalLogout();
    $this->assertText('User Login', 'Anonymous user: The ECAS login block is available in the sidebar.');
    $this->assertLinkByHref('ecas', 0, 'Anonymous user: The ECAS block displays the ecas login link.');

    $this->drupalLogin($this->webUser);
    $this->assertText('User Login', 'Authenticated web user: The ECAS login block is available in the sidebar.');
    $this->assertLinkByHref('ecaslogout', 0, 'Authenticated web user: The ECAS block displays the ecas logout link.');
  }

  /**
   * See if ECAS redirects to the ECAS server.
   */
  public function testEcasLogin() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('ecas');
    $this->assertResponse(403);

    $this->drupalLogout();
    $this->drupalGet('ecas');
    $this->assertResponse(200);
    $this->drupalLogin($this->webUser);
    $this->drupalGet('user/' . ($this->webUser->uid) . '/edit');

    $this->assertField('edit-current-pass', 'Current password field is present.');
    $this->assertField('edit-pass-pass1', 'Password field is present');
    $this->assertField('edit-pass-pass2', 'Password confirm field is present.');
    $this->assertFieldEnabled('edit-mail');
    $this->assertNoText(t('This account is managed by EU Login. Its password can be changed using'), 'The user edit form is not changed by the ECAS module for a normal drupal user.');
    $this->drupalLogin($this->ecasUser);
    $this->drupalGet('user/' . ($this->ecasUser->uid) . '/edit');
    $this->assertNoField('edit-current-pass', 'Current password field is hidden.');
    $this->assertNoField('edit-pass-pass1', 'Password field is hidden.');
    $this->assertNoField('edit-pass-pass2', 'Password confirm field is hidden.');
    $this->assertFieldDisabled('edit-mail');
    $this->assertText(t('This account is managed by EU Login. Its password can be changed using'), 'The user edit form was succesfully altered by the ECAS module for ECAS users.');
  }

  /**
   * Checks if the field with the given CSS ID is disabled.
   *
   * @param string $id
   *   The CSS ID of the field to check.
   * @param string $message
   *   The message to display along with the assertion.
   *
   * @return bool
   *   TRUE if the field is disabled, FALSE otherwise.
   */
  protected function assertFieldDisabled($id, $message = '') {
    $elements = $this->xpath('//input[@id=:id]', array(':id' => $id));
    return $this->assertTrue(isset($elements[0]) && isset($elements[0]['disabled']), $message ? $message : t('Checkbox field @id is disabled.', array('@id' => $id)), t('Browser'));
  }

  /**
   * Checks if the field with the given CSS ID is enabled.
   *
   * @param string $id
   *   The CSS ID of the field to check.
   * @param string $message
   *   The message to display along with the assertion.
   *
   * @return bool
   *   TRUE if the field is enabled, FALSE otherwise.
   */
  protected function assertFieldEnabled($id, $message = '') {
    $elements = $this->xpath('//input[@id=:id]', array(':id' => $id));
    return $this->assertTrue(isset($elements[0]) && !isset($elements[0]['disabled']), $message ? $message : t('Checkbox field @id is enabled.', array('@id' => $id)), t('Browser'));
  }

  /**
   * Tests that Ecaslogout is not accessible for normal Drupal users.
   */
  public function testEcasLogout() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('ecaslogout');
    $this->assertResponse(403);
    $this->drupalLogout();

    $this->drupalLogin($this->webUser);
    $this->drupalGet('ecaslogout');
    $this->assertResponse(403);
  }

}

/**
 * Test the functionality pages.
 */
class EcasAuthenticationTest extends DrupalWebTestCase {

  /**
   * A test web user.
   *
   * @var object
   */
  protected $webUser;

  /**
   * A test ECAS user.
   *
   * @var object
   */
  protected $ecasUser;

  /**
   * A test administrator user.
   *
   * @var object
   */
  protected $adminUser;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Core authentication',
      'description' => 'Test the authentication functionality of ECAS core module. Make sure you have defined the correct settings in the ecas.constants.inc file to ensure correct testing on a ECAS and LDAP server.',
      'group' => 'ECAS',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('ecas'));

    $this->adminUser = $this->drupalCreateUser(array(
      'bypass node access',
      'administer nodes',
      'administer ecas',
      'administer blocks',
    ));
  }

  /**
   * Verify pages are protected correctly.
   */
  public function testExcludingPagesSettings() {
    global $base_url;

    // A: First test excluding no pages from authentication. This means all
    // pages need authentication.
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas');
    $edit = array(
      'ecas_pages_method' => ECAS_LOGIN_EXLUDE_PAGES,
      'ecas_pages' => '',
    );
    $this->drupalPost(NULL, $edit, 'Save configuration');

    // Goto the front page (=protected).
    $this->drupalGet('<front>');
    $this->assertUrl('<front>', array(), 'Authenticated users are not redirected.');

    // Anonymous.
    $this->drupalLogout();

    // Goto the front page (=protected).
    $this->drupalGet('<front>');
    $port = (is_numeric(constant('FPFIS_ECAS_PORT')) ? ':' . FPFIS_ECAS_PORT : '');
    $this->assertUrl('https://' . FPFIS_ECAS_URL . $port . FPFIS_ECAS_URI . '/login?service=' . rawurlencode($base_url . '/'), array(), 'Authentication is required and user is redirected to the ECAS login.');

    // B: Test excluding the user pages from authentication This means front
    // page needs authentication, user pages don't.
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas');
    $edit = array(
      'ecas_pages_method' => ECAS_LOGIN_EXLUDE_PAGES,
      'ecas_pages' => '<front>',
    );
    $this->drupalPost(NULL, $edit, 'Save configuration');

    // AS ADMIN Goto the front page (=not protected).
    $this->drupalGet('<front>');
    $this->assertUrl('<front>', array(), 'Authenticated users are not redirected.');

    // Anonymous.
    $this->drupalLogout();

    // Goto the front page (=not protected).
    $this->drupalGet('<front>');
    $this->assertUrl('<front>', array(), 'Anonymous user is not redirected, because the page is un-protected.');
  }

  /**
   * Verify pages are protected correctly.
   */
  public function testIncludingPagesSettings() {
    global $base_url;

    // A: First test including no pages for authentication This means no page
    // requires authentication.
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas');
    $edit = array(
      'ecas_pages_method' => ECAS_LOGIN_INCLUDE_PAGES,
      'ecas_pages' => '',
    );
    $this->drupalPost(NULL, $edit, 'Save configuration');

    // Goto the front page (=protected).
    $this->drupalGet('<front>');
    $this->assertUrl('<front>', array(), 'Authenticated users are not redirected.');

    // Anonymous.
    $this->drupalLogout();

    // Goto the front page (=protected).
    $this->drupalGet('<front>');
    $this->assertUrl('<front>', array(), 'Anonymous user is not redirected, because the page is un-protected.');

    // B: Test excluding the user pages from authentication. This means front
    // page needs authentication.
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas');
    $edit = array(
      'ecas_pages_method' => ECAS_LOGIN_INCLUDE_PAGES,
      'ecas_pages' => '<front>',
    );
    $this->drupalPost(NULL, $edit, 'Save configuration');

    // AS ADMIN Goto the front page (=not protected).
    $this->drupalGet('<front>');
    $this->assertUrl('<front>', array(), 'Authenticated users are not redirected.');

    // Anonymous.
    $this->drupalLogout();

    // Goto the front page (=not protected).
    $this->drupalGet('<front>');
    $port = (is_numeric(constant('FPFIS_ECAS_PORT')) ? ':' . FPFIS_ECAS_PORT : '');
    $this->assertUrl('https://' . FPFIS_ECAS_URL . $port . FPFIS_ECAS_URI . '/login?service=' . rawurlencode($base_url . '/'), array(), 'Authentication is required and user is redirected to the ECAS login.');
  }

}
