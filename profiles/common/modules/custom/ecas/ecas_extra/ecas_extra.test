<?php

/**
 * @file
 * Tests for ecas_extra.module.
 */

define('ACTIVE', 1);
define('DENIED', 1);
define('INACTIVE', 0);
define('ALLOWED', 0);

/**
 * Test the administration pages.
 */
class EcasExtraAdminSettingsTest extends DrupalWebTestCase {

  /**
   * A test web user.
   *
   * @var object
   */
  protected $webUser;

  /**
   * A test administrator user.
   *
   * @var object
   */
  protected $adminUser;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Extra admin settings',
      'description' => 'Test the admin pages of ECAS extra module.',
      'group' => 'ECAS',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('ecas_extra'));

    $this->webUser = $this->drupalCreateUser(array(
      'create article content',
      'create page content',
    ));

    $this->adminUser = $this->drupalCreateUser(array(
      'bypass node access',
      'administer nodes',
      'administer ecas',
      'administer users',
    ));
  }

  /**
   * Try to access the pages with the web user and admin user.
   */
  public function testMenuAccess() {
    $this->drupalLogin($this->webUser);
    $this->drupalGet('admin/config/ecas/extra');
    $this->assertNoResponse(200, 'User without "administer ecas" permission does not have access to the ECAS Extra administration pages');

    $this->drupalGet('admin/people/blocked_accounts');
    $this->assertNoResponse(200, 'User without "administer ecas" permission does not have access to the Blocked Accounts pages');

    $this->drupalGet('<front>');
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas/ecas_extra');
    $this->assertResponse(200, 'User with "administer ecas" permission has access to the ECAS Extra administration pages');
    $this->drupalGet('admin/people/blocked_accounts');
    $this->assertResponse(200, 'User with "administer ecas" permission has access to the Blocked Accounts pages');
  }

  /**
   * Verify settings are saved correctly.
   */
  public function testSavingSettings() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/config/ecas/extra');

    $edit = array(
      'ecas_extra_deny_action_subject' => 'test-subject',
      'ecas_extra_deny_action_mail' => 'test-mail',
    );
    $this->drupalPost(NULL, $edit, 'Save configuration');

    // Check the values are stored correctly.
    $this->assertFieldById('edit-ecas-extra-deny-action-subject', 'test-subject');
    $this->assertFieldById('edit-ecas-extra-deny-action-mail', 'test-mail');
  }

}

/**
 * Test the functionality pages.
 */
class EcasExtraFunctionalTest extends DrupalWebTestCase {

  /**
   * An activated test web user account for which the creation was allowed.
   *
   * @var object
   */
  protected $webUserActiveAllowed;

  /**
   * An activated test web user account for which the creation was denied.
   *
   * @var object
   */
  protected $webUserActiveDenied;

  /**
   * An inactive test web user account for which the creation was allowed.
   *
   * @var object
   */
  protected $webUserInactiveAllowed;

  /**
   * An inactive test web user account for which the creation was denied.
   *
   * @var object
   */
  protected $webUserInactiveDenied;

  /**
   * An activated test ECAS user account for which the creation was allowed.
   *
   * @var object
   */
  protected $ecasUserActiveAllowed;

  /**
   * An activated test ECAS user account for which the creation was denied.
   *
   * @var object
   */
  protected $ecasUserActiveDenied;

  /**
   * An inactive test ECAS user account for which the creation was allowed.
   *
   * @var object
   */
  protected $ecasUserInactiveAllowed;

  /**
   * An inactive test ECAS user account for which the creation was denied.
   *
   * @var object
   */
  protected $ecasUserInactiveDenied;

  /**
   * A test administrator user.
   *
   * @var object
   */
  protected $adminUser;

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Extra functionality',
      'description' => 'Test the functionality of ECAS Extra module.',
      'group' => 'ECAS',
    );
  }

  /**
   * Creates a user and returns it.
   *
   * @param string $rid
   *   A single role to assign to the user.
   * @param string $name
   *   The user name.
   * @param bool $status
   *   Whether or not the user account is activated.
   * @param bool $denied
   *   Wheter or not the creation of the user account should be denied.
   * @param bool $ecas
   *   Whether or not to create an ECAS record for the user.
   *
   * @return bool|\stdClass
   *   The user object, or FALSE if the user could not be created.
   */
  protected function createUser($rid, $name, $status, $denied, $ecas = FALSE) {
    $edit = array();
    $edit['name'] = $name;
    $edit['mail'] = $edit['name'] . '@example.com';
    $edit['pass'] = user_password();
    $edit['status'] = $status;
    if ($rid) {
      $edit['roles'] = array($rid => $rid);
    }

    $account = user_save(drupal_anonymous_user(), $edit);

    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    if ($denied == DENIED) {
      ecas_extra_deny_account_action($account, NULL);
    }

    if ($ecas) {
      db_insert('authmap')
        ->fields(array(
          'authname' => $name,
          'uid' => $account->uid,
          'module' => 'ecas',
        ))
        ->execute();
    }
    return $account;
  }


  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('ecas_extra'));

    // Create some standard permissions.
    $rid = $this->drupalCreateRole(array(
      'create article content',
      'create page content',
    ));

    // Create some users.
    $this->webUserActiveAllowed = $this->createUser($rid, 'webUserActiveAllowed', ACTIVE, ALLOWED);
    $this->webUserActiveDenied = $this->createUser($rid, 'webUserActiveDenied', ACTIVE, DENIED);
    $this->webUserInactiveAllowed = $this->createUser($rid, 'webUserInactiveAllowed', INACTIVE, ALLOWED);
    $this->webUserInactiveDenied = $this->createUser($rid, 'webUserInactiveDenied', INACTIVE, DENIED);
    $this->ecasUserActiveAllowed = $this->createUser($rid, 'ecasUserActiveAllowed', ACTIVE, ALLOWED, TRUE);
    $this->ecasUserActiveDenied = $this->createUser($rid, 'ecasUserActiveDenied', ACTIVE, DENIED, TRUE);
    $this->ecasUserInactiveAllowed = $this->createUser($rid, 'ecasUserInactiveAllowed', INACTIVE, ALLOWED, TRUE);
    $this->ecasUserInactiveDenied = $this->createUser($rid, 'ecasUserInactiveDenied', INACTIVE, DENIED, TRUE);

    $this->adminUser = $this->drupalCreateUser(array(
      'administer site configuration',
      'bypass node access',
      'administer nodes',
      'administer ecas',
      'administer users',
    ));
  }

  /**
   * Test the exposed filter by the blocked_accounts view (page).
   */
  public function testBlockedPeopleViewFilter() {
    $this->drupalLogin($this->adminUser);

    // List all.
    $this->drupalGet('admin/people/blocked_accounts', array(
      'query' => array(
        'uid' => '',
        'mail' => '',
        'user_denied' => 'All',
        'status' => 'All',
      ),
    ));

    $this->assertText('webUserActiveAllowed', 'User webUserActiveAllowed was listed');
    $this->assertText('webUserActiveDenied', 'User webUserActiveDenied was listed');
    $this->assertText('webUserInactiveAllowed', 'User webUserInactiveAllowed was listed');
    $this->assertText('webUserInactiveDenied', 'User webUserInactiveDenied was listed');
    $this->assertText('ecasUserActiveAllowed', 'User ecasUserActiveAllowed was listed');
    $this->assertText('ecasUserActiveDenied', 'User ecasUserActiveDenied was listed');
    $this->assertText('ecasUserInactiveAllowed', 'User ecasUserInactiveAllowed was listed');
    $this->assertText('ecasUserInactiveDenied', 'User ecasUserInactiveDenied was listed');

    // List inactive.
    $this->drupalGet('admin/people/blocked_accounts', array(
      'query' => array(
        'uid' => '',
        'mail' => '',
        'user_denied' => 'All',
        'status' => '0',
      ),
    ));

    $this->assertText('webUserInactiveAllowed', 'User webUserInactiveAllowed was listed');
    $this->assertText('webUserInactiveDenied', 'User webUserInactiveDenied was listed');
    $this->assertText('ecasUserInactiveAllowed', 'User ecasUserInactiveAllowed was listed');
    $this->assertText('ecasUserInactiveDenied', 'User ecasUserInactiveDenied was listed');

    $this->assertNoText('webUserActiveAllowed', 'User webUserActiveAllowed was not listed');
    $this->assertNoText('webUserActiveDenied', 'User webUserActiveDenied was not listed');
    $this->assertNoText('ecasUserActiveAllowed', 'User ecasUserActiveAllowed was not listed');
    $this->assertNoText('ecasUserActiveDenied', 'User ecasUserActiveDenied was not listed');

    // List inactive, denied.
    $this->drupalGet('admin/people/blocked_accounts', array(
      'query' => array(
        'uid' => '',
        'mail' => '',
        'user_denied' => '0',
        'status' => '0',
      ),
    ));

    $this->assertText('webUserInactiveDenied', 'User webUserInactiveDenied was listed');
    $this->assertText('ecasUserInactiveDenied', 'User ecasUserInactiveDenied was listed');

    $this->assertNoText('webUserInactiveAllowed', 'User webUserInactiveAllowed was not listed');
    $this->assertNoText('webUserActiveAllowed', 'User webUserActiveAllowed was not listed');
    $this->assertNoText('webUserActiveDenied', 'User webUserActiveDenied was not listed');
    $this->assertNoText('ecasUserInactiveAllowed', 'User ecasUserInactiveAllowed was not listed');
    $this->assertNoText('ecasUserActiveAllowed', 'User ecasUserActiveAllowed was not listed');
    $this->assertNoText('ecasUserActiveDenied', 'User ecasUserActiveDenied was not listed');

    $this->drupalGet('admin/people/blocked_accounts', array(
      'query' => array(
        'uid' => 'ecasUserInactiveAllowed',
        'mail' => '',
        'user_denied' => 'All',
        'status' => 'All',
      ),
    ));

    $this->assertText('ecasUserInactiveAllowed', 'User ecasUserInactiveAllowed was listed');

    $this->assertNoText('webUserInactiveDenied', 'User webUserInactiveDenied was not listed');
    $this->assertNoText('webUserInactiveAllowed', 'User webUserInactiveAllowed was not listed');
    $this->assertNoText('webUserActiveAllowed', 'User webUserActiveAllowed was not listed');
    $this->assertNoText('webUserActiveDenied', 'User webUserActiveDenied was not listed');
    $this->assertNoText('ecasUserInactiveDenied', 'User ecasUserInactiveDenied was not listed');
    $this->assertNoText('ecasUserActiveAllowed', 'User ecasUserActiveAllowed was not listed');
    $this->assertNoText('ecasUserActiveDenied', 'User ecasUserActiveDenied was not listed');

    // Filter on email.
    $this->drupalGet('admin/people/blocked_accounts', array(
      'query' => array(
        'uid' => '',
        'mail' => $this->ecasUserInactiveDenied->mail,
        'user_denied' => '0',
        'status' => '0',
      ),
    ));

    $this->assertText('ecasUserInactiveDenied', 'User ecasUserInactiveDenied was listed');

    $this->assertNoText('webUserInactiveDenied', 'User webUserInactiveDenied was not listed');
    $this->assertNoText('webUserInactiveAllowed', 'User webUserInactiveAllowed was not listed');
    $this->assertNoText('webUserActiveAllowed', 'User webUserActiveAllowed was not listed');
    $this->assertNoText('webUserActiveDenied', 'User webUserActiveDenied was not listed');
    $this->assertNoText('ecasUserInactiveAllowed', 'User ecasUserInactiveAllowed was not listed');
    $this->assertNoText('ecasUserActiveAllowed', 'User ecasUserActiveAllowed was not listed');
    $this->assertNoText('ecasUserActiveDenied', 'User ecasUserActiveDenied was not listed');
  }

  /**
   * Test the bulk operation action for blocking a user.
   */
  public function testBlockedPeopleBulkOperation() {
    $this->drupalLogin($this->adminUser);

    $this->drupalGet('admin/people/blocked_accounts', array(
      'query' => array(
        'uid' => '',
        'mail' => '',
        'user_denied' => '1',
        'status' => 'All',
      ),
    ));

    $this->assertText('webUserActiveAllowed', 'User webUserActiveAllowed was listed');
    $this->assertText('webUserInactiveAllowed', 'User webUserInactiveAllowed was listed');
    $this->assertText('ecasUserActiveAllowed', 'User ecasUserActiveAllowed was listed');
    $this->assertText('ecasUserInactiveAllowed', 'User ecasUserInactiveAllowed listed');

    $this->assertNoText('webUserActiveDenied', 'User webUserActiveDenied was not listed');
    $this->assertNoText('webUserInactiveDenied', 'User webUserInactiveDenied was not listed');
    $this->assertNoText('ecasUserActiveDenied', 'User ecasUserActiveDenied was not listed');
    $this->assertNoText('ecasUserInactiveDenied', 'User ecasUserInactiveDenied was not listed');

    // Block all web users.
    $edit = array(
      'operation' => 'action::ecas_extra_deny_account_action',
      'views_bulk_operations[2]' => '2',
      'views_bulk_operations[3]' => '4',
    );
    $this->drupalPost(NULL, $edit, 'Execute', array(), array(), 'views-form-blocked-accounts-page-1');

    $this->assertText(t('You selected the following'), 'Confirm page for deny action');
    $this->assertText('webUserActiveAllowed', 'User ecasUserActiveAllowed listed');
    $this->assertText('webUserInactiveAllowed', 'User ecasUserInactiveAllowed listed');

    $edit = array();
    $this->drupalPost(NULL, $edit, 'Confirm');

    $this->assertText(t('Performed Deny the activation of a user account. on 2 items.'), 'Performed Deny the activation of a user account. on 2 items.');

    $this->assertText('ecasUserActiveAllowed', 'User ecasUserActiveAllowed was listed');
    $this->assertText('ecasUserInactiveAllowed', 'User ecasUserInactiveAllowed was listed');

    $this->assertNoText('webUserActiveAllowed', 'User webUserActiveAllowed was not listed');
    $this->assertNoText('webUserInactiveAllowed', 'User webUserInactiveAllowed was not listed');

    $this->assertNoText('webUserActiveDenied', 'User webUserActiveDenied was not listed');
    $this->assertNoText('webUserInactiveDenied', 'User webUserInactiveDenied was not listed');
    $this->assertNoText('ecasUserActiveDenied', 'User ecasUserActiveDenied was not listed');
    $this->assertNoText('ecasUserInactiveDenied', 'User ecasUserInactiveDenied was not listed');
  }

}
