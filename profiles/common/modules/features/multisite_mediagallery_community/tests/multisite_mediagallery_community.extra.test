<?php

/**
 * @file
 * Tests for mediagallery_community feature.
 *
 * ECWeb MULTISITE Feature Test.
 */

/**
 * Define base class for testing the Multisite Media Gallery Community feature.
 */
class MultisiteMediaGalleryCommunityFeatureTest extends DrupalWebTestCase {
  protected $profile = 'multisite_drupal_communities';
  protected $privilegedUser;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Multisite Media Gallery Community feature test',
      'description' => 'Test the Multisite Media Gallery Community feature to ensure it works as intended.',
      'group' => 'Multisite Feature Test',
    );
  }

  /**
   * Configure the environment, enable the required modules.
   */
  public function setUp() {
    parent::setUp();

    // Login a user that has access to the content sync server admin settings.
    $this->privilegedUser = $this->drupalCreateUserWithRole("administrator");
    $this->drupalLogin($this->privilegedUser);
  }

  /**
   * Create a test community and check it.
   */
  public function testCommunityCreate() {
    module_enable(array("multisite_mediagallery_community"));

    // Checkout there is a content type called gallerymedia.
    $node_type = node_type_get_type('gallerymedia');
    $this->assertTrue($node_type, 'There is a Media Gallery content type.', 'API');

    // Checkout gallerymedia has a body field.
    $body = field_info_instance('node', 'body', 'gallerymedia');
    $this->assertTrue($body, 'Media Gallery content type has a body field.', 'API');

    // Checkout gallerymedia has a picture upload field.
    $picture = field_info_instance('node', 'field_picture_upload', 'gallerymedia');
    $this->assertTrue($picture, 'Media Gallery content type has a Picture Upload field.', 'API');

    // Checkout gallerymedia has a video upload field.
    $video = field_info_instance('node', 'field_video_upload', 'gallerymedia');
    $this->assertTrue($video, 'Media Gallery content type has a Video Upload field.', 'API');

    // Checkout gallerymedia has a video upload field.
    $visibility = field_info_instance('node', 'group_content_access', 'gallerymedia');
    $this->assertTrue($visibility, 'Media Gallery content type has a Group content visibility field.', 'API');

    // Checkout gallerymedia has a video upload field.
    $audience = field_info_instance('node', 'og_group_ref', 'gallerymedia');
    $this->assertTrue($audience, 'Media Gallery content type has a Groups audience field.', 'API');

    // Create Community 1.
    $settings = array(
      'type' => 'community',
      'title' => 'Community 1',
      'body' => array(LANGUAGE_NONE => array(array('Community body'))),
      'moderate' => 1,
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($settings);
    $this->drupalGet('community/community-1');
    $this->assertRaw('Community 1', t('Community 1 created.'));
    $this->assertTrue($node, t('Node ID @nid is a group.', array('@nid' => $node->nid)));

    $this->drupalGet('node/add/gallerymedia');
    $field = array();
    $field[LANGUAGE_NONE][0]['target_id'] = $node->nid;

    $settings = array(
      'type' => 'gallerymedia',
      'title' => 'Test Gallery 1',
      'body' => array(LANGUAGE_NONE => array(array('Gallery body'))),
      'og_group_ref' => $field,
    );
    $node = $this->drupalCreateNode($settings);
    $this->verbose('news Node created: ' . print_r($node, TRUE));

    // Access Gallery 1 page.
    $this->drupalGet('community/community-1/gallerymedia/test-gallery-1');
    $this->assertResponse(200);

    $this->drupalGet('node/add/gallerymedia');
    $field = array();
    $field[LANGUAGE_NONE][0]['target_id'] = $node->nid;

    $settings = array(
      'type' => 'gallerymedia',
      'title' => 'Test Gallery 2',
      'body' => array(LANGUAGE_NONE => array(array('Gallery body'))),
      'og_group_ref' => $field,
    );
    $node = $this->drupalCreateNode($settings);
    $this->verbose('news Node created: ' . print_r($node, TRUE));

    // Access Gallery 2 page.
    $this->drupalGet('community/community-1/gallerymedia/test-gallery-2');
    $this->assertResponse(200);

    // Create Community 2.
    $settings = array(
      'type' => 'community',
      'title' => 'Community 2',
      'body' => array(LANGUAGE_NONE => array(array('Community body'))),
      'moderate' => 1,
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($settings);
    $this->drupalGet('community/community-2');
    $this->assertRaw('Community 2', t('Community 2 created.'));
    $this->assertNoText('Test Gallery 1', t('Community 2 has not access to "Test Gallery 1".'));
    $this->assertTrue($node, t('Node ID @nid is a group.', array('@nid' => $node->nid)));

    $this->drupalGet('node/add/gallerymedia');
    $field = array();
    $field[LANGUAGE_NONE][0]['target_id'] = $node->nid;

    $settings = array(
      'type' => 'gallerymedia',
      'title' => 'Test Gallery 3',
      'body' => array(LANGUAGE_NONE => array(array('Gallery body'))),
      'og_group_ref' => $field,
    );
    $node = $this->drupalCreateNode($settings);
    $this->verbose('news Node created: ' . print_r($node, TRUE));

    // Access Gallery 3 page.
    $this->drupalGet('community/community-2/gallerymedia/test-gallery-3');
    $this->assertResponse(200);
  }

  /**
   * Creates a user with the given role.
   */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }

}
