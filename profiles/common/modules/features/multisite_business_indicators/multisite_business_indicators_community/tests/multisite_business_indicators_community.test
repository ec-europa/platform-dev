<?php

/**
 * @file
 * multisite_business_indicators_community.test
 */

/**
 * Test Business Indicators features to ensure it follows QA requirements.
 */
class MultisiteBusinessIndicatorsCommunityQAWebTestCase extends DrupalWebTestCase {
  /**
   * {@inheritdoc}
   */
  protected $profile = 'multisite_drupal_communities';

  /**
   * Returns class informations.
   */
  public static function getInfo() {
    return array(
      'name' => 'Business Indicators Community QA tests',
      'description' => 'Test Business Indicators Community features to ensure it follows QA requirements.',
      'group' => 'Multisite QA',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    if (variable_get('simpletest_use_current_db', FALSE)) {
      $this->setup = TRUE;
    }
    else {
      parent::setUp();
    }

    $this->administrator = $this->drupalCreateUserWithRole('administrator');
  }

  /**
   * {@inheritdoc}
   */
  protected function tearDown() {
    if (!variable_get('simpletest_use_current_db', FALSE)) {
      parent::tearDown();
    }
  }

  /**
   * Tests Business Indicators views.
   */
  public function testViews() {

    $this->privileged_user = $this->drupalCreateUserWithRole('administrator');
    module_disable(array('captcha'));
    $this->drupalLogin($this->privileged_user);
    module_enable(array('jiraquestions', 'image_captcha'));
    $this->drupalGet('admin/reports/business-indicators');

    // Create users.
    $users = array();
    for ($i = 0; $i < 3; $i++) {
      $users[$i] = $this->drupalCreateUser(array(
        'create page content',
        'edit any page content',
        'delete any page content',
        'access business indicators',
      ));
    }

    // Create test content.
    for ($i = 0; $i < 3; $i++) {
      $content = array();
      $content['type'] = 'page';
      $content['uid'] = $users[rand(0, 2)]->uid;
      $content['title'] = $this->randomName(16);
      $content['body'][LANGUAGE_NONE][0]['value'] = $this->randomName(64);
      $content['body'][LANGUAGE_NONE][0]['summary'] = $this->randomName(64);

      $node = $this->drupalCreateNode($content);
      $this->assert((bool) $node, 'Page "' . $node->nid . '" has been created.');
      $this->drupalCreateComment($node);
    }

    $content = array();
    $content['type'] = 'community';
    $content['uid'] = $this->privileged_user->uid;
    $content['title'] = $this->randomName(16);
    $content['body'][LANGUAGE_NONE][0]['value'] = $this->randomName(64);
    $content['body'][LANGUAGE_NONE][0]['summary'] = $this->randomName(64);

    $community = $this->drupalCreateNode($content);
    $this->assert((bool) $node, 'Community "' . $community->nid . '" has been created.');
    $this->assertEqual($community->uid, $this->privileged_user->uid, 'Community owner is privileged user ' . $community->uid);

    // Assign user to community.
    $this->privileged_user->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $community->nid;
    user_save($this->privileged_user);

    // Create test content.
    for ($i = 0; $i < 3; $i++) {
      $content = array();
      $content['type'] = 'article';
      $content['uid'] = $this->privileged_user->uid;
      $content['title'] = $this->randomName(16);
      $content['body'][LANGUAGE_NONE][0]['value'] = $this->randomName(64);
      $content['body'][LANGUAGE_NONE][0]['summary'] = $this->randomName(64);
      $content['og_group_ref'][LANGUAGE_NONE][0]['target_id'] = $community->nid;

      $image = $this->createFile('image-' . rand() . '.jpg', 'image/png');
      $content['field_image'][LANGUAGE_NONE][0] = (array) $image;

      $node = $this->drupalCreateNode($content);
      $this->assert((bool) $node, 'News "' . $node->nid . '" has been created.');
      $this->assertEqual($node->og_group_ref[LANGUAGE_NONE][0]['target_id'], $community->nid, "Community {$community->nid} assigned to node {$node->nid}");
      $this->drupalCreateComment($node);
    }

    $this->privileged_user = $this->drupalCreateUserWithRole('administrator');
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet('admin/reports/business-indicators');

    // Check all blocks are positioned on overview page.
    $info = drupal_parse_info_file(drupal_get_path('module', 'multisite_business_indicators_community') . '/multisite_business_indicators_community.info');
    foreach ($info['features']['views_view'] as $view_name) {
      $view = views_get_view($view_name, TRUE);
      foreach ($view->display as $display_id => $display) {
        if ($display->display_plugin == "block") {
          $results = views_get_view_result($view_name, $display_id);
          $this->assertTrue((bool) $results, "View '{$view_name}' display '{$display_id}' not empty");
          $view->set_display($display_id);
          $title = $view->display[$display_id]->handler->get_option('title');
          $this->assertText($title, "Block '{$title}' found on overview page.");
        }
      }
    }
  }

  /**
   * Tests comment creation.
   */
  public function drupalCreateComment($node, $comment = array()) {
    $comment += array(
      'subject' => $this->randomName(8),
      'comment' => $this->randomName(32),
      'uid' => $node->uid,
      'nid' => $node->nid,
      'node_type' => 'comment_node_' . $node->type,
      'status' => COMMENT_PUBLISHED,
      'cid' => 0,
      'pid' => 0,
    );
    $comment = (object) $comment;
    comment_save($comment);
    $this->assertTrue($comment->cid, "Successfully created comment: {$comment->cid} for node {$node->nid} ({$node->type}).");
  }

  /**
   * Create a user with a specific role.
   */
  protected function drupalCreateUserWithRole($role_name) {

    $role = user_role_load_by_name($role_name);
    $this->assertTrue(!empty($role->rid), t('User role %name loaded correctly', array('%name' => $role->name)), t('User login'));

    // Create a user assigned to that role.
    $edit           = array();
    $edit['name']   = $this->randomName();
    $edit['mail']   = $edit['name'] . '@example.com';
    $edit['pass']   = user_password();
    $edit['status'] = 1;
    $edit['roles']  = array($role->rid => $role->name);

    $account = user_save(drupal_anonymous_user(), $edit);

    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }

  /**
   * Tests file creation.
   */
  public function createFile($filepath = NULL, $mime = 'text/plain', $contents = NULL, $scheme = NULL) {
    if (!isset($filepath)) {
      // Prefix with non-latin characters to ensure that all file-related
      // tests work with international filenames.
      $filepath = 'Файл для тестирования ' . $this->randomName();
    }
    if (!isset($scheme)) {
      $scheme = file_default_scheme();
    }
    $filepath = $scheme . '://' . $filepath;

    if (!isset($contents)) {
      $contents = "file_put_contents() doesn't seem to appreciate empty strings so let's put in some data.";
    }

    file_put_contents($filepath, $contents);
    $this->assertTrue(is_file($filepath), t('The test file exists on the disk.'), 'Create test file');

    $file = new stdClass();
    $file->uri = $filepath;
    $file->filename = drupal_basename($file->uri);
    $file->filemime = $mime;
    $file->uid = 1;
    $file->timestamp = REQUEST_TIME;
    $file->filesize = filesize($file->uri);
    $file->status = 0;
    // Write the record directly rather than calling file_save() so we don't
    // invoke the hooks.
    $this->assertNotIdentical(drupal_write_record('file_managed', $file), FALSE, t('The file was added to the database.'), 'Create test file');

    return $file;
  }

}
