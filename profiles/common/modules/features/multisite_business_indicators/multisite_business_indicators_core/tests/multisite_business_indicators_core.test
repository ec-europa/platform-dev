<?php

/**
 * @file
 * multisite_business_indicators_core.test
 */

/**
 * Test Business Indicators features to ensure it follows QA requirements.
 */
class BusinessIndicatorsCoreQAWebTestCase extends DrupalWebTestCase {
  /**
   * {@inheritdoc}
   */
  protected $profile = 'multisite_drupal_communities';

  /**
   * Returns class informations.
   */
  public static function getInfo() {
    return array(
      'name' => 'Business Indicators Core QA tests',
      'description' => 'Test Business Indicators Core features to ensure it follows QA requirements.',
      'group' => 'Multisite QA',
    );
  }

  /**
   * Tests menu callback.
   */
  public function testMenuCallback() {
    $this->privileged_user = $this->drupalCreateUserWithRole('administrator');
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet('admin/reports/business-indicators');
    $this->assertText('Business Indicators', 'Overview page title displayed correctly.');
  }

  /**
   * Tests user creation.
   */
  protected function drupalCreateUserWithRole($role_name) {
    $role = user_role_load_by_name($role_name);

    // Create a user assigned to that role.
    $edit           = array();
    $edit['name']   = $this->randomName();
    $edit['mail']   = $edit['name'] . '@example.com';
    $edit['pass']   = user_password();
    $edit['status'] = 1;
    $edit['roles']  = array(
      2 => 2,
      $role->rid => $role_name,
    );

    $account = user_save(drupal_anonymous_user(), $edit);

    $options = array(
      '%role_name' => $role_name,
      '%name' => $edit['name'],
      '%pass' => $edit['pass'],
    );
    $this->assertTrue(!empty($account->uid), t('User with role %role_name created with name %name and pass %pass', $options), t('User login'));
    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }

}
