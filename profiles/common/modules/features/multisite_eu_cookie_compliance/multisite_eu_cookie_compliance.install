<?php

/**
 * @file
 * Install the feature multisite_eu_cookie_compliance.
 */

include_once 'multisite_eu_cookie_compliance.install.inc';

/**
 * Implements hook_install().
 */
function multisite_eu_cookie_compliance_install() {
  $module = 'multisite_eu_cookie_compliance';
  features_revert(array($module => array('variable')));
}

/**
 * Implements hook_uninstall().
 */
function multisite_eu_cookie_compliance_uninstall() {
  drupal_uninstall_modules(array('eu_cookie_compliance'));
}

/**
 * Implements hook_enable().
 *
 * Revert feature component.
 */
function multisite_eu_cookie_compliance_enable() {
  $popup_settings = _multisite_eu_cookie_compliance_get_eu_cookie_compliance_default_settings();
  variable_set('eu_cookie_compliance', $popup_settings);

  variable_set('eu_cookie_compliance_cookie_lifetime', 100);

  variable_set('eu_cookie_compliance_domain', '');

  // Enable the variable translation via i18n variable, if enabled.
  // Code derived from eu_cookie_compliance_update_7001().
  if (module_exists('i18n_variable')) {
    $controller = variable_realm_controller('language');
    $old_variables = $controller->getEnabledVariables();
    $old_list = variable_children($old_variables);
    $variables = array_merge($old_list, array('eu_cookie_compliance'));
    $controller->setRealmVariable('list', $variables);
  }

  // Activation message.
  drupal_set_message(t('EU Cookie Compliance feature is now active on your site.'));
}

/**
 * Implements hook_disable().
 */
function multisite_eu_cookie_compliance_disable() {
  module_disable(array('eu_cookie_compliance'));
  drupal_set_message(t('EU Cookie Compliance feature is now disabled on your site.'));
}

/**
 * NEPT-2026: Update module settings based on the new implementation.
 */
function multisite_eu_cookie_compliance_update_7001() {
  // Remove the settings related to unused languages.
  // This part is not covered by the eu_cookie_compliance update hooks.
  $languages = language_list('enabled');
  $enabled_languages_variable_names = array();
  foreach ($languages as $language) {
    $enabled_languages_variable_names[] = 'eu_cookie_compliance_' . $language->language;
  }
  $enabled_languages_variable_names += array('eu_cookie_compliance_domain', 'eu_cookie_compliance_cookie_lifetime');

  $variable_to_delete = db_select('variable', 'v')
    ->condition('name', $enabled_languages_variable_names, 'NOT IN')
    ->condition('name', '%eu_cookie_compliance_%', 'LIKE')
    ->fields(v, array('name'))
    ->execute()
    ->fetchCol();
  // If no name is retrieved, that means there is no useless variable
  // definition, and we can stop the process now.
  if (!$variable_to_delete) {
    return;
  }

  db_delete('variable')->condition('name', $variable_to_delete, 'IN')->execute();
}
