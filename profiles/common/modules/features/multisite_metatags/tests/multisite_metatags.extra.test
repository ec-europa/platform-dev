<?php

/**
 * @file
 * Tests for PROJECTFEATURE_multisite_metatags.module.
 *
 * ECWeb MULTISITE Feature Test.
 */

/**
 * Defines a base class for testing the Multisite Metatags feature.
 */
class MultisiteMetatagsFeatureTest extends DrupalWebTestCase {
  protected $webUser;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Multisite Metatags feature test',
      'description' => 'Test the Multisite Metatags feature to ensure it works as intended.',
      'group' => 'Multisite Feature Test',
    );
  }

  /**
   * Configure environment: declare modules, users, permissions...
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array(
      'multisite_metatags',
      'cce_basic_config',
      'node',
      'variable',
      'variable_realm',
    ));
  }

  /**
   * Verify that current user has no access to page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteMetatagsVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied.
    $this->drupalGet($url);
    $this->assertResponse(403, 'Expected -> Access Denied');
  }

  /**
   * Verify that current user has access to Site information page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteMetatagsVerifySiteInformationAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, 'Expected -> Access OK');
    $this->assertFieldById('edit-meta-og-image-upload', '', 'Meta OG image field found.');
    $this->assertFieldById('edit-meta-reference', '', 'Meta reference field found.');
    $this->assertFieldById('edit-meta-creator', '', 'Meta creator field found.');
  }

  /**
   * Check the access to the 'Site information' configuration page.
   */
  public function testMultisiteMetatagsSiteInformationAccess() {
    // Verify that anonymous users can't access to the Site information page.
    $this->multisiteMetatagsVerifyNoAccess('admin/config/system/site-information');

    // Create a regular user and login.
    $this->web_user = $this->drupalCreateUser();
    $this->drupalLogin($this->web_user);
    // Verify that authenticated user can't access to the Site information page.
    $this->multisiteMetatagsVerifyNoAccess('admin/config/system/site-information');

    // Create a user with permissions and login.
    $this->web_user = $this->drupalCreateUser(array('administer site configuration'));
    $this->drupalLogin($this->web_user);
    // Verify that user with permission can access to the Site information page.
    $this->multisiteMetatagsVerifySiteInformationAccess('admin/config/system/site-information');
  }

  /**
   * Function to verify that that meta fields are been succesfully installed.
   */
  public function testMultisiteMetatagsVerifyInstallationFields() {
    // Create a user with permissions and login.
    $this->web_user = $this->drupalCreateUser(array('administer content types'));
    $this->drupalLogin($this->web_user);

    // Verify that fields are been succesfully installed.
    $this->drupalGet('admin/reports/fields');
    $this->assertResponse(200, 'Expected -> Access OK');
    $this->assertText('field_meta_classification', 'field_meta_classification field has been succesfully installed.');
    $this->assertText('field_meta_description', 'field_meta_description field has been succesfully installed.');
  }

  /**
   * Configure Metatags fields in Site information.
   */
  public function testConfigureMetatags() {
    // Create a user with permissions and login.
    $this->web_user = $this->drupalCreateUser(array(
      'administer site configuration',
      'administer nodes',
      'create article content',
      'administer content types',
      'access content',
      'access administration pages',
    ));

    $this->drupalLogin($this->web_user);

    $edit = array();
    $edit['classification'] = '21000';
    $edit['files[meta_og_image]'] = drupal_get_path('module', 'multisite_metatags') . '/tests/test_ogimage.jpg';
    $edit['meta_reference'] = 'DEVCO/EUROPEAID';
    $edit['meta_creator'] = 'COMM';
    $edit['site_frontpage'] = '';
    $this->drupalPost('admin/config/system/site-information', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));
    $this->drupalGet('admin/config/system/site-information');

    $body = '<p>lorem&nbsp;ipsum linguae bla&nbsp;<img alt="" height="180" src="http://test-image.jpeg" title="" width="180"></p>';
    $this->createNode('TEST ARTICLE #1', $body);
    $this->assertText(t('Article TEST ARTICLE #1 has been created.'));
    $this->assertRaw('<meta property="og:image" content="http://test-image.jpeg"', 'OG image provided by the article body found.');

    $body = '';
    $this->createNode('TEST ARTICLE #2', $body);
    $this->assertText(t('Article TEST ARTICLE #2 has been created.'));
    $this->assertRaw('test_ogimage.jpg', 'OG image provided by default found.');
  }

  /**
   * Create content for tests.
   */
  public function createNode($title, $body) {
    $edit = array();
    $edit['title'] = $title;
    $edit['body[und][0][value]'] = $body;
    $this->drupalPost('node/add/article', $edit, t('Save'));
  }

}
