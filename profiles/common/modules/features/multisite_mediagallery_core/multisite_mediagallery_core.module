<?php
/**
 * @file
 * Code for the multisite_mediagallery_core feature.
 */

include_once 'multisite_mediagallery_core.features.inc';


/**
 * Implements hook_token_info().
 */
function multisite_mediagallery_core_token_info() {
  $info['types']['Breadcrumb_gallery'] = array(
    'name' => t('Breadcrumb_gallery'),
    'description' => t('Tokens related to Breadcrumb.'),
  );
  $info['tokens']['Breadcrumb_gallery']["gallerymedia_title"] = array(
    'name' => t("mediagallery Breadcrumb title"),
    'description' => t("The Breadcrumb title of the mediagallery."),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function multisite_mediagallery_core_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  // Tokens for e_libray_core Breadcrumb.
  if ($type == 'Breadcrumb_gallery') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'gallerymedia_title':
          $replacements[$original] = t("mediagallery");
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_preprocess_node().
 */
function multisite_mediagallery_core_preprocess_node(&$variables) {
  // Init.
  global $base_url;
  $output = '';
  $pager_size = 8;

  if ('gallerymedia' == $variables['type']) {
    // Merge photos and videos.
    if (isset($variables['field_picture_upload']) && isset($variables['field_video_upload'])) {
      $media_items = array_merge($variables['field_picture_upload'], $variables['field_video_upload']);
    }
    elseif (isset($variables['field_picture_upload'])) {
      $media_items = $variables['field_picture_upload'];
    }
    elseif (isset($variables['field_video_upload'])) {
      $media_items = $variables['field_video_upload'];
    }
    else {
      $media_items = array();
    }

    // For the rest of content types.
    // Removed as the field name is variable.
    // Sort media items by fid.
    $sorted_media_items = array();

    if ($media_items) {
      foreach ($media_items as $item) {
        if (isset($item['fid'])) {
          $sorted_media_items[$item['fid']] = $item;
        }
      }
      ksort($sorted_media_items);
    }

    // Manage pager.
    pager_default_initialize(count($sorted_media_items), $pager_size);
    $pager_page = pager_find_page();
    $sorted_media_items = array_slice($sorted_media_items, $pager_page * $pager_size, $pager_size);

    // If no pictures display empty_pic.
    if (!isset($sorted_media_items) || count($sorted_media_items) == 0) {
      $empty_pic = array(
        'type' => 'empty',
        'uri' => $base_url . '/' . path_to_theme() . '/images/empty_gallery.png',
        'filename' => t('empty gallery'),
      );

      $sorted_media_items[0] = $empty_pic;
    }

    $output .= '<div class="media_gallery row">';

    // Display media items.
    foreach ($sorted_media_items as $key => $item) {
      // Variable alias.
      if (isset($item['type']) && $item['type'] == 'empty') {
        $local_data = $item;
      }
      else {
        $local_data = $sorted_media_items[$key];
      }
      $short_name = (strlen(filter_xss($local_data['filename'])) > 35) ? substr(filter_xss($local_data['filename']), 0, 30) . '[...]' : filter_xss($local_data['filename']);

      if (isset($local_data['filemime'])) {
        $type = explode('/', $local_data['filemime']);
      }
      else {
        $type[0] = 'undefined';
      }

      $output .= '<div class="col-lg-3 col-md-3 col-sm-4 col-xs-6">';

      switch ($type[0]) {
        case 'image':
          if (!empty($local_data['uri'])) {
            $picture_square_thumbnail = image_style_url('square_thumbnail', $local_data['uri']);
            $picture_preview = image_style_url('preview', $local_data['uri']);
            $picture_original = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . str_replace('public://', '/', $local_data['uri']);
          }
          $alt_text = (!empty($local_data['field_file_image_alt_text']['und'][0]['safe_value']) ? $local_data['field_file_image_alt_text']['und'][0]['safe_value'] : filter_xss($local_data['filename']));
          $title_texte = (!empty($local_data['field_file_image_title_text']['und'][0]['safe_value']) ? $local_data['field_file_image_title_text']['und'][0]['safe_value'] : '');

          $output .= '<div id="lightbox' . $key . '" class="lightbox" style="display: none;">';
          $output .= '<img src="' . $picture_preview . '" alt="' . $alt_text . '" title="' . $title_texte . '"/>';

          if (isset($local_data['field_picture_description']['und'][0]['value'])) {
            $output .= '<p>' . filter_xss($local_data['field_picture_description']['und'][0]['value']) . '</p>';
          }

          if (!empty($tags)) {
            $output .= '<p>' . $tags . '</p>';
          }

          $output .= '<p><a href="' . $base_url . '/' . $picture_original . '" title="' . filter_xss($local_data['filename']) . '" target="_blank">' . t('View full size picture') . '</a></p>';
          $output .= '</div>';
          $output .= '<a href="#lightbox' . $key . '" class="fancybox thumbnail" rel="gallery" title="' . filter_xss($local_data['filename']) . '">';
          $output .= '<img src="' . $picture_square_thumbnail . '" alt="' . $alt_text . '" title="' . $title_texte . '" />';
          $output .= '<p class="text-center hidden-xs">' . $short_name . '</p>';
          $output .= '</a>';
          break;

        case 'video':
          // Format video upload field.
          $videos['element']['#field_type'] = 'video';
          $videos['element']['#field_name'] = 'video_upload' . $key;
          $videos['element']['#items'][$key] = $item;

          // Call preprocess function.
          cce_basic_config_preprocess_field($videos);
          $output .= $videos['videos'];

          // Unset item, to prevent duplicate.
          unset($videos['element']['#items'][$key]);
          unset($videos['videos']);
          break;

        case 'empty':
          $output .= '<div class="media_item">';
          $output .= '<img src="' . $local_data['uri'] . '" alt="' . $local_data['filename'] . '" />';
          $output .= '</div>';
          break;

        default:
          break;
      }

      $output .= '</div>';

      if ((($key + 1) % 4) == 0 || !isset($sorted_media_items[$key + 1])) {
        $output .= '<div class="clearfix visible-lg visible-md"></div>';
      }

      if ((($key + 1) % 3) == 0 || !isset($sorted_media_items[$key + 1])) {
        $output .= '<div class="clearfix visible-sm"></div>';
      }

      if ((($key + 1) % 2) == 0 || !isset($sorted_media_items[$key + 1])) {
        $output .= '<div class="clearfix visible-xs"></div>';
      }
    }

    $output .= '</div>';

    $htmlpager = theme('pager',
      array(
        'tags' => array(),
        'element' => 0,
      )
    );

    $output .= $htmlpager;

    $variables['gallerymedia_items'] = $output;
  }
}
