<?php

/**
 * @file
 * Module file of the TMGMT DGT connector cart.
 */

use Drupal\tmgmt_dgt_connector_cart\Entity\CartBundle;
use Drupal\tmgmt_dgt_connector_cart\Entity\CartItem;

// Including the custom form callback.
module_load_include('inc', 'tmgmt_dgt_connector_cart', 'includes/forms/tmgmt_dgt_connector_form_cart_bundle_items');

/**
 * Implements hook_menu().
 */
function tmgmt_dgt_connector_cart_menu() {
  $items = array();

  $items['admin/dgt_connector/cart-items-wrapper/%/%ctools_js'] = array(
    'page callback' => 'tmgmt_dgt_connector_cart_form_cart_bundle_items_wrapper',
    'page arguments' => array(3, 4),
    'access callback' => 'user_access',
    'access arguments' => array('access to the dgt connector cart'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Custom callback - Wrapper fot the CartItems entities form.
 */
function tmgmt_dgt_connector_cart_form_cart_bundle_items_wrapper($cbid, $ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Translation Bundle content.'),
    );

    $form_state['build_info']['args']['cbid'] = $cbid;

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('tmgmt_dgt_connector_form_cart_bundle_items', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    $form_state = form_state_defaults();
    $form_state['build_info']['args']['cbid'] = $cbid;
    $form = drupal_build_form('tmgmt_dgt_connector_form_cart_bundle_items', $form_state);
    return drupal_render($form);
  }
}

/**
 * Implements hook_permission().
 */
function tmgmt_dgt_connector_cart_permission() {
  return array(
    'access to the dgt connector cart' => array(
      'title' => 'Access to the DGT Connector cart',
      'description' => 'Allows to access and use the DGT Connector cart.',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function tmgmt_dgt_connector_cart_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'tmgmt_dgt_connector_cart') . '/includes/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function tmgmt_dgt_connector_cart_entity_info() {
  return array(
    'cart_bundle' => array(
      'label' => t('Cart bundle'),
      'entity class' => 'Drupal\\tmgmt_dgt_connector_cart\\Entity\\CartBundle',
      'controller class' => 'EntityAPIController',
      'views controller class' => 'Drupal\\tmgmt_dgt_connector_cart\\EntityViewsController\\CartBundleViewsController',
      'base table' => 'cart_bundle',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'cbid',
        'label' => 'cbid',
      ),
      'module' => 'tmgmt_dgt_connector_cart',
      'metadata controller class' => 'Drupal\\tmgmt_dgt_connector_cart\\Metadata\\CartBundleMetadataController',
      'access callback' => 'tmgmt_dgt_connector_cart_bundle_access',
      'admin ui' => array(
        'path' => 'admin/config/system/dgt_connector/cart_bundles',
        'controller class' => 'Drupal\\tmgmt_dgt_connector_cart\\EntityUIController\\CartBundleEntityUIController',
      ),
    ),
    'cart_item' => array(
      'label' => t('Cart Item'),
      'entity class' => 'Drupal\\tmgmt_dgt_connector_cart\\Entity\\CartItem',
      'controller class' => 'EntityAPIController',
      'base table' => 'cart_item',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'ciid',
      ),
      'module' => 'tmgmt_dgt_connector_cart',
      'metadata controller class' => 'Drupal\\tmgmt_dgt_connector_cart\\Metadata\\CartItemMetadataController',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_dgt_connector_cart_form_tmgmt_entity_ui_translate_form_alter(&$form, &$form_state) {
  unset($form['top_actions']);
  $form['actions']['cart'] = array(
    '#type' => 'submit',
    '#value' => 'Send to cart',
    '#submit' => array('tmgmt_dgt_connector_cart_form_submit'),
    '#validate' => array('tmgmt_dgt_connector_cart_form_validate'),
  );
}

/**
 * Custom submit function for cart functionality.
 */
function tmgmt_dgt_connector_cart_form_submit($form, &$form_state) {
  // Getting or creating a new CartBundle entity.
  $cart_bundle = _tmgmt_dgt_connector_cart_get_cart_get_cart_bundle($form_state);

  // Getting the entity object and the CartBundle ID.
  $entity = $form_state['entity'];
  $cbid = $cart_bundle->cbid;

  // Checking if the CartItem entities exist for a given entity and if so
  // returning an error message.
  if (empty(_tmgmt_dgt_connector_cart_get_cart_items($cbid, $entity))) {
    // Creating the CartItem entity.
    _tmgmt_dgt_connector_cart_create_cart_item($cbid, $entity);
    // Updating the 'changed' field of the CartBundle entity.
    $cart_bundle->save();
  }
  else {
    drupal_set_message(t('The content has already been added to the cart.'), 'error');
    return;
  }

  drupal_set_message(t('The content has been added to the cart.'));
}

/**
 * Getting the CartBundle from the form state.
 */
function _tmgmt_dgt_connector_cart_get_cart_get_cart_bundle($form_state) {
  global $user;
  // Extracting languages from the form.
  $values = $form_state['values'];
  $target_languages = array_keys(array_filter($values['languages']));

  // Sorting in order to ensure that an array order is always the same.
  ksort($target_languages);

  // Concatenating languages in order to store them as a string.
  $target_languages = implode('.', $target_languages);

  // Setting up properties to query for a CartBundle entities.
  $cart_bundle_properties = array(
    'uid' => $user->uid,
    'target_languages' => $target_languages,
    'status' => CartBundle::STATUS_OPEN,
  );

  // Checking if the CartBundle entities exist for a given entity or create one.
  $cart_bundles = CartBundle::loadWithProperties($cart_bundle_properties);
  if (empty($cart_bundles)) {
    return CartBundle::create($user->uid, $target_languages, CartBundle::STATUS_OPEN);
  }
  else {
    return reset($cart_bundles);
  }
}

/**
 * Creates the CartItem entity based on given attributes.
 *
 * @param int $cbid
 *   The CartBundle entity ID.
 * @param object $entity
 *   An entity object.
 */
function _tmgmt_dgt_connector_cart_create_cart_item($cbid, $entity) {
  // @todo: in future we will have to cope with different entity types here.
  list($entity_id) = entity_extract_ids($entity->entity_type, $entity);
  $entity_title = $entity->title;
  $entity_uri = entity_uri($entity->entity_type, $entity);
  $context_url = url($entity_uri['path'], array('absolute' => TRUE));

  // Creating the CartItem entity.
  CartItem::create(
    $cbid,
    $entity->entity_type,
    $entity_id,
    $entity_title,
    $context_url
  );
}

/**
 * Helper function to get the CartItem entities based on a given entity.
 *
 * @param int $cbid
 *   The CartBundle entity ID.
 * @param object $entity
 *   An entity object.
 *
 * @return array
 *   An array of CartItem entity objects indexed by their IDs or an empty
 *   array if no results are found.
 *
 * @throws \EntityMalformedException
 */
function _tmgmt_dgt_connector_cart_get_cart_items($cbid, $entity) {
  // @todo: in future we will have to cope with different entity types here.
  list($entity_id) = entity_extract_ids($entity->type, $entity);
  $cart_item_properties = array(
    'cbid' => $cbid,
    'entity_type' => $entity->entity_type,
    'entity_id' => $entity_id,
    'status' => CartItem::STATUS_OPEN,
  );

  return CartItem::loadWithProperties($cart_item_properties);
}

/**
 * Custom validation function for cart functionality.
 */
function tmgmt_dgt_connector_cart_form_validate($form, &$form_state) {
  $selected = array_filter($form_state['values']['languages']);

  // Checking if at least one language was selected.
  if (empty($selected)) {
    form_set_error('languages', t('You have to select at least one language before sending content to the cart.'));
  }
}

/**
 * Access callback for the CartBundle entity.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $cart_bundle
 *   (optional) A CartBundle entity to check access for. If nothing is given,
 *   default access level is determined.
 * @param object $account
 *   (optional) The user to check for. Leave it to NULL to check for the
 *   global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function tmgmt_dgt_connector_cart_bundle_access($op, $cart_bundle = NULL, $account = NULL) {
  return user_access('administer dgt connector', $account);
}
