<?php

/**
 * @file
 * Module file of the TMGMT DGT connector cart.
 */

use Drupal\tmgmt_dgt_connector_cart\Entity\CartBundle;
use Drupal\tmgmt_dgt_connector_cart\Entity\CartItem;

// Including the custom form callback.
module_load_include('inc', 'tmgmt_dgt_connector_cart', 'includes/forms/tmgmt_dgt_connector_form_cart_bundle_items');

/**
 * Implements hook_menu().
 */
function tmgmt_dgt_connector_cart_menu() {
  $items = array();

  $items['admin/dgt_connector/cart-items-wrapper/%/%ctools_js'] = array(
    'page callback' => 'tmgmt_dgt_connector_cart_form_cart_bundle_items_wrapper',
    'page arguments' => array(3, 4),
    'access callback' => 'user_access',
    'access arguments' => array('access to the dgt connector cart'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Custom callback - Wrapper fot the CartItems entities form.
 */
function tmgmt_dgt_connector_cart_form_cart_bundle_items_wrapper($cbid, $ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Translation Bundle content.'),
    );

    $form_state['build_info']['args'][] = $cbid;

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('tmgmt_dgt_connector_form_cart_bundle_items', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('tmgmt_dgt_connector_form_cart_bundle_items');
  }
}

/**
 * Implements hook_permission().
 */
function tmgmt_dgt_connector_cart_permission() {
  return array(
    'access to the dgt connector cart' => array(
      'title' => 'Access to the DGT Connector cart',
      'description' => 'Allows to access and use the DGT Connector cart.',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function tmgmt_dgt_connector_cart_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'tmgmt_dgt_connector_cart') . '/includes/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function tmgmt_dgt_connector_cart_entity_info() {
  return array(
    'cart_bundle' => array(
      'label' => t('Cart bundle'),
      'entity class' => 'Drupal\\tmgmt_dgt_connector_cart\\Entity\\CartBundle',
      'controller class' => 'EntityAPIController',
      'views controller class' => 'Drupal\\tmgmt_dgt_connector_cart\\EntityViewsController\\CartBundleViewsController',
      'base table' => 'cart_bundle',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'cbid',
        'label' => 'cbid',
      ),
      'module' => 'tmgmt_dgt_connector_cart',
      'metadata controller class' => 'Drupal\\tmgmt_dgt_connector_cart\\Metadata\\CartBundleMetadataController',
      'access callback' => 'tmgmt_dgt_connector_cart_bundle_access',
      'admin ui' => array(
        'path' => 'admin/config/system/dgt_connector/cart_bundles',
        'controller class' => 'Drupal\\tmgmt_dgt_connector_cart\\EntityUIController\\CartBundleEntityUIController',
      ),
    ),
    'cart_item' => array(
      'label' => t('Cart Item'),
      'entity class' => 'Drupal\\tmgmt_dgt_connector_cart\\Entity\\CartItem',
      'controller class' => 'EntityAPIController',
      'base table' => 'cart_item',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'ciid',
      ),
      'module' => 'tmgmt_dgt_connector_cart',
      'metadata controller class' => 'Drupal\\tmgmt_dgt_connector_cart\\Metadata\\CartItemMetadataController',
    ),
  );
}

/**
 * Implements hook_action_info().
 */
function tmgmt_dgt_connector_cart_action_info() {
  return array(
    'tmgmt_dgt_connector_cart_send_cart_bundles' => array(
      'type' => 'cart_bundle',
      'label' => t('Send bundles'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
    'tmgmt_dgt_connector_cart_discard_cart_bundles' => array(
      'type' => 'cart_bundle',
      'label' => t('Discard bundles'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
    'tmgmt_dgt_connector_cart_restore_cart_bundles' => array(
      'type' => 'cart_bundle',
      'label' => t('Restore bundles'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
  );
}

/**
 * Create the translation job associated to the bundle and redirect the user.
 *
 * @param \Drupal\tmgmt_dgt_connector_cart\Entity\CartBundle $cart_bundle
 *   The selected CartBundle entity.
 * @param array $context
 *   An associative array of context information.
 */
function tmgmt_dgt_connector_cart_send_cart_bundles(CartBundle &$cart_bundle, array $context) {
  global $user;

  $cart_items = CartBundle::getCartItems($cart_bundle->cbid);
  $target_languages = $cart_bundle->getTargetLanguages();
  $job_items_by_source_language = array();

  // Group the selected items by source language.
  foreach ($cart_items as $cart_item) {
    $job_item = $cart_item->createJobItem();
    $source_language = $job_item->getSourceLangCode();
    if (in_array($source_language, $job_item->getExistingLangCodes())) {
      $job_items_by_source_language[$source_language][$job_item->tjiid] = $job_item;
    }
  }

  $jobs = $remove_job_item_ids = $reference = array();
  // Loop over all target languages, create a job for each source and target
  // language combination add add the relevant job items to it.
  foreach ($target_languages as $target_language) {
    foreach ($job_items_by_source_language as $source_language => $job_items) {
      // Skip in case the source language is the same as the target language.
      if ($source_language == $target_language) {
        continue;
      }

      if (!empty($reference)) {
        // Poetry: We need the reference to identify related jobs.
        $job = tmgmt_job_create($source_language, $target_language, $user->uid, $reference);
      }
      else {
        $job = tmgmt_job_create($source_language, $target_language, $user->uid);
      }

      $job_empty = TRUE;
      /** @var TMGMTJobItem $job_item */
      foreach ($job_items as $id => $job_item) {
        try {
          // As the same item might be added to multiple jobs, we need to
          // re-create them and delete the old ones, after removing them from
          // the cart.
          $job->addItem($job_item->plugin, $job_item->item_type, $job_item->item_id);
          $remove_job_item_ids[$job_item->tjiid] = $job_item->tjiid;
          $job_empty = FALSE;
        }
        catch (Exception $e) {
          // If an item fails for one target language, then it is also going
          // to fail for others, so remove it from the array.
          unset($job_items_by_source_language[$source_language][$id]);
          drupal_set_message($e->getMessage(), 'error');
        }
      }

      if (!$job_empty) {
        $jobs[] = $job;

        // Set reference to be based on main job ID.
        if (empty($reference)) {
          $reference = array('reference' => 'SUB_' . $job->tjid);
        }
      }

    }
  }

  // Remove job items from the cart.
  if ($remove_job_item_ids) {
    entity_delete_multiple('tmgmt_job_item', $remove_job_item_ids);
  }

  // Change status of bundle.
  $cart_bundle->updateStatus(CartBundle::STATUS_SENT);

  // Start the checkout process if any jobs were created.
  if ($jobs) {
    $redirects = tmgmt_ui_job_checkout_multiple($jobs);
    // If necessary, do a redirect.
    if ($redirects) {
      // Count of the job messages is one less due to the final redirect.
      drupal_set_message(t('One job needs to be checked out.'));

      // Store chosen translation request languages for further processing.
      _tmgmt_poetry_workbench_store_request_languages($target_languages);

      drupal_goto(array_shift($redirects));
    }
  }
  else {
    drupal_set_message(t('It is not possible to create a translation job from the selection you made.'), 'error');
  }
}

/**
 * Discard the bundle.
 *
 * @param \Drupal\tmgmt_dgt_connector_cart\Entity\CartBundle $cart_bundle
 *   The selected CartBundle entity.
 * @param array $context
 *   An associative array of context information.
 */
function tmgmt_dgt_connector_cart_discard_cart_bundles(CartBundle &$cart_bundle, array $context) {
  if ($cart_bundle->status == CartBundle::STATUS_OPEN) {
    $cart_bundle->updateStatus(CartBundle::STATUS_DISCARDED);
    drupal_set_message(t('The bundle has been discarded.'));
  }
  else {
    drupal_set_message(t('Only OPEN bundles can be discarded.'), 'error');
  }
}

/**
 * Restore the bundle.
 *
 * @param \Drupal\tmgmt_dgt_connector_cart\Entity\CartBundle $cart_bundle
 *   The selected CartBundle entity.
 * @param array $context
 *   An associative array of context information.
 */
function tmgmt_dgt_connector_cart_restore_cart_bundles(CartBundle &$cart_bundle, array $context) {
  if ($cart_bundle->status == CartBundle::STATUS_DISCARDED) {
    $cart_bundle->updateStatus(CartBundle::STATUS_OPEN);
    drupal_set_message(t('The bundle has been restored.'));
  }
  else {
    drupal_set_message(t('Only DISCARDED bundles can be discarded.'), 'error');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_dgt_connector_cart_form_tmgmt_entity_ui_translate_form_alter(&$form, &$form_state) {
  unset($form['top_actions']);
  $form['actions']['cart'] = array(
    '#type' => 'submit',
    '#value' => 'Send to cart',
    '#submit' => array('tmgmt_dgt_connector_cart_form_submit'),
    '#validate' => array('tmgmt_dgt_connector_cart_form_validate'),
  );
}

/**
 * Custom submit function for cart functionality.
 */
function tmgmt_dgt_connector_cart_form_submit($form, &$form_state) {
  global $user;

  // Extracting languages from the form.
  $values = $form_state['values'];
  $target_languages = array_keys(array_filter($values['languages']));

  // Sorting in order to ensure that an array order is always the same.
  ksort($target_languages);

  // Concatenating languages in order to store them as a string.
  $target_languages = implode('.', $target_languages);

  // Setting up properties to query for a CartBundle entities.
  $cart_bundle_properties = array(
    'uid' => $user->uid,
    'target_languages' => $target_languages,
    'status' => CartBundle::STATUS_OPEN,
  );

  // Checking if the CartBundle entities exist for a given entity or create one.
  $cart_bundles = CartBundle::loadWithProperties($cart_bundle_properties);
  if (empty($cart_bundles)) {
    $cart_bundle = CartBundle::create($user->uid, $target_languages, CartBundle::STATUS_OPEN);
  }
  else {
    $cart_bundle = reset($cart_bundles);
  }

  // Extracting and setting up properties to query for CartItem entities.
  $cart_item_properties = array(
    'cbid' => $cart_bundle->cbid,
    'plugin_type' => $form_state['tmgmt_cart']['plugin'],
    'entity_type' => $form_state['tmgmt_cart']['item_type'],
    'entity_id' => $form_state['tmgmt_cart']['item_id'],
  );

  // Checking if the CartItem entities exist for a given entity and if so
  // returning an error message.
  $cart_items = CartItem::loadWithProperties($cart_item_properties);
  if (empty($cart_items)) {
    CartItem::create($cart_bundle->cbid, $form_state['tmgmt_cart']['plugin'], $form_state['tmgmt_cart']['item_type'], $form_state['tmgmt_cart']['item_id']);
  }
  else {
    drupal_set_message(t('The content has already been added to the cart.'), 'error');
    return;
  }
  drupal_set_message(t('The content has been added to the cart.'));
}

/**
 * Custom validation function for cart functionality.
 */
function tmgmt_dgt_connector_cart_form_validate($form, &$form_state) {
  $selected = array_filter($form_state['values']['languages']);

  // Checking if at least one language was selected.
  if (empty($selected)) {
    form_set_error('languages', t('You have to select at least one language before sending content to the cart.'));
  }
}

/**
 * Access callback for the CartBundle entity.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $cart_bundle
 *   (optional) A CartBundle entity to check access for. If nothing is given,
 *   default access level is determined.
 * @param object $account
 *   (optional) The user to check for. Leave it to NULL to check for the
 *   global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function tmgmt_dgt_connector_cart_bundle_access($op, $cart_bundle = NULL, $account = NULL) {
  return user_access('administer dgt connector', $account);
}
