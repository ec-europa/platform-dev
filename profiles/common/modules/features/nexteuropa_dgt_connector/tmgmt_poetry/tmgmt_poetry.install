<?php

/**
 * @file
 * Install file of the translation management Poetry .
 */

/**
 * Implements hook_schema().
 */
function tmgmt_poetry_schema() {
  $schema['poetry_map'] = array(
    'description' => 'Table containing the mappings between Drupal and Poetry',
    'fields' => array(
      'entity_type' => array(
        'description' => 'Entity type',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      // Originally this column was erroneously set to be an integer in the
      // assumption that TMGMT module would only provide entity IDs.
      // In reality object IDs can be strings describing any kind of object.
      // @see tmgmt_poetry_update_7003()
      // @link https://webgate.ec.europa.eu/CITnet/jira/browse/NEXTEUROPA-12492
      'entity_id' => array(
        'description' => 'Identification string of the object being translated.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'annee' => array(
        'description' => 'Annee',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'numero' => array(
        'description' => 'Numero',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'version' => array(
        'description' => 'Version',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'partie' => array(
        'description' => 'Partie',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('entity_type', 'entity_id'),
  );

  $schema['poetry_status'] = array(
    'description' => 'Table containing the status of the Poetry requests',
    'fields' => array(
      'tjiid' => array(
        'description' => 'Job Item ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'target_language' => array(
        'description' => 'Target language',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Request status',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'delai' => array(
        'description' => 'Delivery date',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('tjiid', 'target_language'),
  );
  return $schema;
}

/**
 * Implements hook_requirements().
 */
function tmgmt_poetry_requirements($phase) {
  $requirements = array();
  $t = get_t();
  global $conf;

  switch ($phase) {
    case 'install':
      if (!isset($conf['poetry_service']['address'])) {
        $requirements['poetry_service'] = array(
          'title' => 'DGT connector webservice',
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('The DGT webservice endpoint is not set.  Please ask your support team to check the server configuration.'),
          'value' => $t('Not configured'),
        );
      }
      else {
        $requirements['poetry_service'] = array(
          'title' => $t('DGT connector webservice'),
          'severity' => REQUIREMENT_OK,
          'value' => $t('The DGT endpoint is correctly set'),
        );
      }
      break;

    case 'runtime':
      $translator = tmgmt_translator_load('poetry');

      // Cases where the translator was deleted.
      if (!is_object($translator)) {
        $requirements['poetry_service'] = array(
          'title' => 'DGT connector webservice',
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('The DGT webservice is not correctly installed. Disable the feature and uninstall the module DGT connector, then enable the feature again.'),
          'value' => $t('No translator'),
        );
      }
      else {
        // Cases where CEM did not set up the credentials.
        $settings = $translator->getSetting('settings');

        if (!isset($conf['poetry_service']['address']) || !isset($conf['poetry_service']['method'])) {
          $requirements['poetry_service'] = array(
            'title' => 'DGT connector webservice',
            'severity' => REQUIREMENT_ERROR,
            'description' => $t('The DGT webservice endpoint is not set.  Please check the server configuration.'),
            'value' => $t('Not configured'),
          );
        }
        elseif (!isset($settings['callback_user']) || !isset($settings['callback_password'])) {
          $requirements['poetry_service'] = array(
            'title' => 'DGT connector webservice',
            'severity' => REQUIREMENT_ERROR,
            'description' => $t('The local connector credentials are not set.  Please contact COMM EUROPA MANAGEMENT.'),
            'value' => $t('Missing local credentials'),
          );
        }
        elseif (!isset($settings['poetry_user']) || !isset($settings['poetry_password'])) {
          $requirements['poetry_service'] = array(
            'title' => 'DGT connector webservice',
            'severity' => REQUIREMENT_ERROR,
            'description' => $t('The DGT remote credentials are not set.  Please contact COMM EUROPA MANAGEMENT.'),
            'value' => $t('Missing remote credentials'),
          );
        }
        else {
          $requirements['poetry_service'] = array(
            'title' => $t('DGT connector webservice'),
            'severity' => REQUIREMENT_OK,
            'value' => $t('The DGT endpoint is correctly set'),
          );
        }
        break;
      }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function tmgmt_poetry_uninstall() {
  // Delete the 'poetry' TMGMT translator entity.
  // Note tmgmt_translator_load is not stable in uninstall cases; it returns
  // FALSE while the translator exists in the DB.
  // That is why we pass by EntityFieldQuery.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'tmgmt_translator')
    ->propertyCondition('name', 'poetry')
    ->execute();
  if (!empty($result['tmgmt_translator'])) {
    $controller = entity_get_controller('tmgmt_translator');
    // Since the entity controller handles the deletion of the attached
    // entities (messages, job items) we just need to invoke it directly.
    $controller->delete(array_keys($result['tmgmt_translator']));
  }

  // Delete translation jobs related to the poetry.
  // Code is inspired by tmgmt_cron().
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'tmgmt_job')
    ->propertyCondition('translator', 'poetry')
    ->execute();
  if (!empty($result['tmgmt_job'])) {
    $controller = entity_get_controller('tmgmt_job');
    // Since the entity controller handles the deletion of the attached
    // entities (messages, job items) we just need to invoke it directly.
    $controller->delete(array_keys($result['tmgmt_job']));
  }
}

/**
 * Remove username and passwords from db in case it was already set.
 */
function tmgmt_poetry_update_7001() {
  $translator = tmgmt_translator_load('poetry');
  $settings = $translator->getSetting('settings');
  foreach ($settings as $key => $v) {
    if ($key == 'username' || $key == 'password') {
      unset($settings[$key]);
    }
  }
  $translator->settings['settings'] = $settings;
  $translator->save();
}

/**
 * Enable nexteuropa_token_ckeditor.
 */
function tmgmt_poetry_update_7002() {
  module_enable(array('nexteuropa_token_ckeditor'));
}

/**
 * Change Entity ID field type to 'varchar'.
 */
function tmgmt_poetry_update_7003() {

  // Backup current state of poetry_map table as it was on schema 7002.
  db_query('CREATE TABLE {poetry_map_7002} LIKE {poetry_map}');
  db_query('INSERT {poetry_map_7002} SELECT * FROM {poetry_map}');

  // Alter "entity_id" field.
  db_drop_primary_key('poetry_map');
  $spec = array(
    'description' => 'Entity id',
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
  );
  $keys = array(
    'primary key' => array('entity_type', 'entity_id'),
  );
  db_change_field('poetry_map', 'entity_id', 'entity_id', $spec, $keys);

  // Compare the two tables and abort update if something went wrong.
  try {
    $count1 = db_query('SELECT * FROM {poetry_map}')->rowCount();
    $count2 = db_query('SELECT * FROM {poetry_map} UNION SELECT * FROM {poetry_map_7002}')->rowCount();
    if ($count1 != $count2) {
      throw new \Exception(t('Data corrupted in "poetry_map" after running tmgmt_poetry_update_7003().'));
    }
  }
  finally {
    db_drop_table('poetry_map_7002');
  }
}
