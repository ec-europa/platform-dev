<?php

/**
 * @file
 * Code for the Multisite Maps feature.
 */

include_once 'multisite_maps.features.inc';

/**
 * Implements hook_theme().
 */
function multisite_maps_theme($existing, $type, $theme, $path) {
  return array(
    'multisite_map' => array(
      'variables' => array('info' => '', 'jsid' => NULL),
    ),
  );
}

/**
 * Returns HTML for maps.
 *
 * @param array $variables
 *   An associative array containing:
 *   - info: Data sources in XML.
 *   - jsid: ID attribute in the DOM.
 *
 * @return string
 *   The HTML to render the map.
 *
 * @ingroup themeable
 */
function theme_multisite_map(array $variables) {
  $info = $variables['info'];
  $jsid = $variables['jsid'];
  // Incremental ID of each map
  // (static in case there is more then one map on a page).
  static $map_id;
  if (!isset($map_id)) {
    $map_id = 1;
  }
  if (!isset($jsid)) {
    $jsid = 'Map_' . $map_id++;
  }

  $protocol = 'https';
  $path = $protocol . '://webtools.ec.europa.eu/fusionmapsxt/Maps/';
  $js_path = $path;

  include_once multisite_maps_get_library_path() . '/Code/PHP/Includes/FusionMaps.php';
  // Check that the fusionmaps package was installed.
  if (!function_exists('renderChart')) {
    return t('Please install the Fusion Maps package from InfoSoft as per instructions in the readme.');
  }

  drupal_add_js($js_path . 'FusionCharts.js', 'external');

  // Build the path to swf. Beware swf files have lowercase filenames.
  $swf_file = $path . $info['type'] . '.swf';

  // Remove white spaces between xml tags and line breaks from the variable.
  $xml_data_source = escape($info['xml']);
  $xml_data_source = str_replace('\r\n', ' ', $xml_data_source);

  return renderChart($swf_file, '', $xml_data_source, $jsid, $info['width'], $info['height'], 0, 0, 0);
}

/**
 * Replace any non-ascii character with its hex code.
 */
function escape($value) {
  $search = array("\\", "\x00", "\n", "\r", "'", '"', "\x1a");
  $replace = array("\\\\", "\\0", "\\n", "\\r", "'", '\"', "\\Z");

  return str_replace($search, $replace, $value);
}

/**
 * Get the maps library path.
 *
 * @return string
 *   Library path.
 */
function multisite_maps_get_library_path() {
  global $conf;

  if (isset($conf['fusion_maps_path'])) {
    return $conf['fusion_maps_path'];
  }
  if (module_exists('libraries')) {
    $path = libraries_get_path('FusionMaps XT');
  }
  if (!$path) {
    $path = 'profiles/' . $conf['install_profile'] . '/libraries/FusionMaps XT';
  }
  return $path;
}

/**
 * Implements hook_node_view().
 */
function multisite_maps_node_view($node, $view_mode, $langcode) {
  if ('map' == $node->type) {
    switch ($view_mode) {
      case 'full':
      case 'teaser':
        $map_type_items = field_get_items('node', $node, 'field_map_type');
        $map_width_items = field_get_items('node', $node, 'field_map_width');
        $map_height_items = field_get_items('node', $node, 'field_map_height');
        $map_data_items = field_get_items('node', $node, 'field_map_xml_data_source');

        $info = array();
        $info['type'] = $map_type_items[0]['value'];
        if ('full' == $view_mode) {
          $info['width'] = $map_width_items[0]['value'];
          $info['height'] = $map_height_items[0]['value'];
        }
        else {
          $info['width'] = 400;
          $info['height'] = 300;
        }

        $info['xml'] = $map_data_items[0]['xml'];

        $map_out = theme('multisite_map', array('info' => $info));
        $node->content['map_area']['#markup'] = $map_out;
        $node->content['map_area']['#weight'] = 30;
        break;
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function multisite_maps_node_validate($node, $form, &$form_state) {
  $map_type_items = field_get_items('node', $node, 'field_map_type');
  $info['type'] = $map_type_items[0]['value'];
  // The value of the categories of maps are numbers. They aren't valid options.
  if (is_numeric($info['type']) == TRUE) {
    form_set_error('Error', t('Map type is not a valid option. Please, select a valid map type.'));
  }
}
