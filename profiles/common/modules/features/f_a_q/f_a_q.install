<?php

/**
 * @file
 * Install the feature f_a_q.
 */

module_load_include('inc', 'f_a_q', 'f_a_q.install');

/**
 * Implements hook_requirements().
 */
function f_a_q_requirements() {
  $requirements = [];
  if (module_exists('nexteuropa_faq')) {
    $t = get_t();
    $args = array('%module' => 'Nexteuropa FAQ');
    $requirements['f_a_q_module_conflict'] = array(
      'title' => 'F.A.Q.',
      'description' => $t('This module is not compatible with %module. Please disable that module first.', $args),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function f_a_q_install() {
  // Create a vocabulary dedicated to the faq.
  $t = get_t();
  $vocabulary = (object) array(
    'name' => $t('FAQ categories'),
    'machine_name' => 'faq_categories',
    'module' => 'faq',
  );
  taxonomy_vocabulary_save($vocabulary);

  // Use soft config for f_a_q comment form location.
  multisite_config_service('comment')->setReplyFormCommentForContentType('f_a_q', 0);
  // Use soft config to allow comments from authenticated users.
  multisite_config_service('comment')->setDefaultCommentForContentType('f_a_q', 'open');
  // Use soft config to allow f_a_q comment threading.
  multisite_config_service('comment')->setThreadingCommentForContentType('f_a_q', 1);
  // Use soft config for f_a_q comment title.
  multisite_config_service('comment')->setTitleCommentForContentType('f_a_q', 1);
  // Use soft config for preview f_a_q comment.
  multisite_config_service('comment')->setPreviewCommentForContentType('f_a_q', 1);
  // Use soft config to set number of comments per page.
  multisite_config_service('comment')->setNumberCommentForContentType('f_a_q', '50');
  // Use soft config for anonymous comments.
  multisite_config_service('comment')->setAnonymousCommentForContentType('f_a_q', 0);

  // Use soft config for comment_body field instance.
  _f_a_q_comment_body_field_instance_add();

}

/**
 * Implements hook_uninstall().
 */
function f_a_q_uninstall() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('faq_categories');
  taxonomy_vocabulary_delete($vocabulary->vid);
}

/**
 * Implements hook_enable().
 */
function f_a_q_enable() {
  $t = get_t();
  drupal_set_message($t('FAQ enabled'));

  // SolR configuration add bundle.
  multisite_drupal_toolbox_config_solr_bundle('f_a_q', 'add');

  // Add type to linkchecker scan.
  multisite_drupal_toolbox_content_type_linkchecker('f_a_q', 'add');

  // Activation message.
  drupal_set_message(t('Faq is now active on your site.'));
}

/**
 * Implements hook_disable().
 */
function f_a_q_disable() {
  // SolR configuration add bundle.
  multisite_drupal_toolbox_config_solr_bundle('f_a_q', 'delete');

  // Remove type to linkchecker scan.
  multisite_drupal_toolbox_content_type_linkchecker('f_a_q', 'delete');

  // Get role_id for the role.
  $role_name = 'contributor';
  $roles = user_roles(TRUE);
  $role_id = array_search($role_name, $roles);

  user_role_revoke_permissions($role_id, array(
    'create f_a_q content',
    'edit any f_a_q content',
    'delete any f_a_q content',
  ));

  // Activation message.
  drupal_set_message(t('Faq is now disabled on your site.'));
}

/**
 * Set new value for f_a_q feature in database.
 *
 * Variables from comments settings must be removed from hard config.
 * Recreate the value of the feature in database without the variable.
 */
function f_a_q_update_7001() {
  module_load_include('inc', 'features', "features.export");
  features_set_signature('f_a_q', 'variable');
}
