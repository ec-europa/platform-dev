<?php

/**
 * @file
 * Tests for multisite_audio.
 */

/**
 * Defines a base class for testing the Audio feature.
 */
class MultisiteAudioFeatureTest extends DrupalWebTestCase {
  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'multisite_audio feature test',
      'description' => 'Test the multisite_audio feature to ensure it works as intended.',
      'group' => 'Multisite Feature Test',
    );
  }

  /**
   * Configure the environment, enable the required modules.
   */
  public function setUp() {
    parent::setUp(array('field_ui', 'jplayer', 'multisite_audio'));
  }

  /**
   * Test functionality of the audio field.
   *
   * Performs the following actions:
   * - Creates a content type.
   * - Adds a single-valued audio field to it.
   * - Test that the single-valued audio field has every setting.
   * - Adds a multi-valued audio field to it.
   * - Test that the multi-valued audio field has every setting.
   * - Tests that both audio fields are enabled in the add node form.
   */
  public function testAudioField() {
    $content_type_machine = drupal_strtolower($this->randomName(10));

    // Create and login user.
    $account = $this->drupalCreateUser(array('administer content types'));
    $this->drupalLogin($account);

    $this->drupalGet('admin/structure/types');

    // Create the content type.
    $this->clickLink(t('Add content type'));

    $edit = array(
      'name' => $content_type_machine,
      'type' => $content_type_machine,
    );
    $this->drupalPost(NULL, $edit, t('Save and add fields'));
    $this->assertText(t('The content type @name has been added.', array('@name' => $content_type_machine)));

    $single_audio_field = drupal_strtolower($this->randomName(10));
    $multiple_audio_field = drupal_strtolower($this->randomName(10));

    // Description of field to be created.
    $fields[$single_audio_field] = array('cardinality' => 1);
    $fields[$multiple_audio_field] = array('cardinality' => -1);

    foreach ($fields as $fieldname => $details) {
      $this->createField($fieldname, $details['cardinality']);
    }

    node_types_rebuild();
    menu_rebuild();
    $type_exists = db_query('SELECT 1 FROM {node_type} WHERE type = :type', array(':type' => $content_type_machine))->fetchField();
    $this->assertTrue($type_exists, 'The new content type has been created in the database.');

    $permission = 'create ' . $content_type_machine . ' content';
    // Reset the permissions cache.
    $this->checkPermissions(array($permission), TRUE);

    // Now that we have a new content type, create a user
    // that has privileges on the content type.
    $account = $this->drupalCreateUser(array($permission));
    $this->drupalLogin($account);

    $this->drupalGet('node/add/' . $content_type_machine);

    $this->assertText(t('@name', array('@name' => $single_audio_field)));
    $this->assertText(t('@name', array('@name' => $multiple_audio_field)));

  }

  /**
   * Utility function to create fields on a content type.
   */
  protected function createField($field_name, $cardinality) {
    // Add a singleton field_example_text field.
    $edit = array(
      'fields[_add_new_field][label]' => $field_name,
      'fields[_add_new_field][field_name]' => $field_name,
      'fields[_add_new_field][type]' => 'audio',
      'fields[_add_new_field][widget_type]' => 'audio_field',

    );
    $this->drupalPost(NULL, $edit, t('Save'));

    $this->assertText(t('Field settings'));
    $this->assertText(t('Enable Display field'));
    $this->assertText(t('Files displayed by default'));
    $this->assertText(t('Public files'));
    $this->assertText(t('Private files'));

    $this->drupalPost(NULL, array(), t('Save field settings'));

    $this->assertText(t('Required field'));
    $this->assertText(t('Allowed file extensions'));
    $this->assertText(t('Audio directory'));
    $this->assertText(t('Maximum upload size'));
    $this->assertText(t('Number of values'));
    $this->assertText(t('Enable Display field'));
    $this->assertText(t('Files displayed by default'));
    $this->assertText(t('Public files'));
    $this->assertText(t('Private files'));

    $edit = array('field[cardinality]' => (string) $cardinality);

    $this->drupalPost(NULL, $edit, t('Save settings'));
    debug(t('Saved settings for field %field_name with widget "Audio Upload" and cardinality %cardinality', array('%field_name' => $field_name, '%cardinality' => $cardinality)));

    $this->assertText(t('Saved @name configuration.', array('@name' => $field_name)));
  }

}
