<?php

/**
 * @file
 * Multisite_autosave definition module.
 */

/**
 * Implements hook_js_alter().
 */
function multisite_autosave_js_alter(&$javascript) {
  // If the autosave js is invoked, our custom js replaces
  // it in order to get the functionality workink on IE.
  if (isset($javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['data'])) {
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['data'] = drupal_get_path('module', 'multisite_autosave') . '/scripts/multisite_autosave.js';
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['scope'] = 'header';
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['group'] = 'JS_LIBRARY';
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['weight'] = '100';
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['every_page'] = TRUE;
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['type'] = 'file';
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['preprocess'] = 'TRUE';
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['cache'] = 'TRUE';
    $javascript[drupal_get_path('module', 'autosave') . '/autosave.js']['defer'] = 'TRUE';
  }
}

/**
 * Implements hook_menu().
 */
function multisite_autosave_menu() {
  $items['autosave/restore'] = array(
    'title'           => 'Autosave form restore',
    'page callback'   => '_multisite_autosave_restore',
    'access callback' => 'autosave_restore_access',
    'access arguments' => array(2, 3, 4),
    'type'            => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Menu callback; AHAH return the form, repopulated with autosaved data.
 *
 * @param string $formid
 *   The ID of the form to reload.  This should be in Javascript format, vis,
 *   using - instead of _.
 * @param int $timestamp
 *   The timestamp at which the autosaved form was saved.  This is used to
 *   differentiate between different people mucking with the same form.
 */
function _multisite_autosave_restore($formid, $timestamp) {

  // Convert the form ID back to the PHP version.  I do hate that duality...
  $form_id = str_replace("-", "_", $formid);

  // Fetch the saved form, if any.
  $record = autosave_get_autosaved_form($form_id, $timestamp, $GLOBALS['user']->uid);

  if ($record) {
    // We need to extract and reuse any additional page arguments that the
    // original form may have.  That's especially true for, say, a node form,
    // which needs the node object passed in as well.
    $menu_item = autosave_menu_get_item($record->path);
    if ($menu_item['include_file']) {
      require_once DRUPAL_ROOT . '/' . $menu_item['include_file'];
      $form_state['build_info']['files'][] = $menu_item['include_file'];
    }
    // @codingStandardsIgnoreLine: NEPT-1304: The code tries to build a form, not read it.
    $form_state['input'] = unserialize($record->serialized);

    // The node_form() form builder expects the first argument to be a full node
    // object, even when adding a new node. The node/add/[type] menu item only
    // has a string as its argument, instead of a full object, so we convert it
    // here for the form.
    $build_info_args = $menu_item['page_arguments'];
    if (is_string($build_info_args[0])) {
      $node = (object) array('type' => $build_info_args[0]);
      node_object_prepare($node);
      $build_info_args[0] = $node;
    }
    $form_state['build_info']['args'] = $build_info_args;

    // Disable the "this form has already been submitted" nonsense by making
    // Drupal think the form is being rebuilt as part of a multi-step form.
    $form_state['rebuild'] = TRUE;

    // When restoring we will need to know the form token so that the user can
    // be validated.
    $form = drupal_build_form($form_id, $form_state);

    // Because the form will by default submit back to this URL, we need to
    // tell it to actually submit back to where it would have submitted to
    // originally.
    $form['#action'] = _multisite_autosave_url($record->path);
    $form['autosave_form_path']['#value'] = $record->path;

    // We don't want to change the HTML ID of the form, because we're replacing
    // it in-place.  Drupal wants to give this a suffix for some reason.
    $form['#id'] = $formid;

    $commands[] = ajax_command_replace('#' . $formid, drupal_render($form));

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
}

/**
 * Retreives a url for a given path.
 *
 * This is a wrapper around url() that removes any language prefixes
 * from the path if present.
 *
 * @param string $path
 *   A menu path such as es/node/add/article.
 *
 * @return string
 *   A url as returned by url().
 */
function _multisite_autosave_url($path) {
  if (drupal_multilingual() && language_negotiation_get_any(LOCALE_LANGUAGE_NEGOTIATION_URL)) {
    $url_part = variable_get('locale_language_negotiation_url_part', LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX);
    if ($url_part === LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
      list(, $path) = language_url_split_prefix($path, language_list());
    }
  }
  return url($path);
}
