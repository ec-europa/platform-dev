<?php
/**
 * @file
 * Code for the NextEuropa GeoField feature.
 */

/**
 * Implements hook_field_schema().
 */
function nexteuropa_geofield_field_schema($field) {
  $schema = array();

  switch ($field['type']) {
    case 'geofield_geojson':
      $schema['columns']['geofield_geojson'] = array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      );
      break;
  }
  return $schema;
}

/**
 * Implements hook_field_info().
 */
function nexteuropa_geofield_field_info() {
  return array(
    'geofield_geojson' => array(
      'label' => t('Geofield geoJSON'),
      'description' => t('Interactive map to manage geo data.'),
      'default_widget' => 'geofield_widget_map',
      'default_formatter' => 'geofield_geojson_map_format',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function nexteuropa_geofield_field_widget_info() {
  return array(
    'geofield_widget_map' => array(
      'label' => t('Interactive map'),
      'field types' => array('geofield_geojson'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function nexteuropa_geofield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $element;
  $widget['#delta'] = $delta;
  $value = isset($items[$delta]) ? $items[$delta] : '';
  $settings = $instance['widget']['settings'];

  switch ($instance['widget']['type']) {
    case 'geofield_widget_map':
      if (!isset($element['#title'])) {
        $element['#title'] = t('Map');
      }

      $element['geojson_search'] = array(
        '#type' => 'textfield',
        '#title' => t('Search address'),
        '#attributes' => array(
          'class' => array(
            'search-address-field',
          ),
        ),
      );

      $element['geojson_search_button'] = array(
        '#type' => 'button',
        '#attributes' => array(
          'search-field' => $field['field_name'],
          'class' => array('search-address-button'),
        ),
        '#value' => t('Search'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
          'callback' => '_nexteuropa_geofield_geocode',
          'wrapper' => 'geofield-search-results',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );

      $element['geocode-search-results'] = array(
        '#type' => 'item',
        '#markup' => '<ul id="geofield-search-results" class="geofield-search-results no-results"></ul>',
      );

      $element['geojson_map'] = array(
        '#type' => 'item',
        '#title' => $element['#title'],
        '#markup' => '<div id="geofield_geojson_map"></div><div id="geofield_geojson_map_wrapper"></div>',
      );

      $element['geojson_map']['#attached']['js'] = array(
        libraries_get_path('leaflet') . '/leaflet-src.js',
        libraries_get_path('Leaflet.draw') . '/dist/leaflet.draw-src.js',
        drupal_get_path('module', 'nexteuropa_geofield') . '/js/nexteuropa_geofield.edit.js',
      );
      $element['geojson_map']['#attached']['css'] = array(
        libraries_get_path('leaflet') . '/leaflet.css',
        drupal_get_path('module', 'nexteuropa_geofield') . '/css/nexteuropa_geofield.css',
        libraries_get_path('Leaflet.draw') . '/dist/leaflet.draw.css',
      );
      $element['geofield_geojson'] = array(
        '#type' => 'textarea',
        '#default_value' => isset($value['geofield_geojson']) ? $value['geofield_geojson'] : '',
        '#prefix' => '<div id="geofield_geojson" class="hide">',
        '#suffix' => '</div>',
      );

      drupal_add_js(array('nexteuropa_geojson' => array('map' => isset($value['geofield_geojson']) ? $value['geofield_geojson'] : '')), 'setting');
      drupal_add_js(array('nexteuropa_geojson' => array('settings' => $settings)), 'setting');
      drupal_add_js(array('nexteuropa_geojson' => array('cardinality' => $field['cardinality'])), 'setting');
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function nexteuropa_geofield_field_widget_settings_form($field, $instance) {
  $default_map_center = array(
    'lat' => 50.85,
    'lng' => 4.35,
  );
  $widget = $instance['widget'];
  $value = $widget['settings'];

  if ($widget['type'] == 'geofield_widget_map') {
    $element['fs_default_map_center'] = array(
      '#type' => 'fieldset',
      '#collapsed' => FALSE,
      '#title' => t('Default map center'),
    );
    $element['fs_default_map_center']['lat'] = array(
      '#type' => 'textfield',
      '#title' => t('Latitude'),
      '#default_value' => isset($value['fs_default_map_center']['lat']) ? $value['fs_default_map_center']['lat'] : $default_map_center['lat'],
      '#size' => 8,
      '#element_validate' => array('_decimal_check'),
      '#description' => t('Number with 5 decimals maximum : 53.45435'),
    );
    $element['fs_default_map_center']['lng'] = array(
      '#type' => 'textfield',
      '#title' => t('Longitude'),
      '#default_value' => isset($value['fs_default_map_center']['lng']) ? $value['fs_default_map_center']['lng'] : $default_map_center['lng'],
      '#size' => 8,
      '#element_validate' => array('_decimal_check'),
      '#description' => t('Number with 5 decimals maximum : 53.45435'),
    );
    $element['fs_objects'] = array(
      '#type' => 'fieldset',
      '#collapsed' => FALSE,
      '#title' => t('Map objects'),
    );
    $element['fs_objects']['objects'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Allowed objects'),
      '#default_value' => isset($value['fs_objects']['objects']) ? $value['fs_objects']['objects'] : array(),
      '#options' => drupal_map_assoc(
          array(
            t('polygon'),
            t('rectangle'),
            t('marker'),
            t('polyline'),
          )
      ),
      '#description' => t('Select the map objects that can be put on the map.'),
    );
    $element['fs_objects']['objects_amount'] = array(
      '#type' => 'select',
      '#title' => t('Number of objects'),
      '#description' => t('Maximum number of objects users can add on the map'),
      '#options' => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
      '#default_value' => isset($value['fs_objects']['objects_amount']) ? $value['fs_objects']['objects_amount'] : 3,
    );
    $element['fs_objects']['fs_prepopulate'] = array(
      '#type' => 'fieldset',
      '#collapsed' => FALSE,
      '#title' => t('Prepopulate popup'),
      '#states' => array(
        'visible' => array(
          'select[name="instance[widget][settings][fs_objects][objects_amount]"]' => array('value' => '1'),
        ),
      ),
    );
    $options = array();
    foreach (field_info_instances("node", $instance['bundle']) as $key => $field) {
      $options[$key] = 'Field ' . $field['label'];
    }
    // Case when the title is not manage with the title module.
    if (!in_array('title_field', array_keys($options))) {
      $options['title_field'] = 'Field title';
    }
    $element['fs_objects']['fs_prepopulate']['name_populate'] = array(
      '#type' => 'select',
      '#title' => t('Popup name'),
      '#options' => $options,
      '#description' => t('Choose a field to populate the popup name'),
      '#default_value' => isset($value['fs_objects']['fs_prepopulate']['name_populate']) ? $value['fs_objects']['fs_prepopulate']['name_populate'] : 'title_field',
    );
    $element['fs_objects']['fs_prepopulate']['description_populate'] = array(
      '#type' => 'select',
      '#title' => t('Popup description'),
      '#options' => $options,
      '#description' => t('Choose a field to populate the popup description'),
      '#default_value' => isset($value['fs_objects']['fs_prepopulate']['description_populate']) ? $value['fs_objects']['fs_prepopulate']['description_populate'] : 'body',
    );
  }
  return $element;
}

/**
 * Check if a form value is decimal with 5 decimals maximum.
 */
function _decimal_check($element, &$form_state) {
  if (!empty($element['#value'])) {
    if (!(preg_match('/^[0-9]+(\\.[0-9]{1,5})?$/', $element['#value']))) {
      form_error($element, t('The field "!name" is not a decimal (with 5 decimals maximum).', array('!name' => $element['#title'])));
    }
  }
}

/**
 * Implements hook_form_ID_alter().
 */
function nexteuropa_geofield_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['build_info']['args'][0]['widget']['type'] == 'geofield_widget_map') {
    $form['field']['cardinality']['#default_value'] = 1;
    $form['field']['cardinality']['#disabled'] = TRUE;
    $form['instance']['default_value_widget']['#collapsible'] = TRUE;
    $form['instance']['default_value_widget']['#collapsed'] = TRUE;
    $form['instance']['default_value_widget']['#access'] = FALSE;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function nexteuropa_geofield_field_formatter_info() {
  return array(
    'geofield_geojson_map_format' => array(
      'label' => t('Interactive map'),
      'field types' => array('geofield_geojson'),
    ),
    'geofield_geojson_raw' => array(
      'label' => t('geoJson data'),
      'field types' => array('geofield_geojson'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function nexteuropa_geofield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $instance['widget']['settings'];

  switch ($display['type']) {
    case 'geofield_geojson_raw':
      $element[0] = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => array(
          'id' => 'geofield_geojson_raw',
        ),
        '#value' => isset($items[0]['geofield_geojson']) ? $items[0]['geofield_geojson'] : '',
      );
      break;

    case 'geofield_geojson_map_format':
      $value = isset($items[0]['geofield_geojson']) ? $items[0]['geofield_geojson'] : '';
      $element[0] = array(
        '#type' => 'markup',
        '#markup' => '<div id="geofield_geojson_map"></div><div id="geofield_geojson_map_wrapper"></div>',
      );
      $element[0]['#attached']['js'][0] = array(
        'type' => 'file',
        'data' => libraries_get_path('leaflet') . '/leaflet-src.js',
        'weight' => '-1',
      );
      $element[0]['#attached']['js'][1] = libraries_get_path('Leaflet.draw') . '/dist/leaflet.draw-src.js';
      $element[0]['#attached']['js'][2] = drupal_get_path('module', 'nexteuropa_geofield') . '/js/nexteuropa_geofield.view.js';

      $element[0]['#attached']['css'] = array(
        libraries_get_path('leaflet') . '/leaflet.css',
        drupal_get_path('module', 'nexteuropa_geofield') . '/css/nexteuropa_geofield.css',
        libraries_get_path('Leaflet.draw') . '/dist/leaflet.draw.css',
      );
      drupal_add_js(array('nexteuropa_geojson' => array('map' => $value)), 'setting');
      drupal_add_js(array('nexteuropa_geojson' => array('settings' => $settings)), 'setting');
      break;
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function nexteuropa_geofield_field_is_empty($item, $field) {
  return empty($item['geofield_geojson']);
}

/**
 * Implements hook_menu().
 */
function nexteuropa_geofield_menu() {
  $items = array();
  $items['node/%node/geojson'] = array(
    'title' => 'GeoJson data',
    'page callback' => '_nexteuropa_geofield_get_geojson',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Return the geoJSON data contained in a geofield_geojson field of a node.
 *
 * Callback of the menu router 'node/%node/geojson'.
 */
function _nexteuropa_geofield_get_geojson($node) {
  $data = field_info_instances("node", $node->type);
  foreach ($data as $key => $value) {
    if ($data[$key]['widget']['type'] == 'geofield_widget_map') {
      $field_name = $key;
    }
  }

  $geojson_data = $node->$field_name;
  $geojson_data = $geojson_data[LANGUAGE_NONE][0]['geofield_geojson'];

  drupal_add_http_header('Content-Type', 'application/json');
  print $geojson_data;
  drupal_exit();
}

/**
 * Ajax callback to fetch the available coordinates for specified address.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 *
 * @return string
 *   Return the Ajax response to be rendered in the form.
 */
function _nexteuropa_geofield_geocode($form, $form_state) {
  $error = NULL;
  $response = '';

  $geo_field_name = $form_state['triggering_element']['#attributes']['search-field'];
  $address = $form_state['values'][$geo_field_name][LANGUAGE_NONE][0]['geojson_search'];

  if (empty($address)) {
    $error = t('No address specified for search.');
  }
  else {
    /*
     * @todo move to configuration.
     */
    $url = 'http://europa.eu/webtools/rest/geocoding/index.php?address=' . urlencode($address) . '&mode=5';
    // Contact the WebTools geocoding service.
    $geocode = drupal_http_request($url);

    if (!empty($geocode->error)) {
      $error = $geocode->error;
    }
    else {
      $geocode_decoded = json_decode($geocode->data);

      if ($geocode_decoded->geocodingRequestsCollection[0]->foundCount < 1) {
        $error = t('No address found.');
      }
      else {
        $items = array();
        foreach ($geocode_decoded->geocodingRequestsCollection[0]->result->features as $key => $address) {
          $geometry = $address->geometry->coordinates;
          // Don't add address if already added. Prevent duplicates.
          $items[sha1($geo_field_name[0] . ',' . $geometry[1])] = array(
            'data' => '<strong>' . $address->properties->formattedAddress . '</strong> [' . round($geometry[0], 4) . ', ' . round($geometry[1], 4) . ']',
            'id' => 'geofield-search-item-' . $key,
            'class' => array('geofield-search-item'),
            'lat' => array($geometry[1]),
            'lng' => array($geometry[0]),
          );
        }

        $attributes = array(
          'id' => 'geofield-search-results',
          'class' => 'geofield-search-results',
        );
        $response = theme('item_list', array(
          'items' => array_values($items),
          'title' => '',
          'type' => 'ul',
          'attributes' => $attributes,
        ));
      }
    }
  }

  if ($error) {
    return '<ul id="geofield-search-results" class="geofield-search-results no-results"><div class="alert alert-warning" role="alert">' . $error . '</div></ul>';
  }

  return $response;
}

/**
 * Implements hook_node_validate().
 */
function nexteuropa_geofield_node_validate($node, $form, &$form_state) {
  $check_errors = form_get_errors();
  // Add the nexteuropa_geofield javascript files only if the form is not valid.
  if (count($check_errors) > 0) {
    $fields_info = field_info_instances('node', $node->type);
    foreach ($fields_info as $field_name => $value) {
      $field_info = field_info_field($field_name);
      $type = $field_info['type'];
      // Add the javascript files if there is a geofield_geojson field.
      if ($type == 'geofield_geojson') {
        $field_instance = $form_state['field'][$field_name][LANGUAGE_NONE];
        drupal_add_js(array('nexteuropa_geojson' => array('map' => $node->{$field_name}['und'][0]['geofield_geojson'])), 'setting');
        drupal_add_js(array('nexteuropa_geojson' => array('settings' => $field_instance['instance']['widget']['settings'])), 'setting');
        drupal_add_js(array('nexteuropa_geojson' => array('cardinality' => $field_instance['field']['cardinality'])), 'setting');
      }
    }
  }
}
