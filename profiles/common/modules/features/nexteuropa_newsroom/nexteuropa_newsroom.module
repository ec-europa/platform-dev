<?php

/**
 * @file
 * Code for the nexteuropa Newsroom feature.
 */

module_load_include('inc', 'pathauto', 'pathauto');
module_load_include('inc', 'nexteuropa_newsroom', 'nexteuropa_newsroom.formatters');
module_load_include('inc', 'nexteuropa_newsroom', 'nexteuropa_newsroom.forms');
module_load_include('inc', 'nexteuropa_newsroom', 'nexteuropa_newsroom.multilingual');
module_load_include('inc', 'nexteuropa_newsroom', 'nexteuropa_newsroom.features');
module_load_include('inc', 'nexteuropa_newsroom', 'nexteuropa_newsroom.blocks');

define('NEXTEUROPA_NEWSROOM_CONTENT_TYPE', 'newsroom_item');
define('NEXTEUROPA_NEWSROOM_TYPE_VOCABULARY', 'newsroom_item_type');
define('NEXTEUROPA_NEWSROOM_TOPIC_VOCABULARY', 'newsroom_topic');
define('NEXTEUROPA_NEWSROOM_SERVICE_VOCABULARY', 'newsroom_service');
define('NEXTEUROPA_NEWSROOM_TOPIC_OPERATOR_OR', 'OR');
define('NEXTEUROPA_NEWSROOM_CALENDAR_BLOCK', 'calendar');
define('NEXTEUROPA_NEWSROOM_URL', 'http://ec.europa.eu/information_society/newsroom/cf/');
define('NEXTEUROPA_NEWSROOM_PROPOSAL_ACCESS', 'send newsroom item proposal');
define('NEXTEUROPA_NEWSROOM_IMPORT_ACCESS', 'import newsroom feeds');
define('NEXTEUROPA_NEWSROOM_EDIT_ACCESS', 'edit remote newsroom item');
define('NEXTEUROPA_NEWSROOM_CLICKTHROUGH_FORCE', 'force');
define('NEXTEUROPA_NEWSROOM_ITEM_FULL', 'fullrss-multilingual.cfm');
define('NEXTEUROPA_NEWSROOM_UNPUBLISH', 'fullrss-unpublished.cfm');
define('NEXTEUROPA_NEWSROOM_DELETE', 'fullrss-deleted.cfm');
define('NEXTEUROPA_NEWSROOM_ITEM_SEGMENT', NEXTEUROPA_NEWSROOM_ITEM_FULL . '?item_id=');
define('NEXTEUROPA_NEWSROOM_TOPIC_FULL', 'rss-service-multilingual.cfm');
define('NEXTEUROPA_NEWSROOM_TOPIC_SEGMENT', NEXTEUROPA_NEWSROOM_TOPIC_FULL . '?topic_id=');
define('NEXTEUROPA_NEWSROOM_SERVICE_SEGMENT', NEXTEUROPA_NEWSROOM_TOPIC_FULL . '?service_id=');
define('NEXTEUROPA_NEWSROOM_TYPE_FULL', 'rss-item-type-multilingual.cfm');
define('NEXTEUROPA_NEWSROOM_TYPE_SEGMENT', NEXTEUROPA_NEWSROOM_TYPE_FULL . '?item_type_id=');
define('NEXTEUROPA_NEWSROOM_TOPIC_IMPORTER', 'newsroom_topics_multilingual');
define('NEXTEUROPA_NEWSROOM_SERVICE_IMPORTER', 'newsroom_services_multilingual');
define('NEXTEUROPA_NEWSROOM_TYPE_IMPORTER', 'newsroom_types_multilingual');
define('NEXTEUROPA_NEWSROOM_ITEM_IMPORTER', 'newsroom_items_multilingual');
define('NEXTEUROPA_NEWSROOM_CACHE_TABLE', 'cache_newsroom');

global $_newsroom_universe_url;

/**
 * Implements hook_init().
 */
function nexteuropa_newsroom_init() {
  global $_newsroom_universe_url;
  $universe_id = variable_get('newsroom_universe_id', FALSE);
  if ($universe_id) {
    $_newsroom_universe_url = NewsroomHelper::getUniverseUrl($universe_id);
  }
  // We show message in the admin part and for users who has access
  // to site configuration.
  if (path_is_admin(current_path()) && user_access('administer site configuration')) {
    if (empty($universe_id)) {
      $newsroom_config_path = filter_xss(url('admin/config/content/newsroom'));
      drupal_set_message(t('The Newsroom feature needs to be configured before use. Please visit the <a href="!link">configuration page</a>!', array('!link' => $newsroom_config_path)), 'warning', FALSE);
    }
  }

  if (variable_get('newsroom_use_css', 1)) {
    drupal_add_css(drupal_get_path('module', 'nexteuropa_newsroom') . '/styles/nexteuropa_newsroom.css', array('group' => CSS_THEME));
  }
}

/**
 * Implements hook_menu().
 */
function nexteuropa_newsroom_menu() {
  // Configuration page.
  $items['admin/config/content/newsroom'] = array(
    'title' => 'Newsroom',
    'description' => 'Configure Newsroom settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nexteuropa_newsroom_admin_settings'),
    'access arguments' => array('administer newsroom settings'),
    'file' => 'nexteuropa_newsroom.admin.inc',
  );
  $items['news-redirect'] = array(
    'title' => 'Newsroom Item Redirect',
    'page callback' => '_nexteuropa_newsroom_item_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['news-topic-redirect'] = array(
    'title' => 'Newsroom Item Topic Redirect',
    'page callback' => '_nexteuropa_newsroom_topic_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['news-type-redirect'] = array(
    'title' => 'Newsroom Item Type Redirect',
    'page callback' => '_nexteuropa_newsroom_type_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['news-service-redirect'] = array(
    'title' => 'Newsroom Item Service Redirect',
    'page callback' => '_nexteuropa_newsroom_service_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['news-import'] = array(
    'title' => 'Newsroom Item Import',
    'page callback' => '_nexteuropa_newsroom_item_import',
    'access callback' => '_nexteuropa_nexteuropa_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-topic-import'] = array(
    'title' => 'Newsroom Topic Import',
    'page callback' => '_nexteuropa_newsroom_topic_import',
    'access callback' => '_nexteuropa_nexteuropa_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-type-import'] = array(
    'title' => 'Newsroom Type Import',
    'page callback' => '_nexteuropa_newsroom_type_import',
    'access callback' => '_nexteuropa_nexteuropa_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-service-import'] = array(
    'title' => 'Newsroom Service Import',
    'page callback' => '_nexteuropa_newsroom_service_import',
    'access callback' => '_nexteuropa_nexteuropa_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-delete'] = array(
    'title' => 'Newsroom Item Delete',
    'page callback' => '_nexteuropa_newsroom_item_delete',
    'access callback' => '_nexteuropa_nexteuropa_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-topic-delete'] = array(
    'title' => 'Newsroom Topic Delete',
    'page callback' => '_nexteuropa_newsroom_topic_delete',
    'access callback' => '_nexteuropa_nexteuropa_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-type-delete'] = array(
    'title' => 'Newsroom Type Delete',
    'page callback' => '_nexteuropa_newsroom_type_delete',
    'access callback' => '_nexteuropa_nexteuropa_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-service-delete'] = array(
    'title' => 'Newsroom Service Delete',
    'page callback' => '_nexteuropa_newsroom_service_delete',
    'access callback' => '_nexteuropa_nexteuropa_newsroom_item_import_access',
    'type' => MENU_CALLBACK,
  );
  $items['news-dispatcher'] = array(
    'title' => 'Newsroom Item Redirect',
    'page callback' => '_nexteuropa_newsroom_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['news-proposal'] = array(
    'title' => 'Newsroom item proposal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nexteuropa_newsroom_newsroom_proposal_form'),
    'access arguments' => array(NEXTEUROPA_NEWSROOM_PROPOSAL_ACCESS),
  );
  $items['newsroom-agenda'] = array(
    'title' => 'Newsroom Agenda',
    'description' => 'Displays Newsroom items as Agenda',
    'page callback' => '_nexteuropa_newsroom_agenda',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'nexteuropa_newsroom.pages.inc',
  );
  $items['newsletters-list'] = array(
    'title' => 'Newsletters',
    'description' => 'Newsletters service list',
    'page callback' => '_nexteuropa_newsroom_newsletters_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'nexteuropa_newsroom.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function nexteuropa_newsroom_help($path, $arg) {
  $help = '';
  switch ($path) {
    // Help text for the newsroom feature.
    case 'admin/help#nexteuropa_newsroom':
      $help = '<p>' . t('The nexteuropa newsroom feature is meant to integrate the newsroom corporate service into a Drupal nexteuropa/Next Europa client. By enabling it you will have the chance to fetch contents from the newsroom service basing on the configuraiton of your "universe" into your instance of the newsroom. To configure the newsroom you will need to get an "Universe id" from the service provider, you will have this code once your universe has been fully configured as a service and it will be ready to serve you contents. In the newsroom <a href="@newsroom" title="newsroom configuraiton">admin settings page</a> you can then define many of the newsroom behaviours and you can start palying associating you existing content types with the newly imported news coming from the newsroom.', array('@newsroom' => url('admin/config/content/newsroom'))) . '</p>';

      break;
  }

  return $help;
}

/**
 * Implements hook_permission().
 */
function nexteuropa_newsroom_permission() {
  return array(
    'administer newsroom settings' => array(
      'title' => t('Administer Newsroom settings'),
    ),
    'administer newsroom advanced settings' => array(
      'title' => t('Administer all the newsroom settings'),
    ),
    NEXTEUROPA_NEWSROOM_IMPORT_ACCESS => array(
      'title' => t('Import Newsroom feeds'),
    ),
    NEXTEUROPA_NEWSROOM_EDIT_ACCESS => array(
      'title' => t('Edit newsroom item in Newsroom'),
    ),
    NEXTEUROPA_NEWSROOM_PROPOSAL_ACCESS => array(
      'title' => t('Send newsroom item proposal'),
    ),
  );
}

/**
 * Sets feature set api version.
 *
 * @return array
 *   version number
 */
function nexteuropa_newsroom_feature_set_api() {
  return array('version' => '1.0');
}

/**
 * Implements hook_image_default_styles().
 */
function nexteuropa_newsroom_image_default_styles() {
  // Exported image style: newsroom_style.
  $styles['newsroom_style'] = array(
    'name' => 'newsroom_style',
    'label' => 'newsroom_style',
    'effects' => array(
      1 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => 250,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
    ),
  );
  return $styles;
}

/**
 * Implements hook_post_features_enable_feature().
 */
function nexteuropa_newsroom_post_features_enable_feature($component) {
  switch ($component) {
    case 'field_base':
      // Revert the field component,it seems it is not ready after it's enabled.
      features_revert(array('nexteuropa_newsroom' => array($component)));
      break;

    case 'taxonomy':
      // Set translation mode for the vocabularies.
      $importer_id = array(
        'topics' => NEXTEUROPA_NEWSROOM_TOPIC_VOCABULARY,
        'services' => NEXTEUROPA_NEWSROOM_SERVICE_VOCABULARY,
        'types' => NEXTEUROPA_NEWSROOM_TYPE_VOCABULARY,
      );

      foreach ($importer_id as $key => $importer) {
        if (!field_info_instance('taxonomy_term', 'name_field', $importer)) {
          title_field_replacement_toggle('taxonomy_term', $importer, 'name');
        }
        call_user_func('_nexteuropa_newsroom_create_multilingual_' . $key . '_importer');
      }

      cache_clear_all('plugins:feeds:plugins', 'cache');
      break;

    case 'node':
      // No way to generate the node importer without this.
      drupal_static_reset();
      drupal_flush_all_caches();
      // Enable title replacement for the newsroom_item content type.
      if (!field_info_instance('node', 'title_field', NEXTEUROPA_NEWSROOM_CONTENT_TYPE)) {
        title_field_replacement_toggle('node', NEXTEUROPA_NEWSROOM_CONTENT_TYPE, 'title');
      }

      $importer_id = array(
        'items' => 'newsroom_items',
      );
      // Create the dynamic node importer and disable the static ones.
      foreach ($importer_id as $key => $importer) {
        call_user_func('_nexteuropa_newsroom_create_multilingual_' . $key . '_importer');
      }

      cache_clear_all('plugins:feeds:plugins', 'cache');
      break;
  }
}

/**
 * Get instance  view mode settings.
 *
 * @param array|undefined $field_instances
 *   Array or undefined
 * @param array $modes
 *   Array.
 * @param string $bundle 
 *   Array.
 *
 * @return $field_instances
 *   Array.
 */
function _nexteuropa_newsroom_get_real_modes($field_instances, $modes = array('teaser', 'full'), $bundle = NEXTEUROPA_NEWSROOM_CONTENT_TYPE) {
  // Get the current instances.
  $fields = field_info_instances('node', $bundle);

  foreach ($field_instances as $field_name => $instance) {
    // We work only on the content type, for now.
    if (strpos($field_name, 'node-newsroom_item') !== FALSE) {
      // Field names are different in the two arrays.
      $fields_name = str_replace('node-newsroom_item-', '', $field_name);
      // Teaser and full node by default.
      foreach ($modes as $view_mode) {
        // During install we have to check for reliable data.
        if (!empty($fields[$fields_name]['display'][$view_mode]['label'])) {
          // Override the field_instances in features with the current settings.
          $field_instances[$field_name]['display'][$view_mode] = $fields[$fields_name]['display'][$view_mode];
        }
      }
    }
  }

  return $field_instances;
}

/**
 * Get instance  view mode settings.
 *
 * @param array $field_instances
 * @param array $modes
 * @param string $bundle 
 *
 * @return array $field_instances
 */
function _nexteuropa_newsroom_export_modes() {
  $modes = array('full', 'teaser');
  // Get the current instances.
  $fields = field_info_instances('node', $bundle);
  foreach ($fields as $field_name => $field_instance) {
    foreach ($modes as $view_mode) {
      $export[$field_name][$view_mode] = $fields[$field_name]['display'][$view_mode];
    }
  }

  variable_set('nexteuropa_newsroom_view_modes_backup', serialize($export));
  return drupal_set_message(t('You can copy this code and then import it.', 'status') . $export);
}

/**
 * Helper function to check if the universe ID has been already set.
 */
function _nexteuropa_newsroom_check_universe_id() {
  // After initital setup disable Universe ID field.
  $universe_id = array();
  $nri = variable_get('newsroom_universe_id', NULL);
  if (!empty($nri)) {
    $universe_id['disabled'] = TRUE;
    $universe_id['description'] = t('To change the Newsroom Universe ID contact the site administrator.');
    $universe_id['class'] = 'selected';
    $universe_id['collapsing'] = FALSE;
  }
  else {
    $universe_id['disabled'] = FALSE;
    $universe_id['description'] = t('After setting the Newsroom Universe ID for the first time content will be imported from the Newsroom service. This might take a few minutes.');
    $universe_id['class'] = 'not-selected';
    $universe_id['collapsing'] = TRUE;
  }
  return $universe_id;
}

/**
 * Add fields to selected content types.
 *
 * @param string $type
 *   Select or topic fo the moment.
 * @param array $sel_ct
 *   Array of content types machine names.
 */
function _nexteuropa_newsroom_add_fields($type = 'topic', $sel_ct = array()) {
  $field_name = 'field_associated_newsroom_' . $type;

  if (!empty($sel_ct)) {
    foreach ($sel_ct as $machine_name => $content_type) {
      $exist = field_info_instance('node', $field_name, $machine_name);
      // Check for existing instances.
      if ($exist === NULL) {
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => 'node',
          'bundle' => $machine_name,
          'label' => 'Newsroom ' . $type,
          'description' => '',
          'required' => 0,
        );
        field_create_instance($instance);
        // Call the field_group helper function, we surely have to update it.
        _nexteuropa_newsroom_field_group($machine_name, $field_name);
        // Set a message to inform the user about the field instance creation.
        drupal_set_message(t('Created instance of @field in the @bundle content type', array('@field' => $field_name, '@bundle' => $machine_name)));
      }
    }
  }
}

/**
 * Remove all the instances of a fields.
 *
 * @param string $type
 *   Select or topic fo the moment.
 * @param array $sel_ct
 *   Array of content types machine names.
 */
function _nexteuropa_newsroom_remove_fields($type = 'topic', $sel_ct = array()) {
  // This function runs after checking for existing field values in the databas.
  $field_name = 'field_associated_newsroom_' . $type;
  // All is the parameter we get when an user want to delete all the instances.
  if ($sel_ct == 'all') {
    $instances = NewsroomHelper::getFieldInstances($type);
  }
  // Limit the search to the selected content types.
  elseif (!empty($sel_ct)) {
    foreach ($sel_ct as $content_type) {
      $instances[] = $content_type;
    }
  }

  if (!empty($instances)) {
    // Loop through the instances to delete them.
    foreach ($instances as $instance) {
      $instance = field_info_instance('node', $field_name, $instance);
      field_delete_instance($instance, FALSE);
      // Call the field_group helper function, we could have to delete it.
      _nexteuropa_newsroom_field_group($instance['bundle'], $field_name);
      // Add the message to queue.
      drupal_set_message(t('Deleted instance of @field in the @bundle content type', array('@field' => $field_name, '@bundle' => $instance['bundle'])));
    }
  }
}

/**
 * Check if it safe to delete field instances.
 *
 * @param string $type
 *   Select or topic fo the moment.
 * @param array $checks
 *   Array of items to check.
 *
 * @return array
 *   Information about the field name and nodes found.
 */
function _nexteuropa_newsroom_check_deletion($type, $checks = array()) {
  $nodes = array();
  // "All" is the parameter we get to delete all the instances.
  if ($checks == 'all') {
    $instances = NewsroomHelper::getFieldInstances($type);
  }
  else {
    if (!empty($checks)) {
      // Get the instances to check for.
      foreach ($checks as $field => $check) {
        $instances[] = $check;
      }
    }
  }

  if (!empty($instances)) {
    foreach ($instances as $instance) {
      // Check in the database for values of the selected field.
      $query = db_select('field_data_field_associated_newsroom_' . $type, 'ch');
      $query->condition('bundle', $instance, '=');
      $num_rows = $query->countQuery()->execute()->fetchField();
      // There are values, we store the number of nodes to show it to the user.
      if ($num_rows > 0) {
        $nodes['field_data_field_associated_newsroom_' . $type][] = array(
          'ct' => $instance,
          'nodes' => $num_rows,
        );
      }
    }
  }
  return $nodes;
}

/**
 * Prepare check for instances deletion.
 *
 * @param array $previous
 *   Old values.
 * @param array $input
 *   New values.
 *
 * @return array
 *   Variables to pass.
 */
function _nexteuropa_newsroom_prepare_check(array $previous, array $input) {
  // Set some values.
  $selected['topic'] = array_filter($input['newsroom_content_types_topic']);
  $selected['select'] = array_filter($input['newsroom_content_types_select']);
  $check_topic = array();
  $check_select = array();
  // Check the two array for differences. we need to catch also a deselection.
  if ($selected != $previous) {
    $check_topic[] = array_diff($previous['topic'], $selected['topic']);
    $check_topic[] = array_diff($selected['topic'], $previous['topic']);
    $check_select[] = array_diff($previous['select'], $selected['select']);
    $check_select[] = array_diff($selected['select'], $previous['select']);
  }
  // Prepare all the relevant data formatted into an array().
  $infos = array(
    'selected' => array(
      'topic' => $selected['topic'],
      'select' => $selected['select'],
    ),
    'delete' => array(
      'topic' => $input['newsroom_content_types_delete_topic'],
      'select' => $input['newsroom_content_types_delete_select'],
    ),
    'check' => array(
      'topic' => $check_topic,
      'select' => $check_select,
    ),
  );

  return $infos;
}

/**
 * Create a field_group to hold the newsroom fields in a vertical tab.
 *
 * @param string $machine_name
 *   Content type machine name.
 * @param string $field_name
 *   Field machine name.
 */
function _nexteuropa_newsroom_field_group($machine_name, $field_name) {
  // Get info about the group, it's likely to be already in the database.
  $groups = field_group_info_groups('node', $machine_name, 'form', TRUE);
  $fields = array('topic', 'select');
  $group_name = 'group_' . $machine_name . '_newsroom';
  $instances = FALSE;
  // Check for instances of the newsroom fields inside the given content type.
  foreach ($fields as $field) {
    $field_name = 'field_associated_newsroom_' . $field;
    if (field_info_instance('node', $field_name, $machine_name) != NULL) {
      $instances[] = field_info_instance('node', $field_name, $machine_name);
    }
  }
  // If the group is already there, remove it.
  if (isset($groups[$group_name])) {
    db_delete('field_group')
      ->condition('bundle', $machine_name, '=')
      ->condition('group_name', 'group_' . $machine_name . '_newsroom', '=')
      ->execute();
  }
  // Create the group with the right children.
  if ($instances) {
    $field_group = (object) array(
      'identifier' => $group_name . '|node|' . $machine_name . '|form',
      'group_name' => $group_name,
      'entity_type' => 'node',
      'bundle' => $machine_name,
      'mode' => 'form',
      'children' => array(),
      'parent_name' => '',
      'weight' => 5,
      'label' => 'Newsroom fields',
      'format_type' => 'tab',
      'disabled' => FALSE,
      'format_settings' => array(
        'instance_settings' => array(
          'required_fields' => 0,
          'classes' => 'group-newsroom field-group-tab',
          'description' => '',
        ),
        'formatter' => 'closed',
      ),
    );

    foreach ($instances as $instance) {
      $field_group->children[] = $instance['field_name'];
    }

    field_group_group_save($field_group);
  }
  // Remove the group since we don't have fields to show.
  else {
    drupal_set_message(t('Removed the fieldgroup @name from the @content_type content type', array('@name' => $group_name, '@content_type' => $machine_name)), 'status');
  }
}

/**
 * The batch operation.
 *
 * @param array $chunk
 *   The terms to be updated.
 * @param string $voc
 *   Vocabulary's machine name.
 * @param array $operation_details
 *   Array of values.
 */
function nexteuropa_newsroom_restore_batch(array $chunk, $voc, array $operation_details) {

  foreach ($chunk as $id => $fields) {
    // Try to find the corresponding term basing on its ID.
    $term = _nexteuropa_newsroom_get_term_from_id($id, $voc);
    if ($term) {
      // Let's work with an array.
      $term = get_object_vars($term);

      // This is special, make them handable!.
      $special = array(
        'field_newsroom_field_featured_item',
      );

      if (!empty($fields)) {
        // Override values.
        foreach ($fields as $field_name => $value) {
          if (!in_array($propname, $special)) {
            $term[$field_name]['und'][0]['value'] = $value;
          }
          else {
            if (is_numeric($value)) {
              $term[$field_name]['und'][0]['target_id'] = $value;
            }
            else {
              unset($term[$field_name]['und'][0]);
            }
          }
        }

        if (isset($context)) {
          // Build the worked term name list.
          $context['results'][] .= $conf['name'] . ', ';
          $context['message'] = t('Restoring "@title" @operations', array('@title' => $term['name'], '@operations' => $operation_details));
        }
      }
      // Save the term with the new values.
      taxonomy_term_save((object) $term);
    }
  }
}

/**
 * Submit handler.
 */
function nexteuropa_newsroom_backup_conf_all($form, &$form_state) {
  $voc = $form['#vocabulary']->machine_name;
  // We need the whole tree here.
  $tree = taxonomy_get_tree($form['#vocabulary']->vid);

  foreach ($tree as $base_term) {
    $tid = $base_term->tid;
    $term = taxonomy_term_load($tid);
    $id = _nexteuropa_newsroom_get_ids($voc, (array) $term);

    // Working with arrays.
    $term = _nexteuropa_newsroom_export_prepare_values($term);
    $term = reset($term);
    $values[$id] = $term;
  }

  // Save the variable.
  variable_set($voc . '_backup', $values);

  // Set a message to the user.
  drupal_set_message(t('We saved a backup of your configuration for the vocabulary: "@name". if you need to restore the values in the backup click on the "Restore" button', array('@name' => $voc)), 'status');
}

/**
 * Get newsroom id values.
 */
function _nexteuropa_newsroom_get_ids($voc, $data) {
  switch ($voc) {
    case NEXTEUROPA_NEWSROOM_TYPE_VOCABULARY:
      $id = $data['field_newsroom_type_id']['und'][0]['value'];
      break;

    case NEXTEUROPA_NEWSROOM_SERVICE_VOCABULARY:
      $id = $data['field_newsroom_service_id']['und'][0]['value'];
      break;

    case NEXTEUROPA_NEWSROOM_TOPIC_VOCABULARY:
      $id = $data['field_newsroom_topic_id']['und'][0]['value'];
      break;
  }
  return $id;
}

/**
 * Grab the newsroom fields from a term.
 *
 * @param object $term
 *   The term to get the values from.
 *
 * @return array
 *   Formatted values for the newsroom related fields.
 */
function _nexteuropa_newsroom_export_prepare_values($term) {
  $term = get_object_vars($term);
  $voc = $term['vocabulary_machine_name'];
  $id = _nexteuropa_newsroom_get_ids($voc, $term);
  $values = array();
  $values[$id] = array();
  $voc = str_replace('_item', '', $voc);
  foreach ($term as $propname => $prop) {
    // Should work only with custom fields.
    if (strpos($propname, 'field') === 0) {
      if ($propname == 'field_' . $voc . '_id') {
        continue;
      }

      if (isset($prop['und'][0]['value'])) {
        $values[$id][$propname] = $prop['und'][0]['value'];
      }
    }
  }

  return $values;
}

/**
 * Find a term basing on its newsroom id.
 *
 * @param string $id
 *   The id coming from the newsroom.
 * @param string $voc
 *   Vocabulay's machine name.
 *
 * @return object
 *   The term object.
 */
function _nexteuropa_newsroom_get_term_from_id($id, $voc) {
  $field = str_replace('_item', '', $voc);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $voc)
    ->fieldCondition('field_' . $field . '_id', 'value', $id, '=');

  $results = $query->execute();

  if (!empty($results)) {
    $result = reset($results['taxonomy_term']);
    $tid = $result->tid;
    $term = taxonomy_term_load($tid);
  }
  else {
    $term = FALSE;
  }
  return $term;
}

/**
 * Helper function to enable translations for specific fields.
 */
function _nexteuropa_newsroom_enable_translations() {
  // Enable entity translation support for terms.
  $enabled = variable_get('entity_translation_entity_types', array());
  $enabled_types = array_filter($enabled);
  if (!in_array('taxonomy_term', $enabled_types)) {
    $enabled['taxonomy_term'] = 'taxonomy_term';
  }
  if (!in_array('file', $enabled_types)) {
    $enabled['file'] = 'file';
  }
  variable_set('entity_translation_entity_types', $enabled);

  // Enable translations for various fields.
  $field_names = array(
    'body',
    'field_file_image_alt_text',
    'field_file_image_title_text',
    'field_caption',
  );

  foreach ($field_names as $field_name) {
    $field = field_read_field($field_name);
    if ($field) {
      // Make the field translatable.
      $field['translatable'] = 1;
      field_update_field($field);
    }
  }
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Resolves alias if the content is not translated.
 */
function nexteuropa_newsroom_url_inbound_alter(&$path, $original_path, $path_language) {
  // Check if no url alias has not been found for incoming path.
  if ($path && $path == $original_path) {
    // Resolve alias if the content is not translated to current language. Get
    // alias of existing translation.
    foreach (array_keys(language_list()) as $language) {
      if ($source = drupal_lookup_path('source', $path, $language)) {
        // Check if we are at the document page.
        if (strpos($source, 'node/') === 0) {
          $path = $source;
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Resolves alias from node language if the content is not translated.
 */
function nexteuropa_newsroom_url_outbound_alter(&$path, &$options, $original_path) {
  if (preg_match('/^node\/\d+$/', $path) && $node = menu_get_object('node', 1, $path)) {
    if ($alias = drupal_get_path_alias($path, $node->language)) {
      $path = $alias;
    }
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function nexteuropa_newsroom_strongarm_alter(&$variables) {
  // Unset a "dynamic variable" created by cce_basic_config.
  unset($variables['image_captcha_fonts']);
  unset($variables['print_pdf_pdf_tool']);
}

/**
 * Rebuild multilingual importers.
 */
function _nexteuropa_newsroom_rebuild_importers() {
  // Remove importers.
  $importers = array(
    'items' => NEXTEUROPA_NEWSROOM_ITEM_IMPORTER,
    'services' => NEXTEUROPA_NEWSROOM_SERVICE_IMPORTER,
    'topics' => NEXTEUROPA_NEWSROOM_TOPIC_IMPORTER,
    'types' => NEXTEUROPA_NEWSROOM_TYPE_IMPORTER,
  );

  foreach ($importers as $key => $importer) {
    feeds_importer($importer)->delete();
    // Recreate them.
    call_user_func('_nexteuropa_newsroom_create_multilingual_' . $key . '_importer');
  }

  $form['rebuilt'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="messages status">' . t('Importers have been rebuilt') . '</div>',
  );

  return $form['rebuilt'];
}

/**
 * Implements hook_node_presave().
 */
function nexteuropa_newsroom_node_presave($node) {
  if ($node->type == NEXTEUROPA_NEWSROOM_CONTENT_TYPE && variable_get('newsroom_patterns', FALSE)) {
    // Get all the types.
    if (isset($node->field_newsroom_item_type['und'][0]['tid'])) {
      $type_tid = $node->field_newsroom_item_type['und'][0]['tid'];
      $type = pathauto_cleanstring(drupal_strtolower(taxonomy_term_load($type_tid)->name));
      $conf = variable_get('newsroom_' . $type . '_root', FALSE);
      if ($conf) {
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = $conf . '/' . pathauto_cleanstring($node->title);
      }
    }
  }
}

/**
 * Implements hook_date_format_types().
 */
function nexteuropa_newsroom_date_format_types() {
  return array(
    'date_only' => t('Date only'),
  );
}

/**
 * Implements hook_date_formats().
 */
function nexteuropa_newsroom_date_formats() {
  return array(
    array(
      'type' => 'date_only',
      'format' => 'd/m/Y',
      'locales' => array(),
    ),
  );
}

/**
 * Validate if a given Newsroom Universe exists.
 *
 * @param string $universe_id
 *   Newsroom Universe ID.
 *
 * @return bool
 *   Newsroom Universe exists or not.
 */
function _nexteuropa_newsroom_validate_universe($universe_id = NULL) {
  if ($universe_id) {
    // logout.cfm is used because it is always available if a universe exists.
    $test = chr_curl_http_request(NEXTEUROPA_NEWSROOM_URL . $universe_id . '/logout.cfm');
    return $test->code == 200;
  }

  return FALSE;
}

/**
 * Returns the Click-through setting for a given item.
 *
 * @param EntityMetadataWrapper $node_wrapper
 *   Newsroom Item node wrapper.
 *
 * @return string
 *   Value of the Click-through field of the item type.
 */
function _nexteuropa_newsroom_item_type_teaser_only_settings(EntityMetadataWrapper $node_wrapper) {
  $value = NULL;
  if ($node_wrapper) {
    $type = $node_wrapper->__isset('field_newsroom_item_type') ? $node_wrapper->field_newsroom_item_type->value() : NULL;
    if ($type) {
      $type_wrapper = entity_metadata_wrapper('taxonomy_term', $type);
      if ($type_wrapper) {
        $value = $type_wrapper->__isset('field_direct_link_if_teaser_only') ? $type_wrapper->field_direct_link_if_teaser_only->value() : NULL;
      }
    }
  }
  return $value;
}

/**
 * Creates default set of importers.
 *
 * @param int $universe_id
 *   Universe ID.
 * @param string $context
 *   Execution context.
 */
function _nexteuropa_newsroom_create_default_importers($universe_id, $context = 'admin') {
  // Run the multilingual imports if required.
  $importers['newsroom_types_multilingual_importer'] = array(
    'segment' => variable_get('newsroom_single_type_import_segment', NEXTEUROPA_NEWSROOM_TYPE_FULL),
    'importer' => NEXTEUROPA_NEWSROOM_TYPE_IMPORTER,
  );
  $importers['newsroom_services_multilingual_importer'] = array(
    'segment' => variable_get('newsroom_single_service_import_segment', NEXTEUROPA_NEWSROOM_TOPIC_FULL),
    'importer' => NEXTEUROPA_NEWSROOM_SERVICE_IMPORTER,
  );
  $importers['newsroom_topics_multilingual_importer'] = array(
    'segment' => variable_get('newsroom_single_topic_import_segment', NEXTEUROPA_NEWSROOM_TOPIC_FULL),
    'importer' => NEXTEUROPA_NEWSROOM_TOPIC_IMPORTER,
  );
  $importers['newsroom_items_multilingual_importer'] = array(
    'segment' => variable_get('newsroom_single_item_import_segment', NEXTEUROPA_NEWSROOM_ITEM_FULL),
    'importer' => NEXTEUROPA_NEWSROOM_ITEM_IMPORTER,
  );
  $importers['newsroom_unpublished_items'] = array(
    'segment' => NEXTEUROPA_NEWSROOM_UNPUBLISH,
    'importer' => 'newsroom_unpublished_items',
  );
  $importers['newsroom_deleted_items'] = array(
    'segment' => NEXTEUROPA_NEWSROOM_DELETE,
    'importer' => 'newsroom_deleted_items',
  );

  foreach ($importers as $importer) {
    $feed_source = feeds_source($importer['importer']);
    $config = $feed_source->getConfig();
    $config['FeedsHTTPFetcher']['source'] = NewsroomHelper::getUniverseUrl($universe_id) . $importer['segment'];
    $feed_source->setConfig($config);
    $feed_source->save();
    $batch = array(
      'title' => t('Importing !title', array('!title' => $importer['importer'])),
      'operations' => array(
        array('feeds_batch', array('import', $importer['importer'], 0)),
      ),
      'progress_message' => t('Current: @current | Remaining:
      @remaining | Total: @total | Percentage: @percentage | Estimate:
      @estimate | Elapsed: @elapsed'),
    );
    $batch['progressive'] = FALSE;
    batch_set($batch);
  }
  if ($context == 'drush') {
    drush_print(dt('Importing items, this might take a while...'));
    drush_backend_batch_process();
  }
}

/**
 * Implements hook_views_data_alter().
 */
function nexteuropa_newsroom_views_data_alter(&$data) {
  $data['node']['nexteuropa_newsroom_term_node_tid_depth'] = array(
    'help' => t('Display content if it has the selected taxonomy terms, or children of the selected terms. Due to additional complexity, this has fewer options than the versions without depth.'),
    'real field' => 'nid',
    'argument' => array(
      'title' => t('Newsroom: Has taxonomy term ID (with depth)'),
      'handler' => 'nexteuropa_newsroom_handler_argument_term_node_tid_depth',
      'accept depth modifier' => TRUE,
    ),
  );
  // Term name field.
  $data['taxonomy_term_data']['name'] = array(
    'title' => t('Name'),
    'help' => t('The taxonomy term name.'),
    'field' => array(
      'handler' => 'nexteuropa_newsroom_views_handler_field_taxonomy',
      'click sortable' => TRUE,
    ),
  );
}

/**
 * Implements hook_feeds_plugins().
 */
function nexteuropa_newsroom_feeds_plugins() {
  $info = array();
  // A plugin needs to derive either directly or indirectly from FeedsFetcher,
  // FeedsParser or FeedsProcessor.
  $info['NewsroomDeleteNodeProcessor'] = array(
    'name' => 'Newsroom Outdated Items',
    'description' => 'Deletes outdated items by tracking a specific RSS feed.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'NewsroomDeleteNodeProcessor',
      'file' => 'NewsroomDeleteNodeProcessor.inc',
      'path' => drupal_get_path('module', 'nexteuropa_newsroom') . '/plugins',
    ),
  );

  return $info;
}

/**
 * Implements hook_views_query_alter().
 */
function nexteuropa_newsroom_views_query_alter(&$view, &$query) {
  if ($view->name === 'newsroom_page_content' && (!isset($view->sticky) || !$view->sticky)) {
    foreach ($query->where[1]['conditions'] as $key => $condition) {
      if ($condition['field'] == 'node.sticky') {
        unset($query->where[1]['conditions'][$key]);
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function nexteuropa_newsroom_node_view($node, $view_mode, $langcode) {
  if ($node->type == NEXTEUROPA_NEWSROOM_CONTENT_TYPE &&
    in_array($view_mode, array('full', 'event', 'events'))) {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $type = $node_wrapper->__isset('field_newsroom_item_type') ? $node_wrapper->field_newsroom_item_type->value() : NULL;
    $type_wrapper = entity_metadata_wrapper('taxonomy_term', $type);

    // Redirect item if redirection is forced for this type.
    // Except for editors who can import items.
    if (!user_access(NEXTEUROPA_NEWSROOM_IMPORT_ACCESS)) {
      // Only if we have a main link.
      if ($type && $node_wrapper->__isset('field_newsroom_item_main_link')) {
        if (_nexteuropa_newsroom_item_type_teaser_only_settings($node_wrapper) == NEXTEUROPA_NEWSROOM_CLICKTHROUGH_FORCE) {
          $link = $node_wrapper->field_newsroom_item_main_link->value();
          drupal_goto($link['url'], array(), 301);
        }
      }
    }

    // Fetch menu context for item so we can have an active trail set for it.
    // Basically we try to find a menu item (node||term) that has the same Topic
    // associated than the NR item has as primary topic (or as normal topic).
    $topics = NewsroomHelper::getNodeTopics($node_wrapper);
    // Loop through topics (start with primary) to find menu item.
    foreach ($topics as $topic) {
      if ($path = NewsroomHelper::fetchActiveMenu($topic->tid)) {
        // Set menu item and stop the search.
        menu_tree_set_path('main-menu', $path);
        break;
      }
    }

    // Custom main link title per type.
    if ($type && $node_wrapper->__isset('field_newsroom_item_main_link')) {
      // Case there is a custom read more text set, change it.
      if ($type_wrapper->__isset('field_read_more_text') && $type_wrapper->field_read_more_text->value()) {
        $node->content['field_newsroom_item_main_link'][0]['#element']['title'] = $type_wrapper->field_read_more_text->value();
      }
    }

    // Custom resposible person label per type.
    if ($type && $node_wrapper->__isset('field_newsroom_item_speaker')) {
      // Case there is a custom read more text set, change it.
      if ($type_wrapper->__isset('field_responsible_person_label') && $type_wrapper->field_responsible_person_label->value()) {
        $node->content['field_newsroom_item_speaker']['#title'] = $type_wrapper->field_responsible_person_label->value();
      }
    }
  }
}

/**
 * Controls access to page based on IP (newsroom server) and role.
 */
function _nexteuropa_nexteuropa_newsroom_item_import_access() {
  $allowed_ips = array_map('trim', explode(',', variable_get('newsroom_allowed_ips')));
  return user_access(NEXTEUROPA_NEWSROOM_IMPORT_ACCESS) ? TRUE : in_array(ip_address(), $allowed_ips);
}

/**
 * Imports or deletes a single taxonomy term item based on real newsroom ID.
 */
function _nexteuropa_newsroom_taxonomy_term_importer($field_title, $redirect_path, $field_name, $url, $importer_id, $tid = 0, $delete = FALSE, $reimport = FALSE) {

  if ($tid == 0) {
    drupal_not_found();
    drupal_exit();
  }

  if ($delete) {
    $terms = NewsroomHelper::getTaxonomyTermFromField($field_name, $tid);
    if ($terms) {
      taxonomy_term_delete($terms[0]);

      $message = t('Newsroom %2 tid: %1 deleted', array(
        '%1' => implode(', ', $terms),
        '%2' => $field_title,
      )
      );
      watchdog('newsroom', $message);
      drupal_set_message($message);
      return '';
    }
    else {
      drupal_not_found();
      drupal_exit();
    }
  }
  else {
    NewsroomHelper::runFeedImporter($url, $importer_id);
    $path = $redirect_path . '/' . $tid;
    if ($reimport) {
      drupal_goto($path);
    }
    return l(t('Go to Newsroom @field_title', array('@field_title' => $field_title)), $path);
  }
}

/**
 * Imports or deletes a single news item based on the original newsroom ID.
 */
function _nexteuropa_nexteuropa_newsroom_item_importer($newsroom_id = 0, $delete = FALSE, $reimport = FALSE) {
  global $_newsroom_universe_url;

  if ($newsroom_id == 0) {
    drupal_not_found();
    drupal_exit();
  }

  if ($delete) {
    $newsroom_item = NewsroomHelper::getNodeByNewsroomItemId($newsroom_id);
    if ($newsroom_item) {
      $nids_to_delete = array_keys($newsroom_item);
      node_delete_multiple($nids_to_delete);
      $message = t('Newsroom Item nid: %1 deleted', array('%1' => implode(', ', $nids_to_delete)));
      watchdog('newsroom', $message);
      drupal_set_message($message);
      return '';
    }
    else {
      drupal_not_found();
      drupal_exit();
    }
  }
  else {
    // Prepare URLs for importers and get feed importer ID.
    $url = NewsroomHelper::buildImportUrl(variable_get('newsroom_single_item_import_segment', NEXTEUROPA_NEWSROOM_ITEM_SEGMENT) . $newsroom_id);
    NewsroomHelper::runFeedImporter($url, NEXTEUROPA_NEWSROOM_ITEM_IMPORTER);
    $path = 'news-redirect/' . $newsroom_id;
    if ($reimport) {
      drupal_goto($path);
    }
    return l(t('Go to Newsroom Item'), $path);
  }
}

/**
 * Shortcut to delete a Newsroom Type.
 *
 * @param int $type_id
 *   Original type id.
 *
 * @return string
 *   Message.
 */
function _nexteuropa_newsroom_type_delete($type_id = 0) {
  return _nexteuropa_newsroom_type_importer($type_id, TRUE);
}

/**
 * Shortcut to delete a Newsroom Type.
 *
 * @param int $type_id
 *   Original type id.
 * @param bool $reimport
 *   Redirect to newsroom page or display message.
 *
 * @return string
 *   Message.
 */
function _nexteuropa_newsroom_type_import($type_id = 0, $reimport = NULL) {
  return _nexteuropa_newsroom_type_importer($type_id, FALSE, $reimport == 'reimport');
}

/**
 * Calls general method to import taxonomy term with params for newsroom type.
 *
 * @param int $type_id
 *   Original type id.
 * @param bool $delete
 *   Defines delete or import item.
 * @param bool $reimport
 *   Redirect to newsroom page or display message.
 *
 * @return string
 *   Message
 */
function _nexteuropa_newsroom_type_importer($type_id, $delete = FALSE, $reimport = FALSE) {
  $url = NewsroomHelper::buildImportUrl(variable_get('newsroom_single_type_import_segment', NEXTEUROPA_NEWSROOM_TYPE_SEGMENT) . $type_id);
  return _nexteuropa_newsroom_taxonomy_term_importer('Type', 'news-type-redirect', 'field_newsroom_type_id', $url, NEXTEUROPA_NEWSROOM_TYPE_IMPORTER, $type_id, $delete, $reimport);
}

/**
 * Shortcut to delete a Newsroom Service.
 *
 * @param int $service_id
 *   Original service id.
 *
 * @return string
 *   Message
 */
function _nexteuropa_newsroom_service_delete($service_id = 0) {
  return _nexteuropa_newsroom_service_importer($service_id, TRUE);
}

/**
 * Shortcut to delete a Newsroom Service.
 *
 * @param int $service_id
 *   Service taxonomy term id.
 * @param bool $reimport
 *   Redirect to newsroom page or display message.
 *
 * @return string
 *   Message.
 */
function _nexteuropa_newsroom_service_import($service_id = 0, $reimport = NULL) {
  return _nexteuropa_newsroom_service_importer($service_id, FALSE, $reimport == 'reimport');
}

/**
 * Calls general method to import taxonomy term with params for news service.
 *
 * @param int $service_id
 *   Original service id.
 * @param bool $delete
 *   Defines delete or import item.
 * @param bool $reimport
 *   Redirect to newsroom page or display message.
 *
 * @return string
 *   Message.
 */
function _nexteuropa_newsroom_service_importer($service_id, $delete = FALSE, $reimport = FALSE) {
  $url = NewsroomHelper::buildImportUrl(variable_get('newsroom_single_service_import_segment', NEXTEUROPA_NEWSROOM_SERVICE_SEGMENT) . $service_id);
  return _nexteuropa_newsroom_taxonomy_term_importer('Service', 'news-service-redirect', 'field_newsroom_service_id', $url, NEXTEUROPA_NEWSROOM_SERVICE_IMPORTER, $service_id, $delete, $reimport);
}

/**
 * Shortcut to delete a Newsroom Topic.
 *
 * @param int $topic_id
 *   Original topic id.
 *
 * @return string
 *   Message.
 */
function _nexteuropa_newsroom_topic_delete($topic_id = 0) {
  return _nexteuropa_newsroom_topic_importer($topic_id, TRUE);
}

/**
 * Shortcut to delete a Newsroom Topic.
 *
 * @param int $topic_id
 *   Original topic id.
 * @param bool $reimport
 *   Redirect to newsroom page or display message.
 *
 * @return string
 *   Message.
 */
function _nexteuropa_newsroom_topic_import($topic_id = 0, $reimport = NULL) {
  return _nexteuropa_newsroom_topic_importer($topic_id, FALSE, $reimport == 'reimport');
}

/**
 * Calls general method to import taxonomy term with params for newsroom topic.
 *
 * @param int $topic_id
 *   Original topic id.
 * @param bool $delete
 *   Defines delete or import item.
 * @param bool $reimport
 *   Redirect to newsroom page or display message.
 *
 * @return string
 *   Message
 */
function _nexteuropa_newsroom_topic_importer($topic_id, $delete = FALSE, $reimport = FALSE) {
  $url = NewsroomHelper::buildImportUrl(variable_get('newsroom_single_topic_import_segment', NEXTEUROPA_NEWSROOM_TOPIC_SEGMENT) . $topic_id);
  return _nexteuropa_newsroom_taxonomy_term_importer('Topic', 'news-topic-redirect', 'field_newsroom_topic_id', $url, NEXTEUROPA_NEWSROOM_TOPIC_IMPORTER, $topic_id, $delete, $reimport);
}

/**
 * Shortcut to delete a Newsroom Item.
 */
function _nexteuropa_newsroom_item_delete($newsroom_id = 0) {
  return _nexteuropa_nexteuropa_newsroom_item_importer($newsroom_id, TRUE);
}

/**
 * Shortcut to import a Newsroom Item.
 */
function _nexteuropa_newsroom_item_import($newsroom_id = 0, $reimport = NULL) {
  return _nexteuropa_nexteuropa_newsroom_item_importer($newsroom_id, FALSE, $reimport == 'reimport');
}

/**
 * Redirects to the Newsroom Item. With the Original Newsroom ID.
 */
function _nexteuropa_newsroom_item_redirect($newsroom_id = 0) {
  return _nexteuropa_newsroom_redirect('item', $newsroom_id);
}

/**
 * Redirects to the Newsroom Item Topic. With the Original Newsroom Topic ID.
 */
function _nexteuropa_newsroom_topic_redirect($topic_id = 0, $direct = 0) {
  return _nexteuropa_newsroom_redirect('topic', $topic_id, $direct);
}

/**
 * Redirects to the Newsroom Item Type. With the Original Newsroom Type ID.
 */
function _nexteuropa_newsroom_type_redirect($type_id = 0, $direct = 0) {
  return _nexteuropa_newsroom_redirect('type', $type_id, $direct);
}

/**
 * Redirects to the Newsroom Service. With the Original Newsroom Service ID.
 */
function _nexteuropa_newsroom_service_redirect($service_id = 0) {
  return _nexteuropa_newsroom_redirect('service', $service_id);
}

/**
 * Redirects to the Newsroom Item with the Original Newsroom ID.
 */
function _nexteuropa_newsroom_redirect($redirect_type = 'item', $param_1 = 0, $param_2 = 0) {
  if (!$param_1) {
    drupal_not_found();
  }

  $path = FALSE;
  switch ($redirect_type) {
    // Newsroom Article based on original newsroom ID.
    case 'item':
      $item = NewsroomHelper::getNodeByNewsroomItemId($param_1);
      if (!empty($item)) {
        $item = array_shift($item);
        $path = 'node/' . $item->nid;
      }
      break;

    // Newsroom Item Type based on original import name.
    case 'type':
      $type = NewsroomHelper::getTaxonomyTermFromField('field_newsroom_type_id', $param_1);
      if ($type) {
        $type_term = taxonomy_term_load($type[0]);
        if (!empty($param_2)) {
          $path = 'taxonomy/term/' . $type_term->tid;
        }
        else {
          $path = NewsroomHelper::getNewsroomUrl(pathauto_cleanstring($type_term->name));
        }
      }
      break;

    // Newsroom Chapter based on original newsroom topic ID.
    case 'topic':
      $topic = NewsroomHelper::getTaxonomyTermFromField('field_newsroom_topic_id', $param_1);
      if ($topic) {
        $topic_term = taxonomy_term_load($topic[0]);
        if (!empty($param_2)) {
          $path = 'taxonomy/term/' . $topic_term->tid;
        }
        else {
          $path = NewsroomHelper::getNewsroomUrl('all', pathauto_cleanstring($topic_term->name));
        }
      }
      break;

    // Newsroom type and topic.
    case 'topic-type':
      $topic = NewsroomHelper::getTaxonomyTermFromField('field_newsroom_topic_id', $param_1);
      $type = NewsroomHelper::getTaxonomyTermFromField('field_newsroom_type_id', $param_2);
      if ($topic && $type) {
        $type_term = taxonomy_term_load($type[0]);
        $topic_term = taxonomy_term_load($topic[0]);
        $path = NewsroomHelper::getNewsroomUrl(pathauto_cleanstring($type_term->name), pathauto_cleanstring($topic_term->name));
      }
      break;

    // Newsroom service.
    case 'service':
      $service = NewsroomHelper::getTaxonomyTermFromField('field_newsroom_service_id', $param_1);

      if ($service) {
        $taxonomy_term = taxonomy_term_load($service[0]);
        if ($taxonomy_term) {
          $path = 'taxonomy/term/' . $taxonomy_term->tid;
        }
      }
      break;
  }

  if ($path) {
    drupal_goto($path);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implements pre_render_hook().
 */
function nexteuropa_newsroom_views_pre_render(&$view) {
  // Mark items as new if a user did't see it before.
  if (user_is_logged_in() && $view->name == 'newsroom_page_content') {
    foreach ($view->result as $key => $result) {
      if ($result->node_created < time() - 14 * 86400) {
        continue;
      }

      $last_viewed = node_last_viewed($result->nid);

      if (empty($last_viewed)) {
        $new_title = empty($result->field_field_newsroom_item_short_title[0]['rendered']['#markup']) ? $result->field_title_field_et[0]['rendered']['#markup'] : $result->field_field_newsroom_item_short_title[0]['rendered']['#markup'];
        $view->result[$key]->field_field_newsroom_item_short_title[0]['rendered']['#markup'] = '<span class="itemFlag flagHot newItem">' . t('New') . '</span> ' . $new_title;
      }
    }
  }

  if ($view->name == 'newsroom') {

    // Replace [newsroom_url_prefix] for view area to site prefix
    // for example 'digital-agenda'.
    $areas = array('header', 'footer', 'empty');
    foreach ($areas as $area) {
      if (isset($view->$area)) {
        $area_item = $view->$area;
        foreach ($area_item as $key => $value) {
          if (isset($area_item[$key]->options['content'])) {
            $area_item[$key]->options['content'] = str_replace('[newsroom_url_prefix]', variable_get('newsroom_url_prefix', ''), $area_item[$key]->options['content']);
          }
        }
        $view->$area = $area_item;
      }
    }

    // TODO : find the solution to avoid No name in substitutions.
    if ($view->build_info['substitutions']['%2'] == 'No name') {
      $view->build_info['substitutions']['%2'] = '';
    }

    if (in_array($view->current_display, array('previous_events', 'previous_consultation_funding'))) {
      $view->build_info['title'] = str_replace('<span class="filter_type">', '<span class="filter_type"> Past ', $view->build_info['title']);
    }

    // If there is more than one parameter.
    if (count(explode('+', $view->build_info['substitutions']['!1'])) > 1) {
      $tids = explode('+', $view->build_info['substitutions']['!1']);
      // If there are several ids, it means we have a parent and children items
      // we try to find the parent and use it's title.
      $title_item = '';
      foreach ($tids as $tid) {
        if (taxonomy_get_children($tid)) {
          $term = taxonomy_term_load($tid);
          if ($term) {
            $title_item = $term->name;
          }
          break;
        }
      }

      if (!empty($title_item)) {
        $view->build_info['substitutions']['%1'] = $title_item;
      }
    }

    if ($view->build_info['substitutions']['!2'] == 'all') {
      if (isset($view->header['area_text_custom'])) {
        $view->header['area_text_custom']->options['content'] = str_replace('about %2', '', $view->header['area_text_custom']->options['content']);
      }
    }
    else {
      $view->build_info['title'] = str_replace('<span class="filter_topic">', '<span class="filter_topic">about ', $view->build_info['title']);
      if (count(explode(' ', $view->build_info['substitutions']['!2']) > 1)) {
        $view->build_info['substitutions']['%2'] = str_replace(' + ', ' & ', $view->build_info['substitutions']['%2']);
      }
    }

    if ($view->build_info['substitutions']['%1'] == '' && $view->build_info['substitutions']['%2'] == '' || $view->build_info['substitutions']['%1'] == '' && $view->build_info['substitutions']['%2'] == 'all') {
      $view->build_info['title'] = isset($view->display[$view->current_display]->display_options['title']) ? $view->display[$view->current_display]->display_options['title'] : $view->display['default']->display_options['title'];
    }

    // Inculde Featured item per type only on first page.
    if (isset($view->header['view']) && isset($view->header['view']->options['ui_name']) && $view->header['view']->options['ui_name'] == 'featured') {
      $page = isset($_GET['page']) ? $_GET['page'] : NULL;
      if (!empty($page)) {
        unset($view->header['view']);
      }
    }
  }
}

/**
 * Preview view hook.
 *
 * @param object $view
 *   View entity.
 * @param int $display_id
 *   Display Id.
 * @param array $args
 *   Arguments.
 */
function nexteuropa_newsroom_views_pre_view(&$view, &$display_id, array &$args) {

  if ($view->name == 'newsletter_subscription') {
    // The proper context filter cannot be found for taxonomy term pages
    // so we set it manually.
    $current_path = menu_get_item();

    // Try to get proper taxonomy context filter.
    if ($current_path['path'] === 'taxonomy/term/%') {
      $taxonomy_term = NULL;
      $current_page_path = current_path();

      // Never sure what menu_callback will get you with.
      // A view overridding a taxo page.
      $url_tokens = explode('/', $current_page_path);
      if (isset($url_tokens[2]) && is_numeric($url_tokens[2])) {
        $taxonomy_term = taxonomy_term_load($url_tokens[2]);
      }

      if (!empty($taxonomy_term) && isset($taxonomy_term->field_associated_newsroom_topic) && !empty($taxonomy_term->field_associated_newsroom_topic)) {
        $has_newsroom_topic_argument = FALSE;
        // Check the current display.
        if (isset($view->display[$view->current_display]->handler->options['arguments'])) {
          foreach ($view->display[$view->current_display]->handler->options['arguments'] as $key => $argument) {
            // Check if this field taxonomy ref to newsroom_topic vocabulary.
            if ($argument['default_argument_type'] == 'taxonomy_tid' && isset($argument['default_argument_options']['vocabularies']['newsroom_topic'])) {
              $has_newsroom_topic_argument = TRUE;
              break;
            }
          }
        }

        // Check the default display, if we don't have ovverrides.
        if (isset($view->display['default']->handler->options['arguments'])) {
          foreach ($view->display['default']->handler->options['arguments'] as $key => $argument) {
            // Check if this field taxonomy ref to newsroom_topic vocabulary.
            if ($argument['default_argument_type'] == 'taxonomy_tid' &&
              isset($argument['default_argument_options']['vocabularies']['newsroom_topic'])) {
              $has_newsroom_topic_argument = TRUE;
              break;
            }
          }
        }

        // Set argument from the taxonomy associated newsroom topic.
        if ($has_newsroom_topic_argument) {
          $args = array($taxonomy_term->field_associated_newsroom_topic[LANGUAGE_NONE][0]['tid']);
        }
      }
    }
  }

  if ($view->name == 'newsroom') {
    $arguments_settings = $view->display[$view->current_display]->handler->get_option('arguments');

    // Select the appropriate display in case only one type is set.
    if ($display_id == 'default_newsroom' && isset($args[0]) && $args[0] !== $arguments_settings['term_node_tid_depth']['default_argument_options']['argument']) {
      $display_field = 'default';

      $is_previous = isset($args[2]) && $args[2] == 'previous';

      // Convert topic url part to taxonomy term id
      // and assign to arguments, because we use 'tids' validation.
      if (isset($args[1]) && !empty($args[1]) && $args[1] != 'all') {
        $vocabularies = isset($arguments_settings['term_node_tid_depth_1']['validate_options']['vocabularies']) ? array_values($arguments_settings['term_node_tid_depth_1']['validate_options']['vocabularies']) : array();
        $topic = NewsroomHelper::getTermFromRequest($args[1], $vocabularies);

        if ($topic) {
          $args[1] = $topic->tid;
        }
      }

      $types = explode(' ', $args[0]);

      if (count($types) == 1) {
        // Convert type or topic url part to taxonomy term id
        // and assign to arguments, because we use 'tids' validation.
        $vocabularies = isset($arguments_settings['term_node_tid_depth']['validate_options']['vocabularies']) ? array_values($arguments_settings['term_node_tid_depth']['validate_options']['vocabularies']) : array();
        $type = NewsroomHelper::getTermFromRequest($types[0], $vocabularies);
        if ($type) {
          $type = is_array($type) ? array_shift($type) : $type;
          // Take children types IDs and use them as argument
          // because we need to make search in children types also.
          $args[0] = implode('+', NewsroomHelper::getTermChildren($type->tid, $type->vid));

          $wrapper = entity_metadata_wrapper('taxonomy_term', $type);
          if ($wrapper->__isset('field_newsroom_type')) {
            $display_field = $wrapper->field_newsroom_type->value();
          }
        }
        else {
          $args[0] = 'all';
        }

        switch ($display_field) {
          case 'events':
            $display = $is_previous ? 'previous_events' : 'events';
            break;

          case 'consultation_funding':
            $display = $is_previous ? 'previous_consultation_funding' : 'consultation_funding';
            break;

          default:
            $display = 'default_newsroom';
            break;
        }

        $view->set_display($display);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function nexteuropa_newsroom_theme($existing, $type, $theme, $path) {
  $theme_path = $path . '/theme';
  return array(
    'newsroom_services_page' => array(
      'variables' => array(
        'central_items' => NULL,
        'basic_items' => NULL,
        'privacy_statement' => NULL,
      ),
      'template' => 'newsroom-service-page',
      'path' => $theme_path,
    ),
    'newsroom_services_items' => array(
      'variables' => array(
        'items' => array(),
        'css_class' => NULL,
        'title' => NULL,
      ),
      'template' => 'newsroom-service-items',
      'path' => $theme_path,
    ),
    'newsroom_related_content' => array(
      'variables' => array(
        'parent_items' => array(),
        'current_item' => NULL,
        'children_items' => array(),
      ),
      'template' => 'related-content',
      'path' => $theme_path,
    ),
    'newsroom_zoomable_image' => array(
      'variables' => array(
        'image_output' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'title' => NULL,
        'copyright' => NULL,
        'caption' => NULL,
        'path_to_original' => NULL,
        'zoomable' => FALSE,
        'display_title' => FALSE,
      ),
      'template' => 'zoomable-image',
      'path' => $theme_path,
    ),
    'newsroom_summary' => array(
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'highlighted' => NULL,
      ),
      'template' => 'newsroom-summary-block',
      'path' => $theme_path,
    ),
    'newsroom_summary_block' => array(
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'classes' => array(),
        'type_url' => NULL,
        'url' => NULL,
      ),
      'template' => 'newsroom-block',
      'path' => $theme_path,
    ),
    'newsroom_summary_block_item' => array(
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'classes' => array(),
        'type_url' => NULL,
        'url' => NULL,
      ),
      'template' => 'newsroom-block-item',
      'path' => $theme_path,
    ),
    'newsroom_agenda_page' => array(
      'variables' => array(
        'filter_form' => NULL,
        'date_form' => NULL,
        'next_event_items' => array(),
        'items' => array(),
        'navigation' => NULL,
        'is_block' => FALSE,
      ),
      'template' => 'newsroom-agenda',
      'path' => $theme_path,
    ),
  );
}

/**
 * Implements hook_preprocess_views_viewnewsroom_preprocess_views_view().
 */
function nexteuropa_newsroom_preprocess_views_view(&$vars) {

  if ($vars['view']->name !== 'newsroom_page_content' || $vars['view']->current_display !== 'agenda') {
    return;
  }

  $agenda = _nexteuropa_newsroom_prepare_agenda($vars['view']);

  if ($agenda) {
    $vars['rows'] = theme('newsroom_agenda', $agenda);
  }
}

/**
 * Build a render array representing the events.
 *
 * @param object $view
 *   The view object.
 *
 * @return array
 *   A render array of events.
 */
function _nexteuropa_newsroom_prepare_agenda($view) {
  if (empty($view->result)) {
    return array();
  }
  $today = date('Y-m-d', time());
  $events = array();
  $renderer = $view->style_plugin->row_plugin;
  foreach ($view->result as $delta => $row) {
    // Render row to be able to use views for formatting the fields.
    $view->row_index = $delta;
    $rendered_row = $renderer->render($row);

    // Collect all fields for the customize options.
    $fields = array();
    // Collect only date fields.
    $date_fields = array();
    foreach ($view->field as $field_name => $field) {
      $fields[$field_name] = $view->style_plugin->get_field($delta, $field_name);
      if (fullcalendar_field_is_date($field)) {
        $date_fields[$field_name] = array(
          'value' => $field->get_items($row),
          'field_alias' => $field->field_alias,
          'field_name' => $field->field_info['field_name'],
          'field_info' => $field->field_info,
        );
      }
    }

    // If there are no date fields (gcal only), return.
    if (empty($date_fields)) {
      return $events;
    }

    // This should never happen, but just in case.
    if (!isset($row->_field_data)) {
      return $events;
    }

    $entities = array();
    $event = array();
    foreach ($date_fields as $field) {
      // If this row doesn't contain this entity, or if this entity has already
      // been processed, skip it.
      if (!isset($row->_field_data[$field['field_alias']])) {
        continue;
      }

      if (!isset($entities[$field['field_alias']])) {
        // Find the field's alias that refers to it's entity.
        $alias = $field['field_alias'];
        $entity = $row->_field_data[$alias]['entity'];
        $entity->entity_type = $row->_field_data[$alias]['entity_type'];

        list(,, $bundle) = entity_extract_ids($entity->entity_type, $entity);
        $entity->bundle = $bundle;
        $entity->eid = $row->{$alias};
        $entity->options = $view->style_options;

        // Store the current date field name for later.
        $entity->agenda_date_field = $field['field_name'];

        // Default URL.
        $uri = entity_uri($entity->entity_type, $entity);
        $entity->url = isset($uri['path']) ? $uri['path'] : '';
        // Fetch custom URL if needed.
        if (!empty($options['url'])) {
          $field_name = $options['url_field'];
          if (!empty($fields[$field_name])) {
            $entity->url = ltrim($fields[$field_name], '/');
          }
        }

        // Fetch custom title if needed.
        if (!isset($entity->title)) {
          $entity->title = '';
        }
        if (!empty($options['title'])) {
          $field_name = $options['title_field'];
          if (!empty($fields[$field_name])) {
            $entity->title = $fields[$field_name];
          }
        }

        $entities[$alias] = $entity;
      }

      $entity = $entities[$field['field_alias']];
      // Filter fields without value.
      if (!empty($field['value'])) {
        $instance = field_info_instance($entity->entity_type, $field['field_name'], $bundle);
        foreach ($field['value'] as $index => $item) {
          $classes = 'views-row clearfix';
          $dates = _nexteuropa_newsroom_process_dates($instance, $entity, $field['field_info'], $item['raw']);
          if (empty($dates)) {
            continue;
          }
          list($start, $end, $all_day, $single_day, $length) = $dates;

          $item_wrapper = entity_metadata_wrapper('node', $entity);
          $type = $item_wrapper->__isset('field_newsroom_item_type') ? $item_wrapper->field_newsroom_item_type->raw() : NULL;

          $classes .= ' type-' . $type;
          $classes .= $single_day ? ' single-day' : '';
          $classes .= date('Y-m-d', strtotime($start)) == $today ? ' starts' : '';
          $classes .= date('Y-m-d', strtotime($end)) == $today ? ' ends' : '';

          $event = array(
            '#type' => 'markup',
            '#markup' => $rendered_row,
            '#prefix' => '<div class="' . $classes . '">',
            '#suffix' => '</div>',
            'attributes' => array(
              'allDay' => $all_day,
              'singleDay' => $single_day,
              'start' => $start,
              'end' => $end,
              'length' => $length,
              'field' => $field['field_name'],
              'index' => $index,
            ),
          );
          // Duplicate records for each day in case it is multiple day event.
          $date = date('Y-m-d', strtotime($start));
          while (strtotime($date) <= strtotime($end)) {
            $events[$date][] = $event;
            $date = date('Y-m-d', strtotime('+1 day', strtotime($date)));
          }
        }
      }
    }
  }
  ksort($events);
  return $events;
}

/**
 * Process the dates, format them, and determine if it is all day.
 *
 * @param array $instance
 *   The field instance.
 * @param object $entity
 *   The entity object.
 * @param array $field
 *   The field info.
 * @param array $item
 *   The date item.
 *
 * @return array
 *   A numerically indexed array containing these elements:
 *   - 0: The start date object.
 *   - 1: The end date object.
 *   - 2: A Boolean representing whether the date is all day.
 */
function _nexteuropa_newsroom_process_dates(array $instance, $entity, array $field, array $item) {
  if (isset($item['db']['value'])) {
    $date1 = $item['db']['value'];
    date_timezone_set($date1, timezone_open($item['timezone']));
    $date2 = $item['db']['value2'];
    date_timezone_set($date2, timezone_open($item['timezone']));
  }
  else {
    $date = date_formatter_process($instance['display']['default']['type'], $entity->entity_type, $entity, $field, $instance, LANGUAGE_NONE, $item, $instance['display']['default']);
    if (empty($date['value']['local']['object'])) {
      return array();
    }

    $date1 = $date['value']['local']['object'];
    $date2 = $date['value2']['local']['object'];
  }

  // Allow modules to alter the date objects.
  $start = $date1->format(DATE_FORMAT_DATETIME);
  $end = $date2->format(DATE_FORMAT_DATETIME);
  $all_day = _nexteuropa_newsroom_date_all_day_field($field, $instance, $date1, $date2);
  $single_day = date('Y-m-d', strtotime($start)) == date('Y-m-d', strtotime($end));
  // Lenght of event in days.
  $length = (int) floor((strtotime($end) - strtotime($start)) / (60 * 60 * 24)) + 1;
  return array($start, $end, $all_day, $single_day, $length);
}

/**
 * Provide a wrapper around the deprecated date_field_all_day().
 *
 * @see date_all_day_field()
 * @see date_field_all_day()
 */
function _nexteuropa_newsroom_date_all_day_field($field, $instance, $date1, $date2 = NULL) {
  // Try the old function first since it is more likely to be available.
  if (function_exists('date_field_all_day')) {
    return date_field_all_day($field, $instance, $date1, $date2);
  }

  // Now try the new function.
  if (function_exists('date_all_day_field')) {
    return date_all_day_field($field, $instance, $date1, $date2);
  }

  // This means the old function has been removed, and they haven't enabled the
  // new module yet. All day events will be displayed as not all day.
  watchdog('newsroom', 'All day events will not function correctly until the Date All Day module is enabled.', array(), WATCHDOG_NOTICE);
  return FALSE;
}

/**
 * Implements hook_entity_presave().
 */
function nexteuropa_newsroom_entity_presave($entity, $type) {
  if (isset($entity->_feed_changed) && isset($entity->changed)) {
    $entity->changed = $entity->_feed_changed;
  }
}

/**
 * Helper function to delete translations..
 */
function _nexteuropa_newsroom_delete_translations($entity, $entity_id, $lang = FALSE) {
  $languages = !$lang ? language_list() : array($lang);
  $handler = entity_translation_get_handler('node', $entity);

  foreach ($languages as $language) {
    // Delete translation for the current language.
    $handler->removeTranslation($language->language);
    field_attach_presave('node', $entity);
    field_attach_update('node', $entity);
  }

  if (module_exists('entitycache')) {
    cache_clear_all($entity_id, 'cache_entity_node');
  }
}

/**
 * Implements hook_feeds_after_save().
 */
function nexteuropa_newsroom_feeds_after_save(FeedsSource $source, $entity, $item, $entity_id) {
  if ($source->importer()->fetcher->id == 'newsroom_deleted_items') {
    _nexteuropa_newsroom_delete_translations($entity, $entity_id);

    entity_delete('node', $entity_id);
  }

  if ($source->importer()->fetcher->id == 'newsroom_items_multilingual') {
    // TODO : find a better way to remove translation.
    $languages = language_list();
    $def_lang = language_default()->language;

    // Try to remove disabled translations, check the title for translation.
    foreach ($languages as $language) {
      // Check only active and skip the default language.
      if ($language->enabled && $language->language != $def_lang) {
        $config = $source->importer()->processor->getConfig();
        if (isset($config['mappings'])) {
          $xpath_expression = NULL;
          foreach ($config['mappings'] as $mapping) {
            if ($mapping['target'] == 'title_field:et:' . $language->language) {
              $xpath_expression = $mapping['source'];
              break;
            }
          }

          // If title is empty it means there is no translation.
          if (!empty($xpath_expression) && isset($item[$xpath_expression]) && empty($item[$xpath_expression])) {
            _nexteuropa_newsroom_delete_translations($entity, $entity_id, $language);
          }
        }
      }
    }

    if (isset($entity->field_illustrative_image[LANGUAGE_NONE][0]['fid']) && !empty($entity->field_illustrative_image[LANGUAGE_NONE][0]['fid'])) {

      $fields = array(
        'field_file_image_title_text' => 'title',
        'field_newsroom_copyrights' => 'copyright',
        'field_caption' => 'caption',
        'field_file_image_alt_text' => 'alt',
      );
      $fid = $entity->field_illustrative_image[LANGUAGE_NONE][0]['fid'];

      $file = file_load($fid);
      if ($file) {
        $config = $source->importer()->processor->getConfig();
        if (isset($config['mappings'])) {
          // Save default language at first.
          foreach ($config['mappings'] as $mapping) {
            foreach ($fields as $field => $field_name) {
              if ($mapping['target'] == 'field_illustrative_image:' . $field_name . ':et:' . $def_lang && !empty($mapping['source']) && isset($item[$mapping['source']]) && !empty($item[$mapping['source']])) {
                $file->$field = array($def_lang => array(0 => array('value' => $item[$mapping['source']])));
              }
            }
          }
          file_save($file);

          $handler = entity_translation_get_handler('file', $file);

          // Handle the rest of available translations.
          foreach ($config['mappings'] as $mapping) {
            foreach ($fields as $field => $field_name) {
              foreach ($languages as $language) {

                if ($language->language == $def_lang) {
                  continue;
                }

                if ($mapping['target'] == 'field_illustrative_image:' . $field_name . ':et:' . $language->language && !empty($mapping['source']) && isset($item[$mapping['source']]) && !empty($item[$mapping['source']])) {
                  $translation = array(
                    'translate' => 0,
                    'status' => 1,
                    'language' => $language->language,
                    'source' => $def_lang,
                  );
                  $values = array(
                    "$field" => array(
                      "$language->language" => array(
                        '0' => array(
                          'value' => $item[$mapping['source']],
                        ),
                      ),
                    ),
                  );
                  $handler->setTranslation($translation, $values);
                }
              }
            }
          }
        }
        file_save($file);
        if (module_exists('entitycache')) {
          cache_clear_all($fid, 'cache_entity_file');
        }
      }
    }
  }
}

/**
 * Implements hook_feeds_set_target().
 */
function nexteuropa_newsroom_feeds_set_target(FeedsSource $source, $entity, $target, $feed_element) {
  $entity->_feed_changed = feeds_to_unixtime($feed_element, REQUEST_TIME);
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function nexteuropa_newsroom_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  $targets['_feed_changed'] = array(
    'name' => t('Changed date'),
    'description' => t('The UNIX time when a !entity_type has been changed.', array('!entity_type' => $entity_type)),
    'callback' => 'newsroom_feeds_set_target',
  );

  // We expose image additional fields to feeds mapper. So later we can use
  // these values to save them to file's fields.
  $field_names = array(
    'field_file_image_title_text' => 'field_illustrative_image:title:et:',
    'field_newsroom_copyrights' => 'field_illustrative_image:copyright:et:',
    'field_caption' => 'field_illustrative_image:caption:et:',
    'field_file_image_alt_text' => 'field_illustrative_image:alt:et:',
  );

  $fields = array();
  $languages = language_list();
  foreach ($languages as $language) {
    // Check only active and skip the default language.
    if ($language->enabled) {
      foreach ($field_names as $field_name) {
        $fields[] = $field_name . $language->language;
      }
    }
  }

  foreach (field_info_instances('file', 'image') as $name => $instance) {
    if (in_array($name, array_keys($field_names))) {
      foreach ($fields as $field) {

        $targets[$field] = array(
          'name' => t('Image:@name', array('@name' => $field)),
          'callback' => NULL,
          'description' => t('The @label field of the image.', array('@label' => $field)),
          'real_target' => $field,
        );
      }
    }
  }

  if ($entity_type == 'node' && $bundle_name == 'newsroom_item') {
    if (isset($targets['field_newsroom_item_id'])) {
      $targets['field_newsroom_item_id']['unique_callbacks'][] = '_nexteuropa_newsroom_use_as_guid';
      $targets['field_newsroom_item_id']['optional_unique'] = TRUE;
    }
  }
}

/**
 * Callback for the unique_callbacks specified in hook_feed_processor_targets().
 *
 * @param FeedsSource $source
 *   The Feed source.
 * @param string $entity_type
 *   Entity type for the entity to be processed.
 * @param string $bundle
 *   Bundle name for the entity to be processed.
 * @param string $target
 *   A string identifying the unique target on the entity.
 * @param array $values
 *   The unique values to be checked.
 *
 * @return int|null
 *   The existing entity id, or NULL if no existing entity is found.
 *
 * @see hook_feeds_processor_targets()
 * @see FeedsProcessor::existingEntityId()
 */
function _nexteuropa_newsroom_use_as_guid(FeedsSource $source, $entity_type, $bundle, $target, array $values) {
  list($field_name, $column) = explode(':', $target . ':value');
  // Example for if the target is a field.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', $bundle)
    ->fieldCondition($field_name, $column, $values)
    ->execute();

  if (!empty($result[$entity_type])) {
    return key($result[$entity_type]);
  }
}

/**
 * Implements hook_views_handlers().
 */
function nexteuropa_newsroom_views_handlers() {
  return array(
    'handlers' => array(
      'newsroom_views_handler_field_taxonomy' => array(
        'parent' => 'views_handler_field_taxonomy',
        'path' => drupal_get_path('module', 'nexteuropa_newsroom') . '/views',
      ),
    ),
  );
}

/**
 * Implements hook_feeds_after_parse().
 */
function nexteuropa_newsroom_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if ($source->id == NEXTEUROPA_NEWSROOM_ITEM_IMPORTER) {
    // We set end date to start date if it is empty or doesn't exist.
    $config = $source->importer()->processor->getConfig();

    $start_date_exp = '';
    $end_date_exp = '';

    // Check Xpath expressions for Start date and End date.
    if (isset($config['mappings'])) {
      $xpath_expression = NULL;
      foreach ($config['mappings'] as $mapping) {
        if ($mapping['target'] == 'field_newsroom_item_date:start') {
          $start_date_exp = $mapping['source'];
        }
        if ($mapping['target'] == 'field_newsroom_item_date:end') {
          $end_date_exp = $mapping['source'];
        }
        if (!empty($start_date_exp) && !empty($end_date_exp)) {
          break;
        }
      }
    }

    foreach ($result->items as $id => &$item) {
      nexteuropa_newsroom_items_mapping($item, $start_date_exp, $end_date_exp);
    }
  }
}

/**
 * Alter the mapping for each items.
 *
 * @param array $item
 *   Item entity.
 */
function nexteuropa_newsroom_items_mapping(&$item, $start_date_exp, $end_date_exp) {
  if (isset($item[$end_date_exp]) && empty($item[$end_date_exp])) {
    $item[$end_date_exp] = $item[$start_date_exp];
  }
}

/**
 * Implements hook_flush_caches().
 */
function nexteuropa_newsroom_flush_caches() {
  return array(NEXTEUROPA_NEWSROOM_CACHE_TABLE);
}

/**
 * Implements hook_context_page_reaction().
 */
function nexteuropa_newsroom_context_page_reaction() {
  if ($plugin = context_get_plugin('reaction', 'newsroom_agenda_block')) {
    $plugin->execute();
  }
}

/**
 * Implements hook_context_plugins().
 */
function nexteuropa_newsroom_context_plugins() {
  $plugins = array();
  // Add a plugin for tabs
  // it allows us set agenda block with certain newsroom types.
  $plugins['newsroom_agenda_block_reaction'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'nexteuropa_newsroom') . '/plugins',
      'file' => 'nexteuropa_newsroom_agenda_reaction.inc',
      'class' => 'NexteuropaNewsroomAgendaReaction',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function nexteuropa_newsroom_context_registry() {
  // Add a plugin for agenda block to the registry,
  // it allows us set agenda block with certain newsroom types.
  return array(
    'reactions' => array(
      'newsroom_agenda_block' => array(
        'title' => t('Newsroom Agenda Block'),
        'plugin' => 'newsroom_agenda_block_reaction',
      ),
    ),
  );
}

/**
 * Implements hook_block_view_alter().
 */
function nexteuropa_newsroom_block_view_alter(&$data, $block) {
  // Alter agenda breadcrumbs. We leave only first item.
  if ($block->module == 'easy_breadcrumb') {
    if (isset($data['content']['easy_breadcrumb']['#breadcrumb'][0]['url']) && $data['content']['easy_breadcrumb']['#breadcrumb'][0]['url'] == 'newsroom-agenda') {
      foreach ($data['content']['easy_breadcrumb']['#breadcrumb'] as $key => $item) {
        if (isset($item['url'])) {
          if ($item['url'] != 'newsroom-agenda') {
            unset($data['content']['easy_breadcrumb']['#breadcrumb'][$key]);
          }
        }
        else {
          unset($data['content']['easy_breadcrumb']['#breadcrumb'][$key]);
        }
      }
      $data['content']['easy_breadcrumb']['#segments_quantity'] = 1;
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function nexteuropa_newsroom_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes'] += array(
    'event' => array(
      'label' => t('Newsroom event'),
      'custom settings' => FALSE,
    ),
  );

  return $entity_info;
}
