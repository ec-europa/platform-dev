<?php

/**
 * @file
 * Allow to filter view with a taxonomy tree.
 */

include_once 'taxonomy_browser.features.inc';

/**
 * Implements hook_permission().
 */
function taxonomy_browser_permission() {
  return array(
    'administer taxonomy_browser' => array(
      'title' => t('Administer taxonomy browser'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function taxonomy_browser_menu() {
  $items['admin/config/taxonomy_browser'] = array(
    'title' => 'Taxonomy browser',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_taxonomy_browser_form_taxonomy_browser_settings'),
    'access arguments' => array('administer taxonomy_browser'),
    'file' => 'taxonomy_browser.admin.inc',
  );
  $items['admin/config/taxonomy_browser/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure the taxonomy browser module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_taxonomy_browser_form_taxonomy_browser_settings'),
    'access arguments' => array('administer taxonomy_browser'),
    'file' => 'taxonomy_browser.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function taxonomy_browser_form_form_taxonomy_browser_settings_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = '_taxonomy_browser_form_submit';
}

/**
 * Handler Taxonomy browser form submit.
 */
function _taxonomy_browser_form_submit($form, &$form_state) {
  $vids_available = taxonomy_get_vocabularies();
  $vids_selected = $form_state['values']['taxonomy_browser_vocabulary'];

  foreach ($vids_available as $v) {
    if (!in_array($v->vid, $vids_selected, TRUE)) {
      $bl = block_load('taxonomy_browser', 'taxonomy_browser_vocabulary_' . $v->vid);
      if (isset($bl->bid)) {
        // Delete block which vocabulary is not selected.
        db_delete('block')
          ->condition('module', 'taxonomy_browser')
          ->condition('delta', $bl->delta)
          ->execute();
      }
    }
  }
}

/**
 * Function _taxonomy_browser_taxonomy_get_parents_tree().
 */
function _taxonomy_browser_taxonomy_get_parents_tree($tid, &$parents_tree) {
  $parent = taxonomy_get_parents($tid);
  if (count($parent) > 0) {
    $keys = array_keys($parent);
    _taxonomy_browser_taxonomy_get_parents_tree($keys[0], $parents_tree);
  }
  $term = taxonomy_term_load($tid);
  $parents_tree[] = $term;
}

/**
 * Function _taxonomy_browser_taxonomy_get_nested_tree().
 */
function _taxonomy_browser_taxonomy_get_nested_tree($terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0) {
  if (is_int($terms)) {
    $terms = taxonomy_get_tree($terms);
  }

  $return = array();

  foreach ($terms as $term) {

    foreach ($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      }
      else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }

  foreach ($return as &$term) {
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = _taxonomy_browser_taxonomy_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
    }
  }

  return $return;
}

/**
 * Function _taxonomy_browser_output_taxonomy_nested_tree().
 */
function _taxonomy_browser_output_taxonomy_nested_tree($tree, $path, $counted_tree = array()) {
  $output = '';
  if (count($tree)) {
    $output = '<ul class="taxonomy-tree">';
    foreach ($tree as $term) {
      $output .= '<li id="term_' . $term->tid . '" class="taxonomy-tree-item jstree-closed">';
      if (isset($term->children)) {
        $output .= '<ins class="taxonomy-tree-opener jstree-icon"></ins>';
      }
      $real_path = preg_replace('/\%/', $term->tid, $path);

      // If the view path doesn't contain real parameter in itself,
      // just put the parameter after the path,
      // anyways the changed real_path will be used.
      if (empty($counted_tree)) {
        if ($path == $real_path) {
          $output .= l($term->name, $path . '/' . $term->tid, array('attributes' => array('class' => array('taxonomy-tree-link'))));
        }
        else {
          $output .= l($term->name, $real_path, array('attributes' => array('class' => array('taxonomy-tree-link'))));
        }
        if (isset($term->children)) {
          $output .= _taxonomy_browser_output_taxonomy_nested_tree($term->children, $path);
        }
      }
      else {
        if ($counted_tree[$term->tid]['count'] > 0) {
          if ($path == $real_path) {
            $output .= l($term->name, $path . '/' . $term->tid, array('attributes' => array('class' => array('taxonomy-tree-link'))));
          }
          else {
            $output .= l($term->name, $real_path, array('attributes' => array('class' => array('taxonomy-tree-link'))));
          }
        }
        if (isset($term->children)) {
          $output .= _taxonomy_browser_output_taxonomy_nested_tree($term->children, $path, $counted_tree[$term->tid]['children']);
        }
      }
      $output .= '</li>';
    }
    $output .= '</ul>';
  }

  return $output;
}

/**
 * Function _taxonomy_browser_taxonomy_create_tree().
 */
function _taxonomy_browser_taxonomy_create_tree($vid, $path, $ajax = FALSE, $selected = 0, $hide = FALSE) {
  $tree = _taxonomy_browser_taxonomy_get_nested_tree(intval($vid));

  $output = '<div id="tb-browser-tree-' . $vid . '" class="tb-browser-tree jstree-ec-default">';
  if ($hide) {
    $counted_tree = _taxonomy_browser_recursive_admittance($tree);
    _taxonomy_browser_recount_items($counted_tree);
    $output .= _taxonomy_browser_output_taxonomy_nested_tree($tree, $path, $counted_tree);
  }
  else {
    $output .= _taxonomy_browser_output_taxonomy_nested_tree($tree, $path);
  }
  $output .= '</div>';

  return $output;
}

/**
 * Helper function for admittance of taxonomy tree.
 *
 * @param array $tree
 *   Basic taxonomy tree or subtree.
 * @param string $children_key
 *   Name of the key of children.
 *
 * @return array
 *   Returnable array what contains the result tree.
 */
function _taxonomy_browser_recursive_admittance(array $tree, $children_key = 'children') {
  $return = array();
  foreach ($tree as $key => $value) {
    if (isset($value->$children_key)) {
      $return[$key] = array(
        'count' => count(taxonomy_select_nodes($key)),
        'children' => _taxonomy_browser_recursive_admittance($value->$children_key, $children_key),
      );
    }
    else {
      $return[$key] = array('count' => count(taxonomy_select_nodes($key)));
    }
  }
  return $return;
}

/**
 * Helper recursive function for recounting the levels.
 *
 * @param array $tree
 *   Input array without recounting.
 *
 * @return int
 *   Sum of the items.
 */
function _taxonomy_browser_recount_items(array &$tree) {
  $sum = 0;
  foreach ($tree as &$value) {
    $count = 0;
    // Recurse into child elements.
    if (!empty($value['children'])) {
      $count = _taxonomy_browser_recount_items($value['children']);
    }
    $value['count'] += $count;
    $sum += $value['count'];
  }
  return $sum;
}

/**
 * Implements hook_block_info().
 */
function taxonomy_browser_block_info() {
  $vids = variable_get('taxonomy_browser_vocabulary', array());
  $blocks = array();

  foreach ($vids as $vid) {
    if (!empty($vid)) {
      $vocab = taxonomy_vocabulary_load($vid);
      if ($vocab) {
        $blocks['taxonomy_browser_vocabulary_' . $vocab->vid] = array(
          'info' => t('taxonomy_browser: @vocabulary', array('@vocabulary' => $vocab->name)),
        );
      }
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function taxonomy_browser_block_configure($delta = '') {
  $form = array();
  $view_list = views_get_all_views();
  $view_options = array();
  $view_options[0] = ' - Please choose one from the list!';
  foreach ($view_list as $view) {
    if (!$view->disabled) {
      foreach ($view->display as $display) {
        if ($display->display_plugin == 'page') {
          $name = !empty($view->human_name) ? $view->human_name : $view->name;
          $name .= ' - ';
          $name .= isset($display->display_title) ? $display->display_title : '';
          $view_options[$display->display_options['path']] = $name;
        }
      }
    }
  }
  $vid = drupal_substr($delta, 28);
  $vocabulary = taxonomy_vocabulary_load($vid);
  $form['vid'] = array(
    '#type' => 'hidden',
    '#value' => $vocabulary->vid,
  );
  $form['taxonomy_browser_vocabulary_view'] = array(
    '#type' => 'select',
    '#title' => t('Which view to manage the display?'),
    '#default_value' => variable_get('taxonomy_browser_vocabulary_' . $vocabulary->vid . '_view', 0),
    '#options' => $view_options,
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function taxonomy_browser_block_save($delta = '', $edit = array()) {
  variable_set($delta . '_view', $edit['taxonomy_browser_vocabulary_view']);
}

/**
 * Implements hook_block_view().
 */
function taxonomy_browser_block_view($delta = '') {
  $block = array();
  $vid = drupal_substr($delta, 28);
  $vocabulary = taxonomy_vocabulary_load($vid);
  if (strpos($delta, 'taxonomy_browser_vocabulary_') === 0 && $vocabulary) {
    // Block will be only displayed in views.
    if ($view = views_get_page_view()) {
      $view_has_argument = FALSE;
      // The view uses taxonomy terms as argument?
      if (isset($view->argument) && !empty($view->argument)) {
        foreach ($view->argument as $key => $argument) {
          if ($key == 'tid' || $key == 'term_node_tid_depth' || $key == 'term_node_tid_depth_i18n') {
            $view_has_argument = TRUE;
            break;
          }
        }
      }
      if ($view_has_argument) {
        $block['title'] = $vocabulary->name;
        $block['content'] = _taxonomy_browser_create_block_content($vid, $vocabulary);
      }
    }
    else {
      drupal_add_css(drupal_get_path('module', 'taxonomy_browser') . '/css/taxonomy_browser.css');
      drupal_add_css(drupal_get_path('module', 'taxonomy_browser') . '/css/ec-default/style.css');
      drupal_add_js('misc/jquery.cookie.js');

      if (module_exists('jquery_update')) {
        drupal_add_js(drupal_get_path('module', 'taxonomy_browser') . '/js/taxonomy_browser.js');
      }
      else {
        drupal_add_js(drupal_get_path('module', 'taxonomy_browser') . '/js/taxonomy_browser_jq171.js');
      }
      drupal_add_library('system', 'drupal.ajax');

      $block['title'] = check_plain($vocabulary->name);

      $path = variable_get('taxonomy_browser_vocabulary_' . $vid . '_view', '');

      $output1['#type'] = 'item';
      $output1['#prefix'] = '<div id="tb_wrapper"><div id="tb_browser">';
      $output1['#markup'] = _taxonomy_browser_taxonomy_create_tree($vocabulary->vid, $path, FALSE);
      $output1['#suffix'] = '</div></div>';
      $block['content'] = $output1;
    }
  }
  return $block;
}

/**
 * Function _taxonomy_browser_create_block_content().
 */
function _taxonomy_browser_create_block_content($vid, $vocabulary) {
  drupal_add_css(drupal_get_path('module', 'taxonomy_browser') . '/css/taxonomy_browser.css');
  drupal_add_css(drupal_get_path('module', 'taxonomy_browser') . '/css/ec-default/style.css');
  drupal_add_js('misc/jquery.cookie.js');

  if (module_exists('jquery_update')) {
    drupal_add_js(drupal_get_path('module', 'taxonomy_browser') . '/js/taxonomy_browser.js');
  }
  else {
    drupal_add_js(drupal_get_path('module', 'taxonomy_browser') . '/js/taxonomy_browser_jq171.js');
  }

  drupal_add_library('system', 'drupal.ajax');

  // don't use views path, they are rewrited on communities pages.
  // @code
  // $view_path = $view->get_path();
  // @endcode
  // @TODO If view is returning 404 the $menu['href'] is set to 'customerror'
  // and the links are broken, $view->get_path(); would be the ideal solution.
  $menu = menu_get_item();
  $view_path = $menu['href'];

  $output1 = '<div id="tb_wrapper">';
  $output1 .= '<div id="tb_browser">';
  $output1 .= _taxonomy_browser_taxonomy_create_tree($vid, $view_path, FALSE);
  $output1 .= '</div></div>';

  return array('#title' => 'test', '#markup' => $output1);
}

/**
 * Implements hook_views_post_render().
 */
function taxonomy_browser_views_post_render(&$view, &$output, &$cache) {

  $view_display = $view->display[$view->current_display];

  // Only for page view.
  if ($view_display->display_plugin == 'page') {

    $argument_value = NULL;
    $parents_tree = array();

    // Get taxonomy argument if exists.
    if (isset($view->argument) && !empty($view->argument)) {
      foreach ($view->argument as $key => $argument) {

        if ($key == 'tid' || $key == 'term_node_tid_depth' || $key == 'term_node_tid_depth_i18n') {

          $argument_value = $argument->argument;
          break;
        }
      }
    }

    if ($argument_value) {
      $term = taxonomy_term_load($argument_value);
      if ($term) {

        // Continue if this term vocabulary is activated on taxonomy browser.
        $available_vocab = variable_get('taxonomy_browser_vocabulary', NULL);
        if (isset($available_vocab[$term->vid]) && $available_vocab[$term->vid] == $term->vid) {

          // Get Parents tree.
          _taxonomy_browser_taxonomy_get_parents_tree($argument_value, $parents_tree, TRUE);

          // Set breadcrumb.
          $view_path = $view->get_path();
          $link = l($view->human_name, $view_path);
          $breadcrumb[] = $link;
          foreach ($parents_tree as $parent) {
            $link = l($parent->name, $view_path . '/' . $parent->tid);
            $breadcrumb[] = $link;
          }
          array_pop($breadcrumb);
          drupal_set_breadcrumb($breadcrumb);
        }
      }
    }
  }
}

/**
 * Implements hook_taxonomy_vocabulary_delete().
 */
function taxonomy_browser_taxonomy_vocabulary_delete($vocabulary) {
  // Update "taxonomy_browser_vocabulary" variable when a vocabulary is deleted.
  $vids = variable_get('taxonomy_browser_vocabulary', array());
  if (!empty($vids)) {
    unset($vids[$vocabulary->vid]);
    variable_set('taxonomy_browser_vocabulary', $vids);
  }
}
