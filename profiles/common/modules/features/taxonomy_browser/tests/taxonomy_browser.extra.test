<?php

/**
 * @file
 * Tests for taxonomy_browser.module.
 */

/**
 * Defines a class for testing the Taxonomy browser feature.
 */
class TaxonomyBrowserFeatureTest extends DrupalWebTestCase {
  protected $webUser;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Taxonomy browser feature test',
      'description' => 'Test the taxonomy browser feature to ensure it works as intended.',
      'group' => 'Multisite Core Features',
    );
  }

  /**
   * Configure the environment, enable the required modules.
   */
  public function setUp() {
    parent::setUp(array(
      'block',
      'node',
      'taxonomy',
      'taxonomy_browser',
      'views',
      'views_content',
      'views_ui',
    ));
  }

  /**
   * Check access to the 'Taxonomy browser' settings page depending on roles.
   */
  public function testTaxonomyBrowserConfigurationAccess() {
    // Verify that anonymous users can't access to the settings.
    $this->taxonomyBrowserVerifyConfigurationNoAccess('admin/config/taxonomy_browser/settings');

    // Create a regular user and login.
    $this->webUser = $this->drupalCreateUser();
    $this->drupalLogin($this->webUser);
    // Verify that authenticated users can't access to the settings.
    $this->taxonomyBrowserVerifyConfigurationNoAccess('admin/config/taxonomy_browser/settings');

    // Create a user with permissions to access to the settings.
    $this->webUser = $this->drupalCreateUser(array('administer taxonomy', 'access administration pages'));
    $this->drupalLogin($this->webUser);
    // Verify that users with permission can access to the settings.
    $this->taxonomyBrowserVerifyConfigurationAccess('admin/config/taxonomy_browser/settings');
  }

  /**
   * Verify that current user has no access to settings page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function taxonomyBrowserVerifyConfigurationNoAccess($url) {
    // Test that page returns 403 Access Denied.
    $this->drupalGet($url);
    $this->assertResponse(403, t('Expected -> Access Denied'));
  }

  /**
   * Verify that current user has access to settings page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function taxonomyBrowserVerifyConfigurationAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, t('Expected -> Access OK'));

    $this->assertText(t('TAXONOMY VOCABULARIES'), t('Taxonomy browser settings page is loaded.'));
  }

  /**
   * Verify that current user has access to settings page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function taxonomyBrowserVerifyBlocksAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, t('Expected -> Access OK'));

    $this->assertText(t('Blocks'), t('Blocks page is loaded.'));
  }

  /**
   * Verify that the view 'view_articles' for tests is successfully created.
   *
   * @param string $url
   *   URL to verify.
   */
  public function taxonomyBrowserVerifyViewCreated($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, t('Expected -> Access OK'));

    $this->assertText(t('View Articles'), t('View Articles has been successfully created'));
  }

  /**
   * Verify that the 'vocabulary_test' is successfully created with its terms.
   *
   * @param string $url
   *   URL to verify.
   */
  public function taxonomyBrowserVerifyTaxonomyCreated($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, t('Expected -> Access OK'));

    $this->assertText(t('Vocabulary test'), t('Vocabulary test has been successfully created'));
    $this->assertText(t('test-5'), t('Terms for the vocabulary have been successfully created'));
  }

  /**
   * Verify that the view and the vocabulary created are loaded in the settings.
   *
   * @param string $url
   *   URL to verify.
   */
  public function taxonomyBrowserVerifyContentLoaded($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, t('Expected -> Access OK'));

    $this->assertText(t('Tags'), t('Taxonomy browser settings content is successfully loaded.'));
  }

  /**
   * Create content for tests.
   */
  public function testCreateContent() {
    // Create a user with permissions to access to the settings and login.
    $permissions = array(
      'administer taxonomy',
      'administer views',
      'access all views',
      'administer content types',
      'administer nodes',
      'create article content',
      'access administration pages',
      'administer blocks',
    );
    $this->webUser = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->webUser);

    // Create a view for tests.
    $this->createView();
    // Add terms to 'Tags' vocabulary.
    $this->addTermsTags();
    // Create a taxonomy vocabulary for tests.
    $this->createVocabulary();

    // Verify that the view 'view_articles' for tests is successfully created.
    $this->taxonomyBrowserVerifyViewCreated('admin/structure/views');

    // Verify that 'vocabulary_test' is successfully created with its terms.
    $this->taxonomyBrowserVerifyTaxonomyCreated('admin/structure/taxonomy/vocabulary_test');

    // Verify that the view and the vocabulary are loaded in the settings.
    $this->taxonomyBrowserVerifyContentLoaded('admin/config/taxonomy_browser/settings');

    // Create articles for tests.
    // Article 1.
    $edit = array();
    $edit['title'] = 'Article #1';
    $edit['field_tags[und]'] = 'tag-2,tag-4';
    $edit['body[und][0][value]'] = 'Body of "Article #1 node.';
    $this->drupalPost('node/add/article', $edit, t('Save'));
    $this->assertText(t('Article Article #1 has been created.'));

    // Article 2.
    $edit = array();
    $edit['title'] = 'Article #2';
    $edit['field_tags[und]'] = 'tag-1,tag-4,tag-3';
    $edit['body[und][0][value]'] = 'Body of "Article #2 node.';
    $this->drupalPost('node/add/article', $edit, t('Save'));
    $this->assertText(t('Article Article #2 has been created.'));

    $this->configureTaxonomyBrowser();

    // Verify that users with permission can access the Blocks configuration.
    $this->taxonomyBrowserVerifyBlocksAccess('admin/structure/block');

    // Place blocks in regions.
    $edit = array();
    $edit['blocks[taxonomy_browser_taxonomy_browser_vocabulary_1][region]'] = 'sidebar_first';
    $edit['blocks[taxonomy_browser_taxonomy_browser_vocabulary_2][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertText(t('The block settings have been updated.'));

    $this->drupalGet('view-articles');
    $this->assertRaw('<div id="block-taxonomy-browser-taxonomy-browser-vocabulary-1" class="block block-taxonomy-browser"', 'Taxonomy block "Tags" are loaded in the view.');
    $this->assertRaw('<div id="block-taxonomy-browser-taxonomy-browser-vocabulary-2" class="block block-taxonomy-browser"', 'Taxonomy block "Vocabulary test" are loaded in the view.');
  }

  /**
   * Select taxonomy blocks for the view 'view_articles'.
   */
  public function configureTaxonomyBrowser() {
    $edit = array();
    $edit['taxonomy_browser_vocabulary[1]'] = 1;
    $edit['taxonomy_browser_vocabulary[2]'] = 2;
    $this->drupalPost('admin/config/taxonomy_browser/settings', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved'));
  }

  /**
   * Create a view.
   */
  public function createView() {
    $view = new view();
    $view->name = 'view_articles';
    $view->description = '';
    $view->tag = 'default';
    $view->base_table = 'node';
    $view->human_name = 'View Articles';
    $view->core = 7;
    $view->api_version = '3.0';
    $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

    /* Display: Master */
    $handler = $view->new_display('default', 'Master', 'default');
    $handler->display->display_options['title'] = 'View Articles';
    $handler->display->display_options['use_more_always'] = FALSE;
    $handler->display->display_options['access']['type'] = 'perm';
    $handler->display->display_options['cache']['type'] = 'none';
    $handler->display->display_options['query']['type'] = 'views_query';
    $handler->display->display_options['exposed_form']['type'] = 'basic';
    $handler->display->display_options['pager']['type'] = 'full';
    $handler->display->display_options['pager']['options']['items_per_page'] = '10';
    $handler->display->display_options['style_plugin'] = 'default';
    $handler->display->display_options['row_plugin'] = 'node';
    /* Field: Content: Title */
    $handler->display->display_options['fields']['title']['id'] = 'title';
    $handler->display->display_options['fields']['title']['table'] = 'node';
    $handler->display->display_options['fields']['title']['field'] = 'title';
    $handler->display->display_options['fields']['title']['label'] = '';
    $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
    $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
    /* Sort criterion: Content: Post date */
    $handler->display->display_options['sorts']['created']['id'] = 'created';
    $handler->display->display_options['sorts']['created']['table'] = 'node';
    $handler->display->display_options['sorts']['created']['field'] = 'created';
    $handler->display->display_options['sorts']['created']['order'] = 'DESC';
    /* Contextual filter: Content: Has taxonomy term ID (with depth) */
    $handler->display->display_options['arguments']['term_node_tid_depth']['id'] = 'term_node_tid_depth';
    $handler->display->display_options['arguments']['term_node_tid_depth']['table'] = 'node';
    $handler->display->display_options['arguments']['term_node_tid_depth']['field'] = 'term_node_tid_depth';
    $handler->display->display_options['arguments']['term_node_tid_depth']['default_argument_type'] = 'fixed';
    $handler->display->display_options['arguments']['term_node_tid_depth']['summary']['number_of_records'] = '0';
    $handler->display->display_options['arguments']['term_node_tid_depth']['summary']['format'] = 'default_summary';
    $handler->display->display_options['arguments']['term_node_tid_depth']['summary_options']['items_per_page'] = '25';
    $handler->display->display_options['arguments']['term_node_tid_depth']['depth'] = '10';
    $handler->display->display_options['arguments']['term_node_tid_depth']['break_phrase'] = TRUE;
    /* Filter criterion: Content: Published */
    $handler->display->display_options['filters']['status']['id'] = 'status';
    $handler->display->display_options['filters']['status']['table'] = 'node';
    $handler->display->display_options['filters']['status']['field'] = 'status';
    $handler->display->display_options['filters']['status']['value'] = 1;
    $handler->display->display_options['filters']['status']['group'] = 1;
    $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
    /* Filter criterion: Content: Type */
    $handler->display->display_options['filters']['type']['id'] = 'type';
    $handler->display->display_options['filters']['type']['table'] = 'node';
    $handler->display->display_options['filters']['type']['field'] = 'type';
    $handler->display->display_options['filters']['type']['value'] = array(
      'article' => 'article',
    );

    /* Display: Page */
    $handler = $view->new_display('page', 'Page', 'page');
    $handler->display->display_options['path'] = 'view-articles';

    $view->save();
  }

  /**
   * Add terms to 'Tags' vocabulary.
   */
  public function addTermsTags() {
    $vid = taxonomy_vocabulary_machine_name_load('tags')->vid;

    for ($i = 1; $i <= 5; $i++) {
      $term = new stdClass();
      $term->name = 'tag-' . $i;
      $term->vid = $vid;
      taxonomy_term_save($term);
    }
  }

  /**
   * Create the vocabulary.
   */
  public function createVocabulary() {
    $edit = array(
      'name' => 'Vocabulary test',
      'machine_name' => 'vocabulary_test',
      'description' => t('Use keywords to identify contents.'),
      'module' => 'taxonomy',
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);

    for ($i = 1; $i <= 10; $i++) {
      $term = new stdClass();
      $term->name = 'test-' . $i;
      $term->vid = $vocabulary->vid;
      taxonomy_term_save($term);
    }

    $term = new stdClass();
    $term->name = 'test-' . $i . '.1';
    $term->vid = $vocabulary->vid;
    $term->parent = taxonomy_get_term_by_name('term-' . $i, $vocabulary->vid);
    taxonomy_term_save($term);
  }

}
