<?php

/**
 * @file
 * Install updates and uninstall for basic config.
 */

/**
 * Test and report cce installation requirements.
 *
 * @param string $phase
 *   The current system installation phase.
 *
 * @return array
 *   An array of system requirements.
 */
function cce_basic_config_requirements($phase) {
  $t = get_t();
  $requirements['install_tag'] = array(
    'title' => $t('Tag'),
    'value' => $t('%profile_tag ', array(
      '%profile_tag' => variable_get('multisite_version'),
    )),
    'severity' => REQUIREMENT_INFO,
    'weight' => -8,
  );

  if (file_exists(DRUPAL_ROOT . '/continuousphp.package')) {
    if ($continuousphp_package = file_get_contents(DRUPAL_ROOT . '/continuousphp.package')) {
      $info = json_decode($continuousphp_package, TRUE);
      $t = get_t();
      $requirements['git_ref'] = array(
        'title' => $t('Git ref'),
        'value' => $info['ref'],
        'severity' => REQUIREMENT_INFO,
        'weight' => -7,
      );
      $requirements['git_commit'] = array(
        'title' => $t('Git commit'),
        'value' => l($info['commit'], 'https://github.com/ec-europa/platform-dev/commit/' . $info['commit']),
        'severity' => REQUIREMENT_INFO,
        'weight' => -7,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function cce_basic_config_install() {
  $t = get_t();

  // Create contributor editor roles.
  multisite_config_service('user')->createRole('contributor', 3);
  multisite_config_service('user')->createRole('editor', 4);

  // Create a vocabulary dedicated to the classification.
  $vocabulary = (object) array(
    'name' => $t('classification'),
    'machine_name' => 'classification',
    'module' => 'cce_basic_config',
  );
  taxonomy_vocabulary_save($vocabulary);

  // Add default categories.
  $vocabulary = taxonomy_vocabulary_machine_name_load('classification');
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('01000'),
    'description' => $t('Agriculture, farming'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('02000'),
    'description' => $t('Budget, financing, fraud'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('03000'),
    'description' => $t('European citizenship, right to vote, ombudsman, protection of privacy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('04000'),
    'description' => $t('Information society, communication, information, audiovisual, telecommunications, public opinion'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('05000'),
    'description' => $t('Competition, state aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('06000'),
    'description' => $t('Consumers, distribution, civil defence, nuclear safety, food safety'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('07000'),
    'description' => $t('Culture, tourism, sport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('08000'),
    'description' => $t('Education, teaching, vocational training, youth'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('09000'),
    'description' => $t('Enlargement, accession of new states'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('10000'),
    'description' => $t('Employment, work'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('11000'),
    'description' => $t('Energy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('12000'),
    'description' => $t('Type of business, company law'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('13000'),
    'description' => $t('Environment'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('14000'),
    'description' => $t('Tax system'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('15000'),
    'description' => $t('Industry'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('16000'),
    'description' => $t('Institutions'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('17000'),
    'description' => $t('Justice and home affairs, asylum, judicial cooperation, police cooperation, Schengen, visa, immigration, external frontiers, fight against crime, drugs, terrorism'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('18000'),
    'description' => $t('Free movement of capital, finance'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('19000'),
    'description' => $t('Free movement of goods, customs, public contracts, standardization'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('20000'),
    'description' => $t('Free movement of persons, right of establishment, workers'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('21000'),
    'description' => $t('Free movement of services, insurance, banks, credit, right of establishment, savings, public contracts'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('22000'),
    'description' => $t('Fisheries'),
  );
  taxonomy_term_save($term);
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('23000'),
    'description' => $t('Regional policy, OCT'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('24000'),
    'description' => $t('Social policy, public health'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('25000'),
    'description' => $t('Research & development'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('26000'),
    'description' => $t('External relations, CFSP, development cooperation, humanitarian aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('27000'),
    'description' => $t('Trans-European networks'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('28000'),
    'description' => $t('Respect for human rights, racism, xenophobia'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('29000'),
    'description' => $t('Transport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('30000'),
    'description' => $t('Economic and monetary union, euro, single currency'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('31000'),
    'description' => $t('Statistics'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('32000'),
    'description' => $t('Language, multilingualism, translation, interpretation'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('33000'),
    'description' => $t('Administration, management and human resources policy'),
  );
  taxonomy_term_save($term);

  // Manually save file document displays in dB.
  // Feature settings are not properly injected in dB.
  // Temporary process.
  db_delete('file_display')->execute();
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    if (substr($id_export, 0, 8) == 'document') {
      db_insert('file_display')->fields(
        array(
          'name' => $id_export,
          'weight' => 0,
          'status' => ($settings_export->status) ? 1 : 0,
          'settings' => serialize($settings_export->settings),
        )
      )->execute();
    }
  }

  // Add a fivestar rate widget.
  $path = drupal_get_path('module', 'rate');
  $rate_widgets = array(
    (object) array(
      'name' => 'rate_fivestar',
      'tag' => 'vote',
      'title' => 'rate_fivestar',
      'node_types' => array(),
      'comment_types' => array(),
      'options' => array(
        0 => array(
          0 => '0',
          1 => '1',
        ),
        1 => array(
          0 => '25',
          1 => '2',
        ),
        2 => array(
          0 => '50',
          1 => '3',
        ),
        3 => array(
          0 => '75',
          1 => '4',
        ),
        4 => array(
          0 => '100',
          1 => '5',
        ),
      ),
      'template' => 'fivestar',
      'node_display' => '2',
      'teaser_display' => FALSE,
      'comment_display' => '2',
      'node_display_mode' => '1',
      'teaser_display_mode' => '1',
      'comment_display_mode' => '1',
      'roles' => array(
        2 => '2',
        3 => 0,
        1 => 0,
        4 => 0,
        5 => 0,
      ),
      'allow_voting_by_author' => 1,
      'noperm_behaviour' => '1',
      'displayed' => '1',
      'displayed_just_voted' => '2',
      'description' => '',
      'description_in_compact' => TRUE,
      'delete_vote_on_second_click' => '0',
      'use_source_translation' => TRUE,
      'value_type' => 'percent',
      'theme' => 'rate_template_fivestar',
      'css' => $path . '/templates/fivestar/fivestar.css',
      'js' => $path . '/templates/fivestar/fivestar.js',
      'translate' => TRUE,
    ),
  );
  variable_set('rate_widgets', $rate_widgets);

  if (db_table_exists('captcha_points')) {
    db_insert('captcha_points')
      ->fields(array('captcha_type' => NULL, 'form_id' => 'forum_node_form'))
      ->execute();

    db_insert('captcha_points')
      ->fields(array('captcha_type' => NULL, 'form_id' => 'user_login'))
      ->execute();

    db_insert('captcha_points')
      ->fields(array('captcha_type' => NULL, 'form_id' => 'user_login_block'))
      ->execute();

    db_insert('captcha_points')
      ->fields(array('captcha_type' => NULL, 'form_id' => 'user_pass'))
      ->execute();
  }

  // Create WYSIWYG profile for Full HTML text format.
  multisite_config_service('wysiwyg')->createProfile('full_html', 'ckeditor');

  $plugin_settings = array(
    'default' => array(
      'Bold',
      'Italic',
      'Underline',
      'JustifyLeft',
      'JustifyCenter',
      'JustifyRight',
      'JustifyBlock',
      'BulletedList',
      'NumberedList',
      'Outdent',
      'Indent',
      'Undo',
      'Link',
      'Unlink',
      'Anchor',
      'TextColor',
      'BGColor',
      'Blockquote',
      'Source',
      'HorizontalRule',
      'PasteFromWord',
      'ShowBlocks',
      'Format',
      'Font',
      'FontSize',
      'Styles',
      'Table',
      'Smiley',
      'Maximize',
    ),
    'drupal_path' => array(
      'Link',
    ),
    'drupal' => array(
      'media',
      'break',
    ),
    'nexteuropa_token_ckeditor' => array(
      'NextEuropaToken',
    ),
  );
  foreach ($plugin_settings as $group => $buttons) {
    multisite_config_service('wysiwyg')->addButtonsToProfile('full_html', $group, $buttons);
  }

  /*
   * Create WYSIWYG profile for Full HTML text format with Change Tracking.
   *
   * Introducing that format will allow users to choose tracking changes
   * functionality for WYSIWYG fields based on filter type.
   * Format is based on 'Full HTML' text format and profile.
   */

  // Preparing filer format required further to build WYSIWYG profile.
  $fl_html_filters = multisite_config_service('filter')->getFormatFilters('full_html');

  // Transforming array of objects in to array by small trick.
  $fl_html_filters = json_decode(json_encode($fl_html_filters), TRUE);
  $full_html_track_format = (object) array(
    'format' => 'full_html_track',
    'name' => 'Full HTML + Change tracking',
    'cache' => '0',
    'status' => '1',
    'weight' => '-10',
    'filters' => $fl_html_filters,
  );
  // Filter module function for saving and updating text formats.
  filter_format_save($full_html_track_format);

  // Create WYSIWYG profile for Full HTML text format with change tracking.
  // Creation based on Full HTML profile to keep a consistent functionality.
  $wys_fl_html = multisite_config_service('wysiwyg')->getProfile('full_html');
  $wys_fl_html_settings = (array) $wys_fl_html->settings;
  multisite_config_service('wysiwyg')->createProfile(
    'full_html_track',
    'ckeditor',
    $wys_fl_html_settings
  );

  // Adding LITE plugin change tracking functionality to new profile.
  // Enable ckeditor_lite WYSIWYG plugin.
  $lite_plugin_settings = array(
    'lite_AcceptAll',
    'lite_RejectAll',
    'lite_AcceptOne',
    'lite_RejectOne',
    'lite_ToggleShow',
    'lite_ToggleTracking',
  );
  multisite_config_service('wysiwyg')->addButtonsToProfile(
    'full_html_track',
    'lite',
    $lite_plugin_settings
  );

  // Dynamically set the 'print_pdf_pdf_tool' variable. It cannot be exported
  // in a regular feature since it includes the path to where the Print PDF
  // module is installed, which is different depending on the installation
  // profile that is used.
  // Get the list of available PDF converters.
  // See print_pdf_settings().
  $dynamic_variables = array();
  $available_libs = array();
  drupal_alter('print_pdf_available_libs', $available_libs);

  // We are using the "mpdf" tool, extract it from the available converters.
  $pdf_tool = preg_grep('/^print_pdf_mpdf|/', array_keys($available_libs));

  if (!empty($pdf_tool)) {
    $dynamic_variables['print_pdf_pdf_tool'] = reset($pdf_tool);
  }

  // Add the dynamic variables to the exported component.
  foreach ($dynamic_variables as $variable => $value) {
    variable_set($variable, $value);
  }
}

/**
 * Initialize 'theme default' and 'admin theme'.
 */
function _cce_basic_config_post_install_theme() {
  // Define themes.
  $themes = array(
    'theme_default' => 'ec_resp',
    'admin_theme' => 'seven',
  );
  theme_enable($themes);

  foreach ($themes as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }
}

/**
 * Initialize default blocks.
 */
function _cce_basic_config_post_install_default_blocks() {
  // Enable standard blocks.
  $default_theme = variable_get('theme_default', 'bartik');
  $admin_theme = 'seven';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array(
    'module',
    'delta',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'cache',
  ));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Disable the Workbench block.
  db_update('block')
    ->fields(array('region' => '-1'))
    ->condition('module', 'workbench', '=')
    ->condition('delta', 'block', '=')
    ->execute();

}

/**
 * Initialize apachesorl.
 */
function _cce_basic_config_post_install_apachesolr() {
  // Disable all Solr environments for the remainder of this request. We are
  // going to create some files, and need to prevent the apachesolr module from
  // trying to update the Solr indexes when hook_entity_save() fires.
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/NEXTEUROPA-3659
  $environments = &drupal_static('apachesolr_load_all_environments');
  $environments = array();

  // At the end of the installation cron will be run. During cron an error
  // might occur in the apachesolr_multisitesearch module when it tries to
  // update the solr metadata for servers that may not be configured, or may
  // not be reachable from the environment where the site is being installed.
  // We can work around it by tricking the module into thinking it has already
  // performed its updates.
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/NEXTEUROPA-3659
  global $conf;
  $conf['apachesolr_multisitesearch_last_metadata_fetch'] = REQUEST_TIME;
  $conf['apachesolr_multisitesearch_last_metadata_update'] = REQUEST_TIME;

  variable_set('apachesolr_delay_removals', 1);
}

/**
 * Initialize content type.
 *
 * Add 'page' and ''article' CT and their body.
 */
function _cce_basic_config_post_install_default_content_type() {
  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $t = get_t();
  $types = array(
    array(
      'type' => 'article',
      'name' => $t('Article'),
      'base' => 'node_content',
      'description' => $t('Use <em>articles</em> for time-sensitive content.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }
}

/**
 * Initialize user configuration (picture, registration...).
 */
function _cce_basic_config_post_install_user_config() {
  // Enable user picture support and set the default to a square thumbnail
  // option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');
  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
}

/**
 * Initialize default images.
 */
function _cce_basic_config_post_install_default_images() {
  // Set default images.
  $theme_path = drupal_get_path('theme', 'ec_resp');
  $default_images = array(
    'user_picture_default' => 'user_default.png',
    'empty_gallery_default' => 'empty_gallery.png',
  );

  foreach ($default_images as $variable => $default_image) {
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = "public://default_images/" . $default_image;
    $file->filename = $default_image;
    $file->filemime = file_get_mimetype($file->uri);
    $file->uid = 1;
    $file->status = FILE_STATUS_PERMANENT;
    $f = file_save($file);
    variable_set($variable, $file->uri);
  }
}

/**
 * Initialize user roles and permissions.
 */
function _cce_basic_config_post_install_user_roles_perms() {
  // Create a default role for site administrators, with all available
  // permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Grant permissions for administrators.
  user_role_revoke_permissions($admin_role->rid, array(
    'administer features',
    'administer modules',
    'administer software updates',
    'manage features',
    'use PHP to import nodes',
  ));

  // Grant permissions for contributors.
  $permissions = array(
    'access workbench',
    'create article content',
    'delete own article content',
    'edit own article content',
    'moderate content from draft to needs_review',
    'moderate content from needs_review to draft',
    'revert revisions',
    'use workbench_moderation my drafts tab',
    'use workbench_moderation needs review tab',
    'view all unpublished content',
    'view moderation history',
    'view moderation messages',
    'view own unpublished content',
    'view revisions',
    'access media browser',
  );
  multisite_config_service('user')->grantPermission('contributor', $permissions);

  // Grant permissions for editors.
  $permissions = array(
    'create article content',
    'delete any article content',
    'delete own article content',
    'delete revisions',
    'edit any article content',
    'edit own article content',
    'export nodes',
    'revert revisions',
    'use workbench_moderation my drafts tab',
    'use workbench_moderation needs review tab',
    'view all unpublished content',
    'view own unpublished content',
    'access media browser',
  );
  multisite_config_service('user')->grantPermission('editor', $permissions);

  // Grant permissions for authenticated users.
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access PDF version',
    'access print',
    'access site-wide contact form',
    'access user contact forms',
    'access user profiles',
    'access workbench',
    'use text format full_html',
    'view moderation history',
    'view moderation messages',
    'view own unpublished content',
    'view revisions',
  ));

  // Grant permissions for anonymous users.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access PDF version',
    'access print',
    'access site-wide contact form',
    'access user contact forms',
    'post comments',
    'search content',
    'use advanced search',
  ));

  // Cloning roles to 'Full HTML + Change tracking' text format. It needs to be
  // done at least here because sooner it was not possible.
  $fl_html_roles = multisite_config_service('filter')->getFormatRoles('full_html');
  multisite_config_service('filter')->setFormatRoles('full_html_track', $fl_html_roles);
}

/**
 * Initialize users.
 */
function _cce_basic_config_post_install_users() {
  // Create a default users, with all available roles assigned.
  include_once DRUPAL_ROOT . '/includes/password.inc';
  // Dummy domain used for default email addresses.
  $default_email_domain = 'nomail.nodomain.notld';

  // Add user accounts.
  $account = new stdClass();
  $account->is_new = TRUE;
  $account->status = TRUE;
  $account->name = 'user_administrator';
  $account->pass = user_hash_password('pass');
  $account->mail = 'administrator@' . $default_email_domain;
  $account->init = $account->mail;
  $role = user_role_load_by_name('administrator');
  $account->roles[$role->rid] = $role->name;
  $account->field_firstname['und'][0]['value'] = 'John';
  $account->field_lastname['und'][0]['value'] = 'Smith';
  user_save($account);

  $account1 = new stdClass();
  $account1->is_new = TRUE;
  $account1->status = TRUE;
  $account1->name = 'user_contributor';
  $account1->pass = user_hash_password('pass');
  $account1->mail = 'contributor@' . $default_email_domain;
  $account1->init = $account1->mail;
  $role1 = user_role_load_by_name('contributor');
  $account1->roles[$role1->rid] = $role1->name;
  $account1->field_firstname['und'][0]['value'] = 'John';
  $account1->field_lastname['und'][0]['value'] = 'Doe';
  user_save($account1);

  $account2 = new stdClass();
  $account2->is_new = TRUE;
  $account2->status = TRUE;
  $account2->name = 'user_editor';
  $account2->pass = user_hash_password('pass');
  $account2->mail = 'editor@' . $default_email_domain;
  $account2->init = $account2->mail;
  $role2 = user_role_load_by_name('editor');
  $account2->roles[$role2->rid] = $role2->name;
  $account2->field_firstname['und'][0]['value'] = 'John';
  $account2->field_lastname['und'][0]['value'] = 'Blake';
  user_save($account2);

  // Assign dummy content to the 'administrator' user.
  $query = db_select('node', 'n');
  $query->condition('n.type', 'article', '=')
    ->fields('n', array('nid', 'title', 'uid'));
  $results = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($results as $result) {
    $node = node_load($result['nid']);
    $node->uid = $account->uid;
    node_save($node);
  }
}

/**
 * Initialize menu items.
 */
function _cce_basic_config_post_install_default_menu_items() {
  $t = get_t();
  // Create a Home link in the main menu.
  $item = array(
    'link_title' => $t('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Add login link to the user menu.
  $options = array();
  $options['attributes']['title'] = $t('Login');
  $options['attributes']['class'][] = 'btn';
  $options['attributes']['class'][] = 'btn-default';
  $options['attributes']['data-image'] = 'log-in';
  $options['attributes']['data-toggle'] = 'tooltip';
  $options['attributes']['data-placement'] = 'bottom';
  $options['attributes']['data-container'] = 'body';
  $item = array(
    'link_path' => 'user/login',
    'link_title' => $t('Login'),
    'menu_name' => 'user-menu',
    'options' => $options,
  );
  menu_link_save($item);

  // Add workbench link to the user menu.
  $options = array();
  $options['attributes']['title'] = $t('My workbench');
  $options['attributes']['class'][] = 'btn';
  $options['attributes']['class'][] = 'btn-info';
  $options['attributes']['data-image'] = 'list-alt';
  $options['attributes']['data-display-title'] = 0;
  $options['attributes']['data-toggle'] = 'tooltip';
  $options['attributes']['data-placement'] = 'bottom';
  $options['attributes']['data-container'] = 'body';

  $item = array(
    'link_path' => 'admin/workbench',
    'link_title' => $t('My workbench'),
    'menu_name' => 'user-menu',
    'weight' => '-30',
    'options' => $options,
  );
  menu_link_save($item);

  // Add search links to the main menu.
  $item = array(
    'link_path' => 'search/site',
    'link_title' => $t('Search'),
    'menu_name' => 'main-menu',
    'weight' => '19999',
  );
  menu_link_save($item);

  // Update home link in the main menu.
  $options = array();
  $options['attributes']['data-display-title'] = 0;
  $options['attributes']['data-image'] = 'home';
  db_update('menu_links')
    ->fields(array('options' => serialize($options), 'weight' => '-50'))
    ->condition('link_title', 'Home')
    ->condition('menu_name', 'main-menu')
    ->execute();

}

/**
 * Insert default terms.
 */
function _cce_basic_config_post_install_default_terms() {
  // Add dummy terms in 'tags' vocabulary.
  $vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  $term = new stdClass();
  $term->name = "sport";
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);

  $term = new stdClass();
  $term->name = "economic";
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);
}

/**
 * Finalize profile installation by inserting some site configurations.
 *
 * Insert user roles, assign permission to roles, define themes,
 * define basic content type, etc...
 */
function cce_basic_config_post_install() {
  _cce_basic_config_post_install_theme();
  _cce_basic_config_post_install_default_blocks();
  _cce_basic_config_post_install_default_content_type();
  _cce_basic_config_post_install_user_config();
  _cce_basic_config_post_install_user_roles_perms();
  _cce_basic_config_post_install_users();
  _cce_basic_config_post_install_default_images();
  _cce_basic_config_post_install_default_menu_items();
  _cce_basic_config_post_install_default_terms();
  _cce_basic_config_post_install_apachesolr();
}

/**
 * Implements hook_uninstall().
 */
function cce_basic_config_uninstall() {
  // Manually remove config for file document display.
  // This process must be temporary.
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    if (substr($id_export, 0, 8) == 'document') {
      db_delete('file_display')
        ->condition('name', $id_export)
        ->execute();
    }
  }
}

/**
 * Implements hook_enable().
 */
function cce_basic_config_enable() {
  variable_set('user_classes', 'btn btn-info btn-xs');
  variable_set('user_myaccount_data_image', 'user');

  // My Account.
  variable_set('user_logout_data_image', 'log-out');
}

/**
 * Implements hook_disable().
 */
function cce_basic_config_disable() {
  drupal_set_message(t('The module cce_basic_config has been disabled on your site! Please contact FPFIS support to reactivate it.'));
  variable_del('user_classes');
  // My Account.
  variable_del('user_myaccount_data_image');
  // Log out.
  variable_del('user_logout_data_image');
}

/**
 * Add classification vocabulary, add file display settings.
 */
function cce_basic_config_update_7140() {
  // Create a vocabulary for classification.
  // Add default categories.
  $vocabulary = taxonomy_vocabulary_machine_name_load('classification');
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('01'),
    'description' => st('Agriculture, farming'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('02'),
    'description' => st('Budget, financing, fraud'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('03'),
    'description' => st('European citizenship, right to vote, ombudsman, protection of privacy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('04'),
    'description' => st('Information society, communication, information, audiovisual, telecommunications, public opinion'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('05'),
    'description' => st('Competition, state aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('06'),
    'description' => st('Consumers, distribution, civil defence, nuclear safety, food safety'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('07'),
    'description' => st('Culture, tourism, sport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('08'),
    'description' => st('Education, teaching, vocational training, youth'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('09'),
    'description' => st('Enlargement, accession of new states'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('10'),
    'description' => st('Employment, work'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('11'),
    'description' => st('Energy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('12'),
    'description' => st('Type of business, company law'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('13'),
    'description' => st('Environment'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('14'),
    'description' => st('Tax system'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('15'),
    'description' => st('Industry'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('16'),
    'description' => st('Institutions'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('17'),
    'description' => st('Justice and home affairs, asylum, judicial cooperation, police cooperation, Schengen, visa, immigration, external frontiers, fight against crime, drugs, terrorism'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('18'),
    'description' => st('Free movement of capital, finance'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('19'),
    'description' => st('Free movement of goods, customs, public contracts, standardization'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('20'),
    'description' => st('Free movement of persons, right of establishment, workers'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('21'),
    'description' => st('Free movement of services, insurance, banks, credit, right of establishment, savings, public contracts'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('22'),
    'description' => st('Fisheries'),
  );
  taxonomy_term_save($term);
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('23'),
    'description' => st('Regional policy, OCT'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('24'),
    'description' => st('Social policy, public health'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('25'),
    'description' => st('Research & development'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('26'),
    'description' => st('External relations, CFSP, development cooperation, humanitarian aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('27'),
    'description' => st('Trans-European networks'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('28'),
    'description' => st('Respect for human rights, racism, xenophobia'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('29'),
    'description' => st('Transport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('30'),
    'description' => st('Economic and monetary union, euro, single currency'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('31'),
    'description' => st('Statistics'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('32'),
    'description' => st('Language, multilingualism, translation, interpretation'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('33'),
    'description' => st('Administration, management and human resources policy'),
  );
  taxonomy_term_save($term);

  // Manually save file document displays in database.
  // The feature settings are not properly injected in database.
  // This process must be temporary.
  db_delete('file_display')->execute();
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    db_insert('file_display')->fields(
      array(
        'name' => $id_export,
        'weight' => 0,
        'status' => ($settings_export->status) ? 1 : 0,
        'settings' => serialize($settings_export->settings),
      )
    )->execute();
  }

  // Remove the mail address to the update modules notification.
  variable_del('update_notify_emails');

  // Disable update management module permissions for administrator role.
  $adm_rid = multisite_drupal_toolbox_get_rid('administrator');
  user_role_revoke_permissions($adm_rid, array(
    'administer software updates',
  ));

}

/**
 * Add password_policy rules and handle password_policy 2.x upgrade.
 */
function cce_basic_config_update_7150() {
  // Insert the password policy in the database.
  // Temporary since the module password_policy.
  $exports = cce_basic_config_default_password_policy();

  $schema = password_policy_schema();
  db_drop_table('password_policy');
  db_drop_table('password_policy_expiration');
  db_drop_table('password_policy_force_change');
  db_drop_table('password_policy_history');
  db_drop_table('password_policy_role');

  if (!db_table_exists('password_policy')) {
    db_create_table('password_policy', $schema['password_policy']);
  }
  if (!db_table_exists('password_policy_history')) {
    db_create_table('password_policy_history', $schema['password_policy_history']);
  }
  if (!db_table_exists('password_policy_notice_history')) {
    db_create_table('password_policy_notice_history', $schema['password_policy_notice_history']);
  }
  db_insert('password_policy')
    ->fields(array(
      'name' => 'Example policy',
      'config' => $exports['Example policy']->config,
    ))
    ->execute();
}

/**
 * Add search block.
 */
function cce_basic_config_update_7160() {
  // Add block site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');

  $block_to_add = array(
    'module' => 'search',
    'delta' => 'form',
    'region' => 'header_right',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['form'] = $block_to_add;

  module_invoke('context', 'save', $context);
}

/**
 * Update classification vocabulary ids.
 */
function cce_basic_config_update_7170() {
  // Get the "classification" vid.
  $classification = NULL;

  $vocabularies = taxonomy_get_vocabularies(NULL);
  foreach ($vocabularies as $vocab_object) {
    if ($vocab_object->name == "classification") {
      $classification = $vocab_object->vid;
      if ($classification) {
        db_query('UPDATE {taxonomy_term_data} SET NAME=concat(name, :name) WHERE vid=:vid', array(
          ':name' => '000',
          ':vid' => $classification,
        ));
      }
      return;
    }
  }
}

/**
 * Add rate widget fivestar.
 */
function cce_basic_config_update_7180() {
  // Check if rate widget fivestar already exists.
  $rate_widgets = variable_get("rate_widgets");
  if (!$rate_widgets || count($rate_widgets) == 0) {
    $rate_widgets = array();
  }
  else {
    foreach ($rate_widgets as $rate_widget) {
      if ($rate_widget->name == 'rate_fivestar') {
        // The widget fivestar already exists.
        return;
      }
    }
  }
  $module_path = drupal_get_path('module', 'rate');

  $rate_widgets[1] = (object) array(
    'name' => 'rate_fivestar',
    'tag' => 'vote',
    'title' => 'rate_fivestar',
    'node_types' => array(),
    'comment_types' => array(),
    'options' => array(
      0 => array(
        0 => '0',
        1 => '1',
      ),
      1 => array(
        0 => '25',
        1 => '2',
      ),
      2 => array(
        0 => '50',
        1 => '3',
      ),
      3 => array(
        0 => '75',
        1 => '4',
      ),
      4 => array(
        0 => '100',
        1 => '5',
      ),
    ),
    'template' => 'fivestar',
    'node_display' => '2',
    'teaser_display' => FALSE,
    'comment_display' => '2',
    'node_display_mode' => '1',
    'teaser_display_mode' => '1',
    'comment_display_mode' => '1',
    'roles' => array(
      2 => '2',
      3 => 0,
      1 => 0,
      4 => 0,
      5 => 0,
    ),
    'allow_voting_by_author' => 1,
    'noperm_behaviour' => '1',
    'displayed' => '1',
    'displayed_just_voted' => '2',
    'description' => '',
    'description_in_compact' => TRUE,
    'delete_vote_on_second_click' => '0',
    'use_source_translation' => TRUE,
    'value_type' => 'percent',
    'theme' => 'rate_template_fivestar',
    'css' => $module_path . '/templates/fivestar/fivestar.css',
    'js' => $module_path . '/templates/fivestar/fivestar.js',
    'translate' => TRUE,
  );
  variable_set("rate_widgets", $rate_widgets);
}

/**
 * Force home and myworkbench menu items at left in main menu.
 */
function cce_basic_config_update_7190() {
  db_update('menu_links')
    ->fields(array('weight' => '-30'))
    ->condition('link_title', 'My workbench', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();

  db_update('menu_links')
    ->fields(array('weight' => '-50'))
    ->condition('link_title', 'Home', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();
}

/**
 * Move menu item myworkbench from main menu to user menu.
 */
function cce_basic_config_update_7191() {
  db_update('menu_links')
    ->fields(array(
      'weight' => '-30',
      'menu_name' => 'user-menu',
    ))
    ->condition('link_title', 'My workbench', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();
}

/**
 * Set default configuration for menu items.
 *
 * Set configuration for captcha module.
 * Date field migration.
 */
function cce_basic_config_update_7192() {
  // Home.
  $ml_home = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', '<front>')
    ->condition('menu_name', 'main-menu')
    ->execute()
    ->fetchField();

  $options_home = unserialize($ml_home);
  $options_home['attributes']['data-display-title'] = 0;
  $options_home['attributes']['data-image'] = 'home';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_home)))
    ->condition('link_path', '<front>')
    ->condition('menu_name', 'main-menu')
    ->execute();

  // Login.
  $ml_login = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user/login')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_login = unserialize($ml_login);
  $options_login['attributes']['class'][] = 'btn btn-default';
  $options_login['attributes']['data-image'] = 'log-in';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_login)))
    ->condition('link_path', 'user/login')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // Logout.
  $ml_logout = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user/logout')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_logout = unserialize($ml_logout);
  $options_logout['attributes']['class'][] = 'btn btn-default btn-xs';
  $options_logout['attributes']['data-image'] = 'log-out';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_logout)))
    ->condition('link_path', 'user/logout')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // My workbench.
  $ml_workbench = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'admin/workbench')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_workbench = unserialize($ml_workbench);
  $options_workbench['attributes']['class'][] = 'btn btn-info btn-xs';
  $options_workbench['attributes']['data-image'] = 'list-alt';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_workbench)))
    ->condition('link_path', 'admin/workbench')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // My account.
  $ml_account = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_account = unserialize($ml_account);
  $options_account['attributes']['class'][] = 'btn btn-default btn-xs';
  $options_account['attributes']['data-image'] = 'user';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_account)))
    ->condition('link_path', 'user')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // Captcha.
  variable_set('captcha_default_challenge', 'image_captcha/Image');
  $path = drupal_get_path('module', 'captcha');
  variable_set('image_captcha_fonts', array(
    $path . '/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf' => $path . '/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf',
    $path . '/image_captcha/fonts/Tuffy/Tuffy.ttf' => $path . '/image_captcha/fonts/Tuffy/Tuffy.ttf',
  ));
  variable_set('image_captcha_distortion_amplitude', '5');
  variable_set('image_captcha_bilinear_interpolation', 1);

  if (db_table_exists($captcha_points)) {
    db_update('captcha_points')
      ->fields(array('captcha_type' => 'default'))
      ->condition('form_id', 'contact_site_form')
      ->execute();
  }

  // Revoke 'use PHP to import nodes' 'administer varnish' permissions.
  foreach (array_keys(user_roles()) as $rid) {
    user_role_revoke_permissions($rid, array('use PHP to import nodes', 'administer varnish'));
  }
}

/**
 * Date field migration.
 */
function cce_basic_config_update_7193() {
  // $content type : content type that contains fields to replace.
  // $module_name : module that contains fields.
  $content_type = 'article';
  $module_name = basename(__FILE__, '.install');
  // Get db fields instances of content type.
  $fields_instances = field_info_instances('node', $content_type);

  // Get feature fields config&instance.
  module_load_include('inc', $module_name, $module_name . '.features.field');
  if (function_exists($module_name . '_field_default_fields')) {
    $fields_features_info = call_user_func($module_name . '_field_default_fields');
  }

  // Migration.
  foreach ($fields_instances as $field_name => $field_instance) {
    // Get db field config.
    $field_info = field_info_field($field_name);

    // Get feature field config.
    $field_features_info = NULL;

    if (isset($fields_features_info['node-' . $content_type . '-' . $field_name])) {
      $field_features_info = $fields_features_info['node-' . $content_type . '-' . $field_name]['field_config'];
    }

    // Update only our fields defines to 'datestamp' in feature.field.
    if ($field_info['type'] == 'datetime' && $field_info['locked'] && $field_features_info && $field_features_info['type'] == 'datestamp') {
      foreach ($field_info['storage']['details']['sql'] as $type => $info_sql) {
        $table_name = array_shift(array_keys($info_sql));

        foreach ($info_sql[$table_name] as $id => $column_name) {

          if (field_has_data($field_info)) {
            // There is data: migrate data and update column to int.
            $variables = array(
              '@column_name' => $column_name,
              '@table_name' => $table_name,
            );
            watchdog('system', 'Update the column "@column_name" of table "@table_name": migrate data and update to datestamp.', $variables, WATCHDOG_WARNING);

            // Create a temporary date field.
            $param = array('type' => 'int', 'not null' => FALSE, 'default' => 0);
            db_add_field($table_name, $column_name . '_temp', $param);

            db_update($table_name)
              ->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")
              ->execute();

            // Delete old column.
            db_drop_field($table_name, $column_name);
            db_change_field($table_name, $column_name . '_temp', $column_name, array('type' => 'int'));

          }
          else {
            // If there is no data: just update column to int.
            $variables = array(
              '@column_name' => $column_name,
              '@table_name' => $table_name,
            );
            watchdog('system', 'Update the column "@column_name" of table "@table_name": update to datestamp.', $variables, WATCHDOG_WARNING);
            db_change_field($table_name, $column_name, $column_name, array('type' => 'int'));
          }
        }
      }

      $variables = array('@field_name' => $field_name);
      watchdog('system', 'Saving field config of "@field_name".', $variables, WATCHDOG_INFO);
      db_update('field_config')->fields(array('type' => 'datestamp'))->condition('id', $field_info['id'])->execute();

      // Error logs.
    }
    elseif ($field_info['type'] == 'datestamp') {
      $variables = array('@field_name' => $field_name);
      watchdog('system', 'Field "@field_name" has been already converted to a UNIX timestamp.', $variables, WATCHDOG_WARNING);
    }
    elseif ($field_info['type'] == 'datetime') {
      if (!$field_features_info) {
        $variables = array(
          '@field_name' => $field_name,
          '@module_name' => $module_name,
        );
        watchdog('system', 'Field "@field_name" not found in "@module_name.features.field.inc".', $variables, WATCHDOG_WARNING);
      }
      elseif ($field_features_info['type'] != 'datestamp') {
        $variables = array(
          '@field_name' => $field_name,
          '@module_name' => $module_name,
        );
        watchdog('system', 'Field "@field_name" is not a datestamp in "@module_name.features.field.inc".', $variables, WATCHDOG_WARNING);
      }
    }
  }
  field_cache_clear();

  // File format translation.
  $format = array("full_html" => "full_html", "plain_text" => "plain_text");
  variable_set("i18n_string_allowed_formats", $format);
}

/**
 * Implements hook_update_N().
 */
function cce_basic_config_update_7194() {
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('show format selection for node'));
}

/**
 * Feature revert field and field_group.
 */
function cce_basic_config_update_7195() {
  // Handle the change of the maxlength of the field field_caption.
  db_query('ALTER TABLE `field_data_field_caption` CHANGE `field_caption_value` `field_caption_value` VARCHAR(512) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL;');
  db_query('ALTER TABLE `field_revision_field_caption` CHANGE `field_caption_value` `field_caption_value` VARCHAR(512) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL;');

  $qry = "SELECT data FROM 'field_config' WHERE field_name = :field_name";
  $result = db_query($qry, array(':field_name' => 'field_caption'))->fetchObject();
  $data = unserialize($result->data);
  $data['settings']['max_length'] = 512;
  $serialized_data = serialize($data);
  $qry = "UPDATE 'field_config' SET data = :data WHERE field_name = :field_name";
  db_query($qry, array(':data' => $serialized_data, ':field_name' => 'field_caption'));

  drupal_flush_all_caches();

  // Revert only fields (for modify weight).
  features_revert(array('cce_basic_config' => array('field')));
  features_revert(array('cce_basic_config' => array('field_group')));
}

/**
 * Add default configuration for easy_breadcrumb.
 */
function cce_basic_config_update_7196() {
  variable_set('easy_breadcrumb-capitalizator_mode', 'ucfirst');
  variable_set('easy_breadcrumb-include_home_segment', 0);
  variable_set('easy_breadcrumb-include_invalid_paths', 0);
  variable_set('easy_breadcrumb-segments_separator', '>');

  // Add block in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');

  $block_to_add = array(
    'module' => 'easy_breadcrumb',
    'delta' => 'easy_breadcrumb',
    'region' => 'featured',
    'weight' => -18,
  );
  $context->reactions['block']['blocks']['easy_breadcrumb'] = $block_to_add;

  module_invoke('context', 'save', $context);
}

/**
 * Add menu service_tools in banner.
 *
 * Change date format : set european format.
 */
function cce_basic_config_update_7197() {
  // Add block in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');

  $block_service_tools = array(
    'module' => 'menu',
    'delta' => 'menu-service-tools',
    'region' => 'header_top',
    'weight' => -9,
  );
  $context->reactions['block']['blocks']['block_service_tools'] = $block_service_tools;

  module_invoke('context', 'save', $context);

  // Change date format.
  variable_set("date_format_long", "l, j F, Y - H:i");
  variable_set("date_format_medium", "D, d/m/Y - H:i");
  variable_set("date_format_short", "d/m/Y - H:i");
}

/**
 * Deactivate orphan content types events, news, and discussion.
 *
 * Enable Library tab.
 *
 * Add block footer ipg in region footer.
 */
function cce_basic_config_update_7198() {
  node_types_rebuild();
  $event_type = node_type_load('event');
  $news_type = node_type_load('news');
  $discussion_type = node_type_load('discussion');

  if (!module_exists('events_core') && ($event_type->disabled == '0')) {
    multisite_drupal_toolbox_disable_content_type('event');
    drupal_set_message(t('Orphan content type event has been disabled.'));
  }
  if (!module_exists('news_core') && ($news_type->disabled == '0')) {
    multisite_drupal_toolbox_disable_content_type('news');
    drupal_set_message(t('Orphan content type news has been disabled.'));
  }
  if (!module_exists('multisite_forum_core') && ($discussion_type->disabled == '0')) {
    multisite_drupal_toolbox_disable_content_type('discussion');
    drupal_set_message(t('Orphan content type discussion has been disabled.'));
  }

  // Adding Library tab as default.
  $plugins = variable_get('media__wysiwyg_browser_plugins');
  if (!in_array('media_default--media_browser_1', $plugins)) {
    array_push($plugins, 'media_default--media_browser_1');
    variable_set('media__wysiwyg_browser_plugins', $plugins);
  }

  // Add IPG footer in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');
  $block_footer_ipg = array(
    'module' => 'cce_basic_config',
    'delta' => 'footer_ipg',
    'region' => 'footer',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['footer-ipg'] = $block_footer_ipg;

  module_invoke('context', 'save', $context);
}

/**
 * Add 'video' tag to 'security_allowed_tags' variable.
 */
function cce_basic_config_update_7199() {
  $tags = variable_get('security_allowed_tags');
  $tags .= "\nvideo";
  variable_set('security_allowed_tags', $tags);

  variable_set('print_pdf_pdf_tool', 'print_pdf_mpdf|' . libraries_get_path('mpdf') . '/mpdf.php');
}

/**
 * Implements hook_update_n().
 *
 * Use jquery 1.10.
 * Define admin pages that should use default theme.
 * Disable user contact form for anonymous.
 * Activate captcha of user contact form.
 */
function cce_basic_config_update_7200() {
  variable_set('jquery_update_jquery_version', '1.10');
  variable_set('jquery_update_jquery_admin_version', '1.5');

  // Define admin pages that should use default theme.
  $list_pages = array(
    'admin/structure/feature-set',
    'admin/workbench',
    'admin/content/comment',
    'admin/content/media',
    'admin/content/webform',
    'admin/structure/block',
    'admin/help',
  );
  variable_set('cce_basic_config_admin_pages', $list_pages);

  // Disable user contact form for anonymous.
  user_role_revoke_permissions(1, array(
    'access user contact forms',
  ));

  // Activate captcha of user contact form.
  if (db_table_exists('captcha_points')) {
    db_update('captcha_points')
      ->fields(array('captcha_type' => 'default'))
      ->condition('form_id', 'contact_personal_form')
      ->execute();
  }

  variable_set('multisite_version', '2.0');
}

/**
 * Implements hook_update_N().
 *
 * Set linkchecker interval from 3hrs [259200] to 4 weeks [2419200].
 */
function cce_basic_config_update_7201() {
  variable_set('linkchecker_check_links_interval', 2419200);
}

/**
 * Implements hook_update_n().
 *
 * Update list of admin pages using jquery 1.10.
 * Update display of user menu.
 */
function cce_basic_config_update_7202() {
  $list_pages = array(
    'admin/structure/feature-set',
    'admin/workbench',
    'admin/content/comment',
    'admin/content/media',
    'admin/content/webform',
    'admin/structure/block',
    'admin/help',
    'user/',
  );
  variable_set('cce_basic_config_admin_pages', $list_pages);

  variable_set('node_admin_theme', 0);

  // Update user menu item.
  // Logout.
  $ml_logout = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user/logout')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_logout = unserialize($ml_logout);
  $options_logout['attributes']['class'] = array('btn', 'btn-default');
  $options_logout['attributes']['data-display-title'] = 0;
  $options_logout['attributes']['title'] = t('Log out');
  $options_logout['attributes']['data-toggle'] = 'tooltip';
  $options_logout['attributes']['data-placement'] = 'bottom';
  $options_logout['attributes']['data-container'] = 'body';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_logout)))
    ->condition('link_path', 'user/logout')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // My workbench.
  $ml_workbench = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'admin/workbench')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_workbench = unserialize($ml_workbench);
  $options_workbench['attributes']['class'] = array('btn', 'btn-info');
  $options_workbench['attributes']['data-display-title'] = 0;
  $options_workbench['attributes']['title'] = t('My workbench');
  $options_workbench['attributes']['data-toggle'] = 'tooltip';
  $options_workbench['attributes']['data-placement'] = 'bottom';
  $options_workbench['attributes']['data-container'] = 'body';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_workbench)))
    ->condition('link_path', 'admin/workbench')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // My account.
  $ml_account = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_account = unserialize($ml_account);
  $options_account['attributes']['class'] = array('btn', 'btn-default');
  $options_account['attributes']['data-display-title'] = 0;
  $options_account['attributes']['title'] = t('My account');
  $options_account['attributes']['data-toggle'] = 'tooltip';
  $options_account['attributes']['data-placement'] = 'bottom';
  $options_account['attributes']['data-container'] = 'body';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_account)))
    ->condition('link_path', 'user')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // Login.
  $ml_login = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user/login')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_login = unserialize($ml_login);
  $options_login['attributes']['class'] = array('btn', 'btn-default');
  $options_login['attributes']['title'] = t('Log in');
  $options_login['attributes']['data-toggle'] = 'tooltip';
  $options_login['attributes']['data-placement'] = 'bottom';
  $options_login['attributes']['data-container'] = 'body';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_login)))
    ->condition('link_path', 'user/login')
    ->condition('menu_name', 'user-menu')
    ->execute();
}

/**
 * NEXTEUROPA-4872: Fix media popup.
 */
function cce_basic_config_update_7203() {
  $admin_pages = variable_get('cce_basic_config_admin_pages', array());

  foreach ($admin_pages as $key => $value) {
    if ($value == "node/add") {
      unset($admin_pages[$key]);
    }
  }

  variable_set('cce_basic_config_admin_pages', $admin_pages);
}


/**
 * Update the location of the Rate attachments.
 */
function cce_basic_config_update_7204() {
  // The Rate module has moved to the modules subdirectory in the profile. The
  // module hardcodes the locations of its CSS and JS attachments inside a
  // variable. Update these so they point to the correct location.
  $path = drupal_get_path('module', 'rate');
  $rate_widgets = variable_get('rate_widgets', array());

  foreach ($rate_widgets as &$rate_widget) {
    foreach (array('css', 'js') as $attachment) {
      if (!empty($rate_widget->$attachment) && strpos($rate_widget->$attachment, 'sites/all/modules/contributed/rate') === 0) {
        $rate_widget->$attachment = str_replace('sites/all/modules/contributed/rate', $path, $rate_widget->attachment);
      }
    }
  }

  variable_set('rate_widgets', $rate_widgets);
}

/**
 * NEXTEUROPA-3298: Enable CKEditor plugins and related modules.
 */
function cce_basic_config_update_7205() {

  // Enable new cce_basic_config dependencies.
  $modules = array(
    'nexteuropa_token_ckeditor',
    'ckeditor_lite',
    'token_filter',
  );
  module_enable($modules);

  // Enable nexteuropa_token_ckeditor WYSIWYG plugin.
  multisite_config_service('wysiwyg')->addButtonsToProfile('full_html', 'nexteuropa_token_ckeditor', array('NextEuropaToken'));

  // Enable token_filter on full_html text filter.
  multisite_config_service('filter')->enableTextFilter('full_html', 'filter_tokens');

  // Enable ckeditor_lite WYSIWYG plugin.
  $lite_plugin_settings = array(
    'lite_AcceptAll',
    'lite_RejectAll',
    'lite_AcceptOne',
    'lite_RejectOne',
    'lite_ToggleShow',
    'lite_ToggleTracking',
  );
  multisite_config_service('wysiwyg')->addButtonsToProfile('full_html', 'lite', $lite_plugin_settings);
}

/**
 * NEXTEUROPA-4729: Disable and uninstall print_pdf_tcpdf module.
 */
function cce_basic_config_update_7206() {
  module_disable(array('print_pdf_tcpdf'), FALSE);
  drupal_uninstall_modules(array('print_pdf_tcpdf'), FALSE);
}


/**
 * NEXTEUROPA-4706: Drupal alter makes features stay overriden.
 */
function cce_basic_config_update_7207() {
  // Dynamically set the 'print_pdf_pdf_tool' variable. It cannot be exported
  // in a regular feature since it includes the path to where the Print PDF
  // module is installed, which is different depending on the installation
  // profile that is used.
  // Get the list of available PDF converters.
  // See print_pdf_settings().
  $dynamic_variables = array();
  $available_libs = array();
  drupal_alter('print_pdf_available_libs', $available_libs);

  // We are using the "mpdf" tool, extract it from the available converters.
  $pdf_tool = preg_grep('/^print_pdf_mpdf|/', array_keys($available_libs));

  if (!empty($pdf_tool)) {
    $dynamic_variables['print_pdf_pdf_tool'] = reset($pdf_tool);
  }

  // Dynamically set the 'image_captcha_fonts' variable. It cannot be exported
  // in a regular feature since it hard codes the paths to where the fonts are
  // installed that are used for the image captchas.  These are different
  // depending on the installation profile that is used.
  $dynamic_variables['image_captcha_fonts'] = array(
    drupal_get_path('module', 'image_captcha') . '/fonts/Tuffy/Tuffy_Bold.ttf',
    drupal_get_path('module', 'image_captcha') . '/fonts/Tuffy/Tuffy.ttf',
  );

  // Add the dynamic variables to the exported component.
  foreach ($dynamic_variables as $variable => $value) {
    variable_set($variable, $value);
  }
}

/**
 * MULTISITE-5882: use variables to define site who should use survey JS.
 */
function cce_basic_config_update_7208() {
  $cce_basic_config_survey_whitelist_js = array(
    "sfc2014",
    "rawmaterials",
    "mare-emd",
    "kroes",
    "horizon2020",
    "inseparable",
    "epale",
    "clima-ets-summer-university",
    "eacea-site",
    "eac-eyp",
    "rebuttal",
  );

  if (in_array(basename(conf_path()), $cce_basic_config_survey_whitelist_js, TRUE)) {
    variable_set('toolbox_survey_whitelist_js', TRUE);
  }

  variable_set('multisite_version', '2.1');
}

/**
 * Drupal 7.41 update.
 *
 * Added here in case the update 7080 of system module was already
 * executed on existing sites.
 * Convert the 'format' column in {date_format_locale}
 * to case sensitive varchar.
 *
 * @see system_update_7080()
 */
function cce_basic_config_update_7209() {
  $spec = array(
    'description' => 'The date format string.',
    'type' => 'varchar',
    'length' => 100,
    'not null' => TRUE,
    'binary' => TRUE,
  );
  db_change_field('date_format_locale', 'format', 'format', $spec);
}

/**
 * Implements hook_update_N().
 *
 * Update platforme version.
 */
function cce_basic_config_update_7210() {
  variable_set('multisite_version', '2.2');
}

/**
 * NEXTEUROPA-11582: Delay removal of entities from Apache Solr to cron.
 */
function cce_basic_config_update_7211() {
  variable_set('apachesolr_delay_removals', 1);
}
