<?php
/**
 * @file
 * Code for the multisite_translations feature.
 */

include_once 'multisite_translations.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_translations_form_tmgmt_job_form_alter(&$form, &$form_state, $form_id) {
  // Put warning message to show the translation jobs in progress
  // get all nodes related to the current job.
  $job_nodes = db_select('tmgmt_job_item', 'tji')
    ->fields('tji', array('item_id'))
    ->condition('tjid', arg(5))
    ->execute();

  $output = "";
  $check_job_translation = FALSE;
  $language_list = language_list();
  // Check if these nodes are related to other jobs translations.
  while ($job_node = $job_nodes->fetchObject()) {
    $query = db_select('tmgmt_job_item', 'tji');
    $query->innerJoin('tmgmt_job', 'tj', 'tj.tjid = tji.tjid');
    $results = $query->condition('tji.item_id', $job_node->item_id)
      ->condition('tji.state', TMGMT_JOB_ITEM_STATE_REVIEW)
      ->fields('tj', array('target_language'))
      ->fields('tji', array('item_id'))
      ->execute();
    while ($result = $results->fetchObject()) {
      $node = node_load($result->item_id);
      $target_language = $language_list[$result->target_language]->name;
      $output .= "<li>translation for <b>$node->title</b> in <b>$target_language</b> is already requested</li>";
      $check_job_translation = TRUE;
    }
  }
  if ($check_job_translation) {
    drupal_set_message(t('<b>Translation jobs in progress !</b><br><ul> !output</ul>', array('!output' => $output)), 'warning');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_translations_form_locale_languages_predefined_form_alter(&$form, &$form_state, $form_id) {
  // Generate translation roles after adding new languages
  // and add translation skills to user_administrator.
  $form['#submit'][] = 'create_translation_roles';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_translations_form_views_form_tmgmt_node_source_overview_page_alter(&$form, &$form_state, $form_id) {
  // Tmgmt admin node source page :
  // disable content that have pending job translation requests.
  $enabled_languages = language_list('enabled');
  $count_enabled_languages = count($enabled_languages[1]) - 1;

  if (isset($form['views_bulk_operations'])) {
    foreach ($form['views_bulk_operations'] as $key => $value) {
      if (isset($value['#return_value'])) {
        $query = new EntityFieldQuery();
        $return = $query
          ->entityCondition('entity_type', 'tmgmt_job_item')
          ->propertyCondition('item_type', 'node')
          ->propertyCondition('item_id', $value['#return_value'])
          ->propertyCondition('state', TMGMT_JOB_ITEM_STATE_ACCEPTED, '<>')
          ->count()
          ->execute();
        if ($return == $count_enabled_languages) {
          // If they are a pending translation for each enabled languages
          // => disable checkbox.
          $form['views_bulk_operations'][$key]['#disabled'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_translations_form_tmgmt_node_ui_node_form_alter(&$form, &$form_state, $form_id) {
  $node = node_load(arg(1));
  // Hide request translation on node translation
  // (display only on source node).
  if ($node->tnid != $node->nid && $node->tnid != 0) {
    foreach ($form['languages']['#options'] as $id => $option) {
      $form['languages'][$id] = array('#disabled' => TRUE, '#type' => 'checkbox');
    }
    $form['actions']['#attributes']['class'][] = 'element-invisible';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function multisite_translations_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Disable the language field since there are pending
  // job translation items on this node.
  if (isset($form['nid']['#value'])) {
    $query = new EntityFieldQuery();
    $return = (boolean) $query
      ->entityCondition('entity_type', 'tmgmt_job_item')
      ->propertyCondition('item_type', 'node')
      ->propertyCondition('item_id', $form['nid']['#value'])
      ->propertyCondition('state', TMGMT_JOB_ITEM_STATE_ACCEPTED, '<>')
      ->execute();

    if ($return) {
      $form['language']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function multisite_translations_views_query_alter(&$view, &$query) {
  // Alter translation_jobs view to display only jobs related
  // to roles translation_language of the current user.
  if ($view->name == 'translation_jobs') {
    global $user;
    if (is_translator($user)) {
      $view->query->add_where(0, 'tmgmt_job.target_language', get_translator_languages($user), 'in');
    }
  }
}

/**
 * Test if a user has one or any translator roles.
 */
function is_translator($account) {
  $roles = $account->roles;
  foreach ($roles as $rid => $role) {
    if (substr($role, 0, 10) == 'translator') {
      return TRUE;
    }
  }
  $result = FALSE;
}

/**
 * Get all the languages that a translator is responsible for.
 */
function get_translator_languages($account) {
  $language_codes = array();
  $roles = $account->roles;
  foreach ($roles as $rid => $role) {
    if (substr($role, 0, 10) == 'translator') {
      $language_codes[] = get_related_language($role);
    }
  }
  return $language_codes;
}

/**
 * Get the language code related to a translation role.
 */
function get_related_language($role) {
  $elt = explode("_", $role);
  $result = db_select('languages', 'l')
    ->fields('l', array('language'))
    ->condition('name', ucfirst($elt[1]), '=')
    ->execute()
    ->fetchAssoc();

  return ($result['language']);
}

/**
 * Get the translation role related to a language code.
 */
function get_related_translation_role($language_code) {
  $result = db_select('languages', 'l')
    ->fields('l', array('name'))
    ->condition('language', $language_code, '=')
    ->execute()
    ->fetchAssoc();

  return ('translator_' . strtolower($result['name']));
}

/**
 * Create the translation roles.
 */
function create_translation_roles() {
  $languages = language_list();
  $default_language = language_default();
  $default_language = $default_language->language;

  // Create translation roles.
  foreach ($languages as $lid => $language) {
    $role_name = 'translator_' . strtolower($language->name);

    $result = db_select('role', 'r')
      ->fields('r')
      ->condition('name', $role_name, '=')
      ->execute()
      ->fetchAssoc();

    if ($result == NULL) {
      $role = new stdClass();
      $role->name = $role_name;
      user_role_save($role);
      user_role_grant_permissions($role->rid, array(
        'create translation jobs',
        'submit translation jobs',
        'accept translation jobs',
        'access workbench',
        'translate content',
      ));
    }
  }

  // Add translation skill to user_administrator.
  $delta = count($languages);
  if ($user = user_load_by_name('user_administrator')) {
    foreach ($languages as $lid => $language) {
      if ($language->language != $default_language) {
        $check_skill = db_select('field_data_tmgmt_translation_skills', 'fdtts')
          ->fields('fdtts')
          ->condition('tmgmt_translation_skills_language_from', $default_language, '=')
          ->condition('tmgmt_translation_skills_language_to', $language->language, '=')
          ->condition('entity_id', $user->uid, '=')
          ->execute()
          ->fetchAssoc();

        if ($check_skill == NULL) {
          $id = db_insert('field_data_tmgmt_translation_skills')
            ->fields(array(
              'entity_type' => 'user',
              'bundle' => 'user',
              'deleted' => 0,
              'entity_id' => $user->uid,
              'revision_id' => $user->uid,
              'language' => 'und',
              'delta' => $delta,
              'tmgmt_translation_skills_language_from' => $default_language,
              'tmgmt_translation_skills_language_to' => $language->language,
            ))
            ->execute();
          $delta++;
        }
      }
    }
  }

}

/**
 * Implements hook_rules_action_info().
 */
function multisite_translations_rules_action_info() {
  return array(
    'mail_to_related_translation_role' => array(
      'label' => t('Send mail to the related translation role'),
      'group' => t('Translation Management'),
      'parameter' => array(
        'subject' => array(
          'type' => 'text',
          'label' => t('Subject'),
          'description' => t("The mail's subject."),
        ),
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
          'description' => t("The mail's message body."),
        ),
        'from' => array(
          'type' => 'text',
          'label' => t('From'),
          'description' => t("The mail's from address. Leave it empty to use the site-wide configured address."),
          'optional' => TRUE,
        ),
      ),
      'base' => 'rules_action_mail_to_related_translation_role',
      'access callback' => 'rules_system_integration_access',
    ),
  );
}

/**
 * Send mail.
 *
 * To the translation role related to the target language
 * of the translation job.
 */
function rules_action_mail_to_related_translation_role($subject, $message, $from = NULL, $settings = NULL, RulesState $state = NULL, RulesPlugin $element = NULL) {
  $tmgmt_job = $state->variables['tmgmt_job']->value();

  // Stop if the target language is not yet set and the job not submitted.
  if ($tmgmt_job->target_language == NULL || $tmgmt_job->state == 0) {
    return;
  }

  $translator_role_name = get_related_translation_role($tmgmt_job->target_language);
  $translator_role = db_query("SELECT rid FROM {role} WHERE name = :p1", array(':p1' => $translator_role_name))->fetchObject();
  $from = !empty($from) ? str_replace(array("\r", "\n"), '', $from) : NULL;

  // Get all users.
  $result = db_query("SELECT DISTINCT u.mail FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE r.rid = :p1", array(':p1' => $translator_role->rid));

  // Send the mails.
  $params = array(
    'subject' => $subject,
    'message' => $message,
  );
  // Set a unique key for this mail.
  $name = isset($element->root()->name) ? $element->root()->name : 'unnamed';
  $key = 'rules_action_mail_to_users_of_role_' . $name . '_' . $element->elementId();  $languages = language_list();

  $message = array('result' => TRUE);
  foreach ($result as $row) {
    $message = drupal_mail('rules', $key, $row->mail, language_default(), $params, $from);
    if (!$message['result']) {
      break;
    }
  }
  if ($message['result']) {
    watchdog('rules', 'Successfully sent email to the role(s) :roles.', array(':roles' => $translator_role_name));
  }
}

/**
 * Form constructor for the user multisite translation form.
 *
 * @see multisite_translation_form_submit()
 *
 * @ingroup forms
 */
function multisite_translation_form($form, &$form_state) {
  $form['submit'] = array('#type' => 'submit', '#value' => t('Rebuild translation roles'));
  return $form;
}

/**
 * Form submission handler for multisite_translation_form().
 *
 * @see multisite_translation_form()
 */
function multisite_translation_form_submit($form, &$form_state) {
  create_translation_roles();
  drupal_set_message(t('Translation roles have been rebuild.'));
}
