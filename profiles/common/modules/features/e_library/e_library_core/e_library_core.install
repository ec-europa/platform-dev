<?php

/**
 * @file
 * Install the feature e_library.
 */

/**
 * Implements hook_enable().
 */
function e_library_core_enable() {
  // solR configuration add bundle.
  multisite_drupal_toolbox_config_solr_bundle('document', 'add');

  // Create a vocabulary dedicated to the media tags.
  $vocabulary = (object) array(
    'name' => st('Media tags'),
    'machine_name' => 'media_tags',
    'module' => 'media_library_core',
  );
  taxonomy_vocabulary_save($vocabulary);

  // Add default tags.
  $vocabulary = taxonomy_vocabulary_machine_name_load('media_tags');
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('Photos'),
  );
  taxonomy_term_save($term);
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('Documents'),
  );
  taxonomy_term_save($term);
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('Reports'),
  );

  // Activation message.
  drupal_set_message(t('E-library feature is now active on your site.'));
  $link = l(t('"Media: node" module setup page'), 'admin/config/media/media_node', array('attributes' => array('target' => '_blank')));
  drupal_set_message(t('You may want to "Rebuild all media referencing nodes". Go to the !link and click the "Rebuild" button.', array('!link' => $link)));
}

/**
 * Set the threading properties for documents comments.
 */
function e_library_core_install() {
  // Use soft config for documents comment form location.
  multisite_config_service('comment')->setThreadingCommentForContentType('document', 0);
}

/**
 * Implements hook_disable().
 */
function e_library_core_disable() {
  // solR configuration delete bundle.
  multisite_drupal_toolbox_config_solr_bundle('document', 'delete');

  $vocabulary = taxonomy_vocabulary_machine_name_load('media_tags');
  taxonomy_vocabulary_delete($vocabulary->vid);

  // Activation message.
  drupal_set_message(t('E-library feature is now disabled on your site.'));

  $type = 'document';
  $types_conf = media_node_variable_get('types');
  if ($types_conf && $types_conf[$type]) {
    // Unset the "Media: node" module configuration
    // for the document content-type.
    $types_conf[$type] = 0;
    media_node_variable_set('types', $types_conf);
    $link = l(t('"Media: node" module setup page'), 'admin/config/media/media_node', array('attributes' => array('target' => '_blank')));
    drupal_set_message(t('You may want to "Rebuild all media referencing nodes". Go to the !link and click the "Rebuild" button.', array('!link' => $link)));
  }

}

/**
 * Implements hook_update_N().
 */
function e_library_core_update_7120() {
  // Check if the taxonomy media_tags already exists.
  $vocabulary = db_select('taxonomy_vocabulary', 'tv')
    ->fields('tv')
    ->condition('machine_name', 'media_tags', '=')
    ->execute()
    ->fetchAssoc();

  if (count($vocabulary) == 0) {
    // Create a vocabulary dedicated to the media tags.
    $vocabulary = (object) array(
      'name' => st('Media tags'),
      'machine_name' => 'media_tags',
      'module' => 'media_library_core',
    );
    taxonomy_vocabulary_save($vocabulary);

    // Add default tags.
    $vocabulary = taxonomy_vocabulary_machine_name_load('media_tags');
    $term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => st('Photos'),
    );
    taxonomy_term_save($term);
    $term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => st('Documents'),
    );
    taxonomy_term_save($term);
    $term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => st('Reports'),
    );
  }
}
