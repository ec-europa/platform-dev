<?php

/**
 * @file
 * Multisite forum core tests classe.
 */

/**
 * Test Multisite Forum features to ensure it follows QA requirements.
 */
class MultisiteForumCoreQAWebTestCase extends MultisiteDrupalWebTestCase {

  protected $user1;
  protected $user2;
  protected $privilegedUser;
  protected $profile = 'multisite_drupal_core';

  /**
   * Returns class informations.
   */
  public static function getInfo() {
    return array(
      'name' => 'Multisite Forum Core tests',
      'description' => 'Test Multisite Forum Core feature to ensure it follows QA requirements.',
      'group' => 'Multisite Core Features',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('multisite_forum_core');
    $this->user1 = $this->drupalCreateUser();
    $this->user2 = $this->drupalCreateUser();
    $this->privilegedUser = $this->multisiteDrupalToolboxCreateUserWithRole('administrator');
  }

  /**
   * Initializes taxonomies and content type.
   */
  public function testFeatureInitialization() {

    $vocabulary = taxonomy_vocabulary_machine_name_load('forums');

    $status = (isset($vocabulary) && $vocabulary !== NULL);
    $this->assert($status, 'Taxonomy "forum" correctly added');

    $types = node_type_get_types();
    $status = isset($types['discussion']);
    $this->assert($status, 'Content type "discussion" correctly added');

    $field = field_info_field('taxonomy_forums');
    $status = isset($field) && is_array($field) && !empty($field);
    $this->assert($status, 'Field "taxonomy forums" correctly added');

    $field_instance = field_info_instance('node', 'taxonomy_forums', 'discussion');
    $status = isset($field_instance) && is_array($field_instance) && !empty($field_instance);
    $this->assert($status, 'Field instance "taxonomy_forums" correctly added to Discussion content type');
  }

  /**
   * Tests discussions.
   */
  public function testDiscussions() {
    //
    // Discussions : create/edit/delete/access.
    //
    $vocabulary = taxonomy_vocabulary_machine_name_load('forums');
    $term = (object) array(
      'vid' => $vocabulary->vid,
      'name' => st('SimpleTest Forum'),
      'description' => st('Test forum'),
    );
    taxonomy_term_save($term);

    $this->drupalLogin($this->user1);

    $term = array_shift(taxonomy_get_term_by_name('SimpleTest Forum'));
    // User can post a forum topic.
    $title = $this->randomName();
    $edit = array(
      'title' => $title,
      'taxonomy_forums[und]' => $term->tid,
    );
    $this->drupalPost('node/add/discussion', $edit, t('Save'));

    // Check that the node exists in the database.
    $node = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertTrue($node, t('Node found in database.'));

    // Check user can edit and delete his own post.
    $this->clickLink(t('Edit'));
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->drupalPost(NULL, array(), t('Delete'));

    $this->drupalLogin($this->user2);

    $term = array_shift(taxonomy_get_term_by_name('SimpleTest Forum'));
    // User can post a discussion.
    $title = $this->randomName();
    $edit = array(
      'title' => $title,
      'taxonomy_forums[und]' => $term->tid,
    );
    $this->drupalPost('node/add/discussion', $edit, t('Save'));
    $node = $this->drupalGetNodeByTitle($edit['title']);

    $this->drupalLogin($this->user1);
    $this->drupalGet("node/{$node->nid}");

    // Check if user cannot edit post of another user.
    $this->drupalGet("node/{$node->nid}/edit");
    $this->assertResponse('403', 'User cannot edit post of another user.');
  }

}
