<?php

/**
 * @file
 * This is the .module file of the social bookmark feature.
 */

/**
 * Implements hook_init().
 */
function social_bookmark_init() {
  if (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') {
    drupal_add_js('https://ec.europa.eu/wel/socialbookmark/share.js', 'external');
  }
  else {
    drupal_add_js('http://ec.europa.eu/wel/socialbookmark/share.js', 'external');
  }
}

/**
 * Implements hook_permission().
 */
function social_bookmark_permission() {
  return array(
    'access social bookmark config page' => array(
      'title' => t('Access Social Bookmark config pages'),
      'description' => t('Access to social bookmark configuration pages'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function social_bookmark_menu() {
  $items = array();

  $items['admin/config/socialbookmark'] = array(
    'title' => 'Social Bookmark',
    'description' => 'Configuration for the Social Bookmark blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_social_bookmark_admin_settings'),
    'access arguments' => array('access social bookmark config page'),
    'file' => 'social_bookmark.admin.inc',
  );

  $items['admin/config/socialbookmark/social_bookmark'] = array(
    'title' => 'Social Bookmark widget',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-1',
  );

  $items['admin/config/socialbookmark/social_bar'] = array(
    'title' => 'Social Bar',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_social_bookmark_bar_admin_settings'),
    'access arguments' => array('access social bookmark config page'),
    'file' => 'social_bookmark_bar.admin.inc',
    'weight' => '0',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function social_bookmark_block_info() {
  $blocks['social-bookmark'] = array(
    'info' => t('Social bookmark'),
  );
  $blocks['social-bar'] = array(
    'info' => t('Social bar'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function social_bookmark_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'social-bookmark':
      $block['content'] = _social_bookmark_contents();
      break;

    case 'social-bar':
      $block['content'] = _social_bookmark_bar_contents();
      break;
  }
  return $block;
}

/**
 * Custom html block.
 */
function _social_bookmark_contents() {
  $user_value_socialbookmark = variable_get('user_value_socialbookmark', 'EU_Commission');
  switch ($user_value_socialbookmark) {
    case TRUE:
      $user_value_socialbookmark_twitter = '"twitter_via_handle":"' . $user_value_socialbookmark . '", ';
      break;

    case FALSE:
      $user_value_socialbookmark_twitter = "";
      break;

    default:
      $user_value_socialbookmark_twitter = "";
      break;
  }

  $stat_book_final = _social_bookmark_stat_switch(variable_get('statistics_socialbookmark'));

  $language_selector_socialbookmark = variable_get('language_selector_socialbookmark');
  $lan_book_final = _social_bookmark_lang_switch(variable_get('language_socialbookmark'), $language_selector_socialbookmark) . ',';

  $typ_socialbookmark = variable_get('type_socialbookmark');
  $siz_socialbookmark = variable_get('icon_size_socialbookmark');
  switch ($typ_socialbookmark) {
    case 'Button':
      $typ_final = '"style":"button", ';
      break;

    case 'Icon':
      $typ_final = '"style":"icon", "size":' . $siz_socialbookmark . ', ';
      break;

    default:
      $typ_final = '"style":"button", ';
      break;
  }

  $ove_socialbookmark = variable_get('override_socialbookmark');
  $lab_socialbookmark = variable_get('label_socialbookmark');
  switch ($ove_socialbookmark) {
    case TRUE:
      $ove_final = '"text":"' . $lab_socialbookmark . '", ';
      break;

    case FALSE:
      $ove_final = '';
      break;

    default:
      $ove_final = '';
      break;
  }

  $dis_socialbookmark = variable_get('display_socialbookmark');
  $atl_socialbookmark = variable_get('least_socialbookmark');
  switch ($dis_socialbookmark) {
    case TRUE:
      $dis_final = '"counter_display":true, ';
      if ((is_numeric($atl_socialbookmark)) && ($atl_socialbookmark >= 1)) {
        $dis_final = '"counter_display":"atleast' . $atl_socialbookmark . '", ';
      }
      break;

    case FALSE:
      $dis_final = '"counter_display":false, ';
      break;

    default:
      $dis_final = '"counter_display":false, ';
      break;
  }

  $ori_socialbookmark = variable_get('orientation_socialbookmark');
  switch ($ori_socialbookmark) {
    case 'Right':
      $ori_final = '"counter_position":"right"';
      break;

    case 'Left':
      $ori_final = '"counter_position":"left"';
      break;

    default:
      $ori_final = '"counter_position":"right"';
      break;
  }

  $ret = '<div id="ec-widget-share" style="word-wrap: normal"><!--{' . $stat_book_final . $user_value_socialbookmark_twitter . $lan_book_final . $typ_final . $ove_final . $dis_final . $ori_final . '}//--></div>';

  return $ret;
}

/**
 * Custom html block.
 */
function _social_bookmark_bar_contents() {
  // Get global variable with the form data.
  if ($saved_form = variable_get('data_table')) {
    $array_widget = array();
    foreach ($saved_form as $row => $data) {
      // If enabled is TRUE, add item to the new array.
      if ($data['enabled'] === 1) {
        $weight = $data['weight'];
        while (array_key_exists($weight, $array_widget)) {
          $weight++;
        }
        $array_widget[$weight] = $row;
      }
    }
    // Sort array by weight.
    ksort($array_widget);

    // Create variable with all the enabled widgets.
    $slots_final = '"to":[';
    foreach ($array_widget as $widget) {
      $slots_final .= '"' . $widget . '",';
    }
    $slots_final .= '],';

    $display_final = '"display":"' . _social_bookmark_display_bar_switch(variable_get('type_socialbar')) . '",';
    $size_final = '"size":' . variable_get('icon_size_socialbar') . ',';
    $text_final = '"text":"' . _social_bookmark_text_bar_switch(variable_get('text_socialbar')) . '",';
    $language_selector_socialbar = variable_get('language_selector_socialbar');
    $lan_bar_final = _social_bookmark_lang_switch(variable_get('language_socialbar'), $language_selector_socialbar) . ',';
    $stat_bar_final = _social_bookmark_stat_switch(variable_get('statistics_socialbar'));

    $bar = '<div id="ec-widget-share-example" class="ec-widget-individual" style="word-wrap: normal"><!--{' . $slots_final . $display_final . $size_final . $text_final . $lan_bar_final . $stat_bar_final . '}//--></div>';

    if (count($array_widget) > 0) {
      return $bar;
    }
    else {
      return NULL;
    }
  }
}

/**
 * Display auxiliar function for _social_bookmark_bar_contents().
 */
function _social_bookmark_display_bar_switch($display) {
  switch ($display) {
    case 'Horizontal':
      $display = 'inline';
      break;

    case 'Vertical':
      $display = 'block';
      break;

    default:
      $display = 'inline';
      break;
  }
  return $display;
}

/**
 * Text auxiliar function for _social_bookmark_bar_contents().
 */
function _social_bookmark_text_bar_switch($text) {
  switch ($text) {
    case 'No label':
      $text = '';
      break;

    case 'Share label':
      $text = 'share';
      break;

    case '[Network name]':
      $text = 'network';
      break;

    case 'Share on [Network name]':
      $text = 'share-network';
      break;

    default:
      $text = '';
      break;
  }
  return $text;
}

/**
 * Lang auxiliar function for _social_bookmark_bar_contents().
 */
function _social_bookmark_lang_switch($lang, $sel) {
  switch ($lang) {
    case 'From URL':
      $lang = '"lang":"FromURL"';
      break;

    case 'From META DATA':
      $lang = '"lang":"FromMETA"';
      break;

    case 'Language specified':
      $lang = '"lang":"' . $sel . '"';
      break;

    default:
      $lang = '"lang":"FromURL"';
      break;
  }
  return $lang;
}

/**
 * Stat auxiliar function for _social_bookmark_bar_contents().
 */
function _social_bookmark_stat_switch($sta) {
  switch ($sta) {
    case TRUE:
      $sta = '"stats":true,';
      break;

    case FALSE:
      $sta = '"stats":false,';
      break;

    default:
      $sta = '"stats":true,';
      break;
  }
  return $sta;
}

/**
 * Implements hook_preprocess_node().
 */
function social_bookmark_preprocess_node(&$variables) {
  $variables['social_bookmark'] = _social_bookmark_contents();
  $variables['social_bar'] = _social_bookmark_bar_contents();
}
