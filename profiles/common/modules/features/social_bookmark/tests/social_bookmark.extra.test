<?php

/**
 * @file
 * Tests for social_bookmark.module.
 *
 * ECWeb MULTISITE Feature Test.
 */

/**
 * Defines a base class for testing the social_bookmark feature.
 */
class SocialBookmarkFeatureTest extends DrupalWebTestCase {
  protected $WebUser;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Social Bookmark feature test',
      'description' => 'Test the Social Bookmark feature to ensure it works as intended.',
      'group' => 'Multisite Feature Test',
    );
  }

  /**
   * Configure environment: declare modules, users, permissions...
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array('social_bookmark', 'context'));
  }

  /**
   * Verify that current user has no access to page.
   */
  public function socialbookmarkVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied.
    $this->drupalGet($url);
    $this->assertResponse(403, 'Expected -> Access Denied');
  }

  /**
   * Verify that current user has access to page.
   */
  public function socialbookmarkVerifyAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, 'Expected -> Access OK');

    // Test that the form is properly build.
    // "Customize widget look" fieldset.
    $this->assertText(t('Customize widget look'), '"Customize widget look" fieldset exists');
    $this->assertText(t('Widget type'), '"Widget type" options group exists');
    $this->assertFieldById('edit-type-socialbookmark-button', '', '"Button" parameter is available');
    $this->assertFieldById('edit-type-socialbookmark-icon', '', '"Icon" parameter is available');
    $this->assertFieldById('edit-override-socialbookmark', '', '"Override label" parameter is available');
    $this->assertText(t('Override default label'), '"Override default label" label exists');
    $this->assertText(t('New label'), '"New label" label exists');
    $this->assertFieldById('edit-label-socialbookmark', '', '"New label" parameter is available');

    // "Display counter" fieldset.
    $this->assertText(t('Display counter'), '"Display counter" fieldset exists');
    $this->assertText(t('Display/hide counter'), '"Display/hide counter" label exists');
    $this->assertFieldById('edit-display-socialbookmark', '', '"Display counter" parameter is available');
    $this->assertText(t('Minimum "shares" for display'), '"Minimum shares for display" label exists');
    $this->assertFieldById('edit-least-socialbookmark', '', '"At least" parameter is available');
    $this->assertText(t('Counter position'), '"Counter position" label exists');
    $this->assertFieldById('edit-orientation-socialbookmark-right', '', '"Right orientation" parameter is available');
    $this->assertFieldById('edit-orientation-socialbookmark-left', '', '"Left orientation" parameter is available');

    // "Enable/disable statistics" fieldset.
    $this->assertText(t('Enable/disable statistics'), '"Enable/disable statistics" fieldset exists');
    $this->assertText(t('Enable/disable statistics'), '"Enable/disable statistics" label exists');
    $this->assertFieldById('edit-statistics-socialbookmark', '', '"Enable statistics" parameter is available');

    // "Modify language's detection" fieldset.
    $this->assertText(t("Modify language's detection"), '"Modify language\'s detection" fieldset exists');
    $this->assertText(t('Language source'), '"Language source" options group exists');
    $this->assertFieldById('edit-language-socialbookmark-from-url', '', '"From URL" parameter is available');
    $this->assertFieldById('edit-language-socialbookmark-from-meta-data', '', '"From META DATA" parameter is available');
    $this->assertFieldById('edit-language-socialbookmark-language-specified', '', '"Language specified" parameter is available');
    $this->assertText(t('Set a specific language'), '"Set a specific language" label exists');
    $this->assertFieldById('edit-language-selector-socialbookmark', 'en', '"Set a specific language" parameter is available');
  }

  /**
   * Check the access to the social bookmark configuration page.
   */
  public function testsocialbookmarkAccess() {
    // Verify that anonymous users can't access to the configuration page.
    $this->socialbookmarkVerifyNoAccess('admin/config/socialbookmark/socialbookmark');

    // Create a regular user and login.
    $this->WebUser = $this->drupalCreateUser();
    $this->drupalLogin($this->WebUser);
    // Verify that authenticated users can't access to the configuration page.
    $this->socialbookmarkVerifyNoAccess('admin/config/socialbookmark/socialbookmark');

    // Create a user with permissions to access to the configuration page.
    $this->WebUser = $this->drupalCreateUser(array(
      'administer site configuration', 'access administration pages', 'administer blocks',
    ));
    $this->drupalLogin($this->WebUser);
    // Verify that users with permission can access to the configuration page.
    $this->socialbookmarkVerifyAccess('admin/config/socialbookmark/socialbookmark');

    // Verify social bookmark button configuration and display.
    $this->socialbookmarkBehavior();
  }

  /**
   * Check the functionality of the social bookmark feature.
   */
  public function socialbookmarkBehavior() {
    // There is a block and it is suitable to be placed in a region.
    $block = array(
      'regions[bartik]' => 'featured',
    );
    $this->drupalPost('admin/structure/block/manage/social_bookmark/social-bookmark/configure', $block, t('Save block'));

    // Setup a configuration.
    $conf = array(
      'language_socialbookmark' => 'Language specified',
      'language_selector_socialbookmark' => 'en',
      'type_socialbookmark' => 'Icon',
      'icon_size_socialbookmark' => '32',
      'override_socialbookmark' => TRUE,
      'label_socialbookmark' => 'Custom label',
      'display_socialbookmark' => FALSE,
    );
    $this->drupalPost('admin/config/socialbookmark/socialbookmark', $conf, t('Save configuration'));

    // Check that the button is displayed.
    $this->drupalGet('/');
    $this->assertRaw('<!--{"stats":true,"lang":"en","style":"icon", "size":32, "text":"Custom label", "counter_display":false, "counter_position":"right"}//-->', 'The Share Bookmark widget is displayed.');
  }

  /**
   * Check the access to the social bar configuration page.
   */
  public function testsocialbarkAccess() {
    // Verify that anonymous users can't access to the configuration page.
    $this->socialbookmarkVerifyNoAccess('admin/config/socialbookmark/social_bar');

    // Create a regular user and login.
    $this->WebUser = $this->drupalCreateUser();
    $this->drupalLogin($this->WebUser);
    // Verify that authenticated users can't access to the configuration page.
    $this->socialbookmarkVerifyNoAccess('admin/config/socialbookmark/social_bar');

    // Create a user with permissions to access to the configuration page.
    $this->WebUser = $this->drupalCreateUser(array(
      'administer site configuration', 'access administration pages', 'administer blocks',
    ));
    $this->drupalLogin($this->WebUser);
    // Verify that users with permission can access to the configuration page.
    $this->socialbarVerifyAccess('admin/config/socialbookmark/social_bar');

    // Verify social bar widgets configuration and display.
    $this->socialbarBehavior();
  }

  /**
   * Verify that current user has access to page.
   */
  public function socialbarVerifyAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, 'Expected -> Access OK');

    // Test that the form is properly build.
    // "Individual networks buttons" fieldset.
    $this->assertText(t('Individual networks buttons'), '"Individual networks buttons" fieldset exists');
    $this->assertRaw('<table id="entry-order"', '"Item list" table is available');

    // "Customize button look" fieldset.
    $this->assertText(t('Customize button look'), '"Customize button look" fieldset exists');
    $this->assertText(t('Button display'), '"Button display" options group exists');
    $this->assertFieldById('edit-type-socialbar-horizontal', '', '"Horizontal" parameter is available');
    $this->assertFieldById('edit-type-socialbar-vertical', '', '"Vertical" parameter is available');
    $this->assertText(t('Icons size'), '"Icons size (px)" label exists');
    $this->assertFieldById('edit-icon-size-socialbar', '24', '"Icon size" parameter is available');
    $this->assertText(t('Label display'), '"Label display" options group exists');
    $this->assertFieldById('edit-text-socialbar-none', '', '"None" parameter is available');
    $this->assertFieldById('edit-text-socialbar-share', '', '"Share" parameter is available');
    $this->assertFieldById('edit-text-socialbar-network-name', '', '"[Network name]" parameter is available');
    $this->assertFieldById('edit-text-socialbar-share-on-network-name', '', '"Share on [Network name]" parameter is available');

    // "Enable/disable statistics" fieldset.
    $this->assertText(t('Enable/disable statistics'), '"Enable/disable statistics" fieldset exists');
    $this->assertText(t('Enable/disable statistics'), '"Enable/disable statistics" label exists');
    $this->assertFieldById('edit-statistics-socialbar', '', '"Enable statistics" parameter is available');

    // "Modify language's detection" fieldset.
    $this->assertText(t("Modify language's detection"), '"Modify language\'s detection" fieldset exists');
    $this->assertText(t('Language source'), '"Language source" options group exists');
    $this->assertFieldById('edit-language-socialbar-from-url', '', '"From URL" parameter is available');
    $this->assertFieldById('edit-language-socialbar-from-meta-data', '', '"From META DATA" parameter is available');
    $this->assertFieldById('edit-language-socialbar-language-specified', '', '"Language specified" parameter is available');
    $this->assertText(t('Set a specific language'), '"Set a specific language" label exists');
    $this->assertFieldById('edit-language-selector-socialbar', 'en', '"Set a specific language" parameter is available');
  }

  /**
   * Check the functionality of the social bookmark feature.
   */
  public function socialbarBehavior() {
    // There is a block and it is suitable to be placed in a region.
    $block = array(
      'regions[bartik]' => 'featured',
    );
    $this->drupalPost('admin/structure/block/manage/social_bookmark/social-bar/configure', $block, t('Save block'));

    // Setup a configuration.
    $conf = array(
      'data_table[facebook][enabled]' => TRUE,
      'data_table[facebook][weight]' => 3,
      'data_table[twitter][enabled]' => TRUE,
      'data_table[twitter][weight]' => 1,
      'data_table[wordpress][enabled]' => TRUE,
      'data_table[wordpress][weight]' => 2,
      'type_socialbar' => 'Horizontal',
      'icon_size_socialbar' => '32',
      'text_socialbar' => 'Share on [Network name]',
      'statistics_socialbar' => TRUE,
      'language_socialbar' => 'Language specified',
      'language_selector_socialbar' => 'en',
    );
    $this->drupalPost('admin/config/socialbookmark/social_bar', $conf, t('Save configuration'));

    // Check that the button is displayed.
    $this->drupalGet('/');
    $this->assertRaw('<!--{"to":["twitter","wordpress","facebook",],"display":"inline","size":32,"text":"share-network","lang":"en","stats":true,}//-->', 'Social bar widgets are displayed');
  }

}
