<?php

/**
 * @file
 * Multisite_twitterblock definition module.
 */

define('MULTISITE_TWITTERBLOCK_DEFAULT_TYPE', 'smk-twitter_user_timeline');
define('MULTISITE_TWITTERBLOCK_DEFAULT_SCREEN_NAME', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_OWNER_SCREEN_NAME', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_SLUG', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_INCL_HASHTAGS', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_INCL_PROFILES', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_EXCL_HASHTAGS', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_EXCL_PROFILES', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_FROM', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_RESTR_LANG_TO', '');
define('MULTISITE_TWITTERBLOCK_DEFAULT_RESULT_TYPE', 'mixed');
define('MULTISITE_TWITTERBLOCK_DEFAULT_COUNT', 3);
define('MULTISITE_TWITTERBLOCK_DEFAULT_INCLUDE_RTS', TRUE);
define('MULTISITE_TWITTERBLOCK_DEFAULT_EXCLUDE_REPLIES', TRUE);
define('MULTISITE_TWITTERBLOCK_DEFAULT_RTS_DISPLAY_ORIGINAL', TRUE);
define('MULTISITE_TWITTERBLOCK_DEFAULT_DISPLAY_USER', TRUE);
define('MULTISITE_TWITTERBLOCK_DEFAULT_DISPLAY_USER_PIC', TRUE);
define('MULTISITE_TWITTERBLOCK_DEFAULT_AUTO_EXPAND_PHOTO', TRUE);
define('MULTISITE_TWITTERBLOCK_FIELD_NAME', 'fpfis_twitter_override');
define('MULTISITE_TWITTERBLOCK_VOCABULARY_LIST', 'fpfis_twitter_override_vocabularies');
define('MULTISITE_TWITTERBLOCK_CONTENT_TYPE_LIST', 'fpfis_twitter_override_types');
define('MULTISITE_TWITTERBLOCK_ENTITY_CONTENT_TYPE', 'content_type');
define('MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_VOCABULARY', 'taxonomy_vocabulary');
define('MULTISITE_TWITTERBLOCK_ENTITY_NODE', 'node');
define('MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_TERM', 'taxonomy_term');

/**
 * Implements hook_menu().
 */
function multisite_twitterblock_menu() {
  // Configuration page.
  $items['admin/config/content/multisite_twitterblock/twitter'] = array(
    'title' => 'Multisite Twitter block',
    'description' => 'Configure Multisite Twitter block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_twitterblock_admin_settings'),
    'access arguments' => array('administer fpfis twitter widget'),
    'file' => 'multisite_twitterblock.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function multisite_twitterblock_permission() {
  return array(
    'administer fpfis twitter widget' => array(
      'title' => t('Administer Multisite Twitter block settings'),
    ),
    'administer fpfis twitter feature' => array(
      'title' => t('Administer Multisite Twitter block settings'),
    ),
    'override fpfis twitter widget' => array(
      'title' => t('Override Multisite Twitter block on select content types'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function multisite_twitterblock_block_info() {
  $blocks['fpfis_twitter'] = array(
    'info' => t('Twitter widget'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function multisite_twitterblock_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'fpfis_twitter':
      $config = array();
      // Node override.
      $node = menu_get_object();

      if ($node) {

        node_object_prepare($node);

        if (isset($node->fpfis_twitter_override)) {
          $config = $node->fpfis_twitter_override['config'];
        }
      }

      // Taxonomy term override.
      $taxonomy_term = NULL;
      $current_page_path = current_path();

      if (strpos($current_page_path, 'taxonomy/term') !== FALSE) {
        // Never sure what menu_callback will get you with.
        // A view overridding a taxo page.
        $url_tokens = explode('/', $current_page_path);
        if (isset($url_tokens[2]) && is_numeric($url_tokens[2])) {
          $taxonomy_term = taxonomy_term_load($url_tokens[2]);
        }
      }

      if ($taxonomy_term) {
        if (isset($taxonomy_term->fpfis_twitter_override)) {
          $config = $taxonomy_term->fpfis_twitter_override['config'];
        }
      }

      // Context override.
      $context_settings = multisite_twitterblock_detect_multisite_twitterblock_reaction();
      if (!empty($context_settings)) {
        $config = _multisite_twitterblock_load_twitter_config($context_settings['config']);
      }

      // Load default settings if no override.
      if (empty($config)) {
        $config = _multisite_twitterblock_load_twitter_config();
      }

      $block['subject'] = $config['title'];
      $block['content'] = theme('fpfis_twitter', $config);
      break;
  }

  return $block;
}

/**
 * Loads twitter config.
 *
 * @param array $override
 *   Array of new settings.
 *
 * @return array
 *   Twitter config.
 */
function _multisite_twitterblock_load_twitter_config(array $override = NULL) {
  $config = array(
    'title' => variable_get('fpfis_twitter_title', '<none>'),
    'type' => variable_get('fpfis_twitter_type', 'smk-twitter_user_timeline'),
    'screen_name' => variable_get('fpfis_twitter_screen_name', MULTISITE_TWITTERBLOCK_DEFAULT_SCREEN_NAME),
    'owner_screen_name' => variable_get('fpfis_twitter_owner_screen_name', MULTISITE_TWITTERBLOCK_DEFAULT_OWNER_SCREEN_NAME),
    'slug' => variable_get('fpfis_twitter_slug', MULTISITE_TWITTERBLOCK_DEFAULT_SLUG),
    'incl_hashtags' => variable_get('fpfis_twitter_incl_hashtags', MULTISITE_TWITTERBLOCK_DEFAULT_INCL_HASHTAGS),
    'incl_profiles' => variable_get('fpfis_twitter_incl_profiles', MULTISITE_TWITTERBLOCK_DEFAULT_INCL_PROFILES),
    'excl_hashtags' => variable_get('fpfis_twitter_excl_hashtags', MULTISITE_TWITTERBLOCK_DEFAULT_EXCL_HASHTAGS),
    'excl_profiles' => variable_get('fpfis_twitter_excl_profiles', MULTISITE_TWITTERBLOCK_DEFAULT_EXCL_PROFILES),
    'from' => variable_get('fpfis_twitter_from', MULTISITE_TWITTERBLOCK_DEFAULT_FROM),
    'restr_lang_to' => variable_get('fpfis_twitter_restr_lang_to', MULTISITE_TWITTERBLOCK_DEFAULT_RESTR_LANG_TO),
    'result_type' => variable_get('fpfis_twitter_result_type', MULTISITE_TWITTERBLOCK_DEFAULT_RESULT_TYPE),
    'count' => variable_get('fpfis_twitter_count', MULTISITE_TWITTERBLOCK_DEFAULT_COUNT),
    'include_rts' => variable_get('fpfis_twitter_include_rts', MULTISITE_TWITTERBLOCK_DEFAULT_INCLUDE_RTS),
    'exclude_replies' => variable_get('fpfis_twitter_exclude_replies', MULTISITE_TWITTERBLOCK_DEFAULT_EXCLUDE_REPLIES),
    'rts_display_original' => variable_get('fpfis_twitter_rts_display_original', MULTISITE_TWITTERBLOCK_DEFAULT_RTS_DISPLAY_ORIGINAL),
    'display_user' => variable_get('fpfis_twitter_display_user', MULTISITE_TWITTERBLOCK_DEFAULT_DISPLAY_USER),
    'display_user_pic' => variable_get('fpfis_twitter_display_user_pic', MULTISITE_TWITTERBLOCK_DEFAULT_DISPLAY_USER_PIC),
    'auto_expand_photo' => variable_get('fpfis_twitter_auto_expand_photo', MULTISITE_TWITTERBLOCK_DEFAULT_AUTO_EXPAND_PHOTO),
  );

  if ($override) {
    $overridden_values['title'] = $override['title'];
    $overridden_values['type'] = $override['type'];
    // Pop out type specific settings.
    $fpfis_twitter_types = variable_get('fpfis_twitter_types');
    foreach ($fpfis_twitter_types as $key => $current_type) {
      if (isset($override[$key])) {
        if (isset($override[$key]['detailed'])) {
          $overridden_values = array_merge($override[$key]['detailed'], $overridden_values);
          unset($override[$key]['detailed']);
        }
        $overridden_values = array_merge($override[$key], $overridden_values);
      }
    }
    $config = array_merge($config, $overridden_values);
  }

  return $config;
}

/**
 * Implements hook_theme().
 */
function multisite_twitterblock_theme() {
  return array(
    'fpfis_twitter' => array(
      'variables' => array('config' => NULL),
    ),
  );
}

/**
 * Implements theme hook.
 *
 * @param array $variables
 *   Array of new variables.
 *
 * @return string
 *   Twitter output config.
 */
function theme_fpfis_twitter(array $variables) {
  global $is_https;
  drupal_add_js(($is_https ? 'https' : 'http') . '://ec.europa.eu/wel/social-media-kit/social-media-kit.js', 'external');
  $type = $variables['type'];
  unset($variables['title']);
  unset($variables['type']);
  switch ($type) {
    case 'smk-twitter_user_timeline':
      // Remove List member feed specific settings.
      unset($variables['owner_screen_name']);
      unset($variables['slug']);
      // Remove Search feed specific settings.
      unset($variables['incl_hashtags']);
      unset($variables['incl_profiles']);
      unset($variables['excl_hashtags']);
      unset($variables['excl_profiles']);
      unset($variables['from']);
      unset($variables['restr_lang_to']);
      unset($variables['result_type']);
      break;

    case 'smk-twitter_list_timeline':
      // Remove User feed specific settings.
      unset($variables['screen_name']);
      // Remove Search feed specific settings.
      unset($variables['incl_hashtags']);
      unset($variables['incl_profiles']);
      unset($variables['excl_hashtags']);
      unset($variables['excl_profiles']);
      unset($variables['from']);
      unset($variables['restr_lang_to']);
      unset($variables['result_type']);
      break;

    case 'smk-twitter_search':
      // Remove User feed specific settings.
      unset($variables['screen_name']);
      // Remove List member feed specific settings.
      unset($variables['owner_screen_name']);
      unset($variables['slug']);
      break;
  }

  $booleans = array(
    'include_rts',
    'rts_display_original',
    'display_user',
    'display_user_pic',
    'auto_expand_photo',
  );

  // Set boolean values to boolean for the js library.
  // Drupal checkbox uses integer 0 for false.
  foreach ($booleans as $key) {
    if (isset($variables[$key])) {
      $variables[$key] = (boolean) $variables[$key];
    }
  }
  $config = drupal_json_encode($variables);
  return '<div id="' . $type . '"><!--' . $config . '//--></div>';
}

/**
 * Implements hook_taxonomy_term_load().
 */
function multisite_twitterblock_taxonomy_term_load($terms) {
  foreach ($terms as $tid => $term) {
    if (multisite_twitterblock_check_availability($term->vocabulary_machine_name, MULTISITE_TWITTERBLOCK_VOCABULARY_LIST)) {
      _multisite_twitterblock_load_settings($terms[$tid], $tid, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_TERM);
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function multisite_twitterblock_node_prepare($node) {
  if (!multisite_twitterblock_check_availability($node->type, MULTISITE_TWITTERBLOCK_CONTENT_TYPE_LIST)) {
    return;
  }

  $nid = isset($node->nid) ? $node->nid : NULL;
  _multisite_twitterblock_load_settings($node, $nid, MULTISITE_TWITTERBLOCK_ENTITY_NODE);
}

/**
 * Load settings for the entity or set default.
 *
 * @param object $entity
 *   Entity object.
 * @param int $entity_id
 *   Entity ID.
 * @param string $entity_type
 *   Entity type.
 */
function _multisite_twitterblock_load_settings(&$entity, $entity_id, $entity_type) {

  $fpfis_twitter_override = array();
  $field = MULTISITE_TWITTERBLOCK_FIELD_NAME;

  if ($entity_type == MULTISITE_TWITTERBLOCK_ENTITY_CONTENT_TYPE || $entity_type == MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_VOCABULARY) {
    // Settings for Content Type or Taxonomy vocabulary.
    $settings = variable_get(multisite_twitterblock_get_var_name($entity_id, $entity_type), NULL);
    if (!empty($settings)) {
      $fpfis_twitter_override['enabled'] = $settings['enabled'];
      $fpfis_twitter_override['config'] = _multisite_twitterblock_load_twitter_config($settings['config']);
    }
  }
  else {
    // Settings for Node or Taxonomy term.
    if (empty($entity->$field)) {
      if (!empty($entity_id)) {
        $settings = multisite_twitterblock_load($entity_id, $entity_type);
        if (!empty($settings)) {
          $fpfis_twitter_override['enabled'] = TRUE;
          $fpfis_twitter_override['config'] = _multisite_twitterblock_load_twitter_config($settings);
        }
      }
    }

    // Load Node default settings from content type.
    if ($entity_type == MULTISITE_TWITTERBLOCK_ENTITY_NODE && empty($fpfis_twitter_override)) {
      $settings = variable_get(multisite_twitterblock_get_var_name($entity->type, MULTISITE_TWITTERBLOCK_ENTITY_CONTENT_TYPE), NULL);
      if (!empty($settings)) {
        $fpfis_twitter_override['enabled'] = $settings['enabled'];
        $fpfis_twitter_override['config'] = _multisite_twitterblock_load_twitter_config($settings['config']);
      }
    }

    // Load taxonomy term default settings from taxonomy vocabulary.
    if ($entity_type == MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_TERM && empty($fpfis_twitter_override)) {

      if (!empty($entity)) {
        $vocabulary_machine_name = is_object($entity) ? $entity->vocabulary_machine_name : $entity['vocabulary_machine_name'];
        $settings = variable_get(multisite_twitterblock_get_var_name($vocabulary_machine_name, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_VOCABULARY), NULL);
        if (!empty($settings)) {
          $fpfis_twitter_override['enabled'] = $settings['enabled'];
          $fpfis_twitter_override['config'] = _multisite_twitterblock_load_twitter_config($settings['config']);
        }
      }
    }
  }

  // Set default values.
  if (empty($fpfis_twitter_override)) {
    $fpfis_twitter_override['enabled'] = FALSE;
    $fpfis_twitter_override['config'] = _multisite_twitterblock_load_twitter_config(NULL);
  }

  // If entiry exists set settings.
  if (is_object($entity)) {
    $entity->$field = $fpfis_twitter_override;
  }

  return $fpfis_twitter_override;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function multisite_twitterblock_form_taxonomy_form_term_alter(&$form, $form_state) {

  if (is_object($form['#term'])) {
    $machine_name = $form['#term']->vocabulary_machine_name;
  }
  else {
    $machine_name = isset($form['#term']['vocabulary_machine_name']) ? $form['#term']['vocabulary_machine_name'] : NULL;
  }

  if (!multisite_twitterblock_check_availability($machine_name, MULTISITE_TWITTERBLOCK_VOCABULARY_LIST)) {
    return;
  }

  $settings = NULL;
  if (empty($form['#term']['tid'])) {
    $settings = _multisite_twitterblock_load_settings($form['#term'], NULL, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_TERM);
  }

  _multisite_twitterblock_entity_subform($form, $settings);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function multisite_twitterblock_form_node_form_alter(&$form, $form_state) {
  $type = $form['#node']->type;
  if (!multisite_twitterblock_check_availability($type, MULTISITE_TWITTERBLOCK_CONTENT_TYPE_LIST)) {
    return;
  }

  _multisite_twitterblock_entity_subform($form);
}

/**
 * Provides a settings subform.
 *
 * @param array $form
 *   Rendable array.
 */
function _multisite_twitterblock_entity_subform(array &$form, $fpfis_twitter_override = array()) {
  $field = MULTISITE_TWITTERBLOCK_FIELD_NAME;
  // Try to get settings from form entity.
  if (isset($form['#entity']->$field)) {
    $fpfis_twitter_override = $form['#entity']->$field;
  }
  if (isset($form['#term'][MULTISITE_TWITTERBLOCK_FIELD_NAME])) {
    $fpfis_twitter_override = $form['#term'][MULTISITE_TWITTERBLOCK_FIELD_NAME];
  }

  // Do nothing in case there are no settings.
  if (empty($fpfis_twitter_override)) {
    return;
  }

  // Put fields in vertical tab if on a term edit form.
  if (!isset($form['additional_settings'])) {
    $form['additional_settings'] = array(
      '#type' => 'vertical_tabs',
      '#weight' => 99,
    );
  }

  $weight = 2;
  if (isset($form['#entity_type'])) {
    $weight = $form['#entity_type'] == MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_TERM ? 99 : 2;
  }

  $form[MULTISITE_TWITTERBLOCK_FIELD_NAME] = array(
    '#type' => 'fieldset',
    '#title' => t('Twitter settings'),
    '#access' => user_access('override fpfis twitter widget'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#tree' => TRUE,
    '#weight' => $weight,
    '#attributes' => array('class' => array('fpfis_twitter_override-form')),
  );

  $form[MULTISITE_TWITTERBLOCK_FIELD_NAME]['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override Twitter widget on this page'),
    '#default_value' => $fpfis_twitter_override['enabled'],
  );

  $form[MULTISITE_TWITTERBLOCK_FIELD_NAME]['config'] = _multisite_twitterblock_settings_form($fpfis_twitter_override['config'], 'override', '', 'fpfis_twitter_override[config]');
  $form[MULTISITE_TWITTERBLOCK_FIELD_NAME]['config'] += array(
    '#type' => 'container',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="fpfis_twitter_override[enabled]"]' => array('checked' => TRUE),
      ),
    ),
  );
}

/**
 * Checks value in the types array.
 *
 * @param string $value
 *   Type.
 *
 * @return bool
 *   Result of checking.
 */
function multisite_twitterblock_check_availability($value, $variable_name) {
  $options = array_values(variable_get($variable_name, array()));
  return in_array($value, $options, TRUE);
}

/**
 * Loads overriding config from db.
 *
 * @param int $entity_id
 *   Entity ID.
 * @param string $entity_type
 *   Entity type.
 *
 * @return bool
 *   Result of request.
 */
function multisite_twitterblock_load($entity_id, $entity_type = MULTISITE_TWITTERBLOCK_ENTITY_NODE) {
  if (is_numeric($entity_id)) {
    $query = db_select('multisite_twitterblock_twitter_overrides', 'tw');
    $query->fields('tw');
    $query->condition('tw.entity_id', $entity_id);
    $query->condition('tw.entity_type', $entity_type);
    if ($item = $query->execute()->fetchAssoc()) {
      return unserialize($item['data']);
    }
  }

  return FALSE;
}

/**
 * Implements hook_node_insert().
 *
 * @TODO make generic for all entities
 */
function multisite_twitterblock_node_insert($node) {
  multisite_twitterblock_entity_save($node, $node->nid, MULTISITE_TWITTERBLOCK_ENTITY_NODE);
}

/**
 * Implements hook_node_update().
 */
function multisite_twitterblock_node_update($node) {
  multisite_twitterblock_entity_save($node, $node->nid, MULTISITE_TWITTERBLOCK_ENTITY_NODE);
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function multisite_twitterblock_taxonomy_term_insert($term) {
  multisite_twitterblock_entity_save($term, $term->tid, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_TERM);
}

/**
 * Implements hook_taxonomy_term_update().
 */
function multisite_twitterblock_taxonomy_term_update($term) {
  multisite_twitterblock_entity_save($term, $term->tid, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_TERM);
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function multisite_twitterblock_entity_save($entity, $entity_id, $entity_type) {
  $field = MULTISITE_TWITTERBLOCK_FIELD_NAME;
  if (isset($entity->$field)) {
    $fpfis_twitter_override = &$entity->$field;
    if (empty($fpfis_twitter_override['enabled'])) {
      // Remove previously created.
      if (multisite_twitterblock_load($entity_id, $entity_type)) {
        multisite_twitterblock_delete($entity_id, $entity_type);
      }
    }
    else {
      // Create new.
      $fpfis_twitter_override['entity_id'] = $entity_id;
      multisite_twitterblock_save($fpfis_twitter_override, $entity_type);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function multisite_twitterblock_node_delete($node) {
  // Clear settings in case node has been deleted.
  multisite_twitterblock_delete($node->nid, MULTISITE_TWITTERBLOCK_ENTITY_NODE);
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function multisite_twitterblock_taxonomy_term_delete($term) {
  // Clear settings in case taxonomy term has been deleted.
  multisite_twitterblock_delete($term->tid, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_TERM);
}

/**
 * Stores serialized twitter settings.
 *
 * @param array $fpfis_twitter_override
 *   Array of overrides.
 * @param string $entity_type
 *   Entity type.
 */
function multisite_twitterblock_save(array $fpfis_twitter_override = array(), $entity_type = MULTISITE_TWITTERBLOCK_ENTITY_NODE) {
  db_merge('multisite_twitterblock_twitter_overrides')
    ->key(array('entity_id' => $fpfis_twitter_override['entity_id']))
    ->fields(array(
      'entity_type' => $entity_type,
      'data' => serialize($fpfis_twitter_override['config']),
    ))
    ->execute();
}

/**
 * Removes serialized twitter settings.
 *
 * @param int $entity_id
 *   Entity ID.
 * @param string $entity_type
 *   Entity type.
 */
function multisite_twitterblock_delete($entity_id, $entity_type = MULTISITE_TWITTERBLOCK_ENTITY_NODE) {
  db_delete('multisite_twitterblock_twitter_overrides')
    ->condition('entity_id', $entity_id, is_array($entity_id) ? 'IN' : '=')
    ->condition('entity_type', $entity_type, '=')
    ->execute();
}

/**
 * Defines form settings.
 *
 * @param array $default_values
 *   Array of default values.
 * @param string $mode
 *   Mode.
 * @param string $prefix
 *   Prefix.
 * @param string $container
 *   Containter.
 *
 * @return array
 *   Array form.
 */
function _multisite_twitterblock_settings_form(array $default_values = array(), $mode = 'full', $prefix = 'fpfis_twitter_', $container = '') {
  $fpfis_twitter_types = variable_get('fpfis_twitter_types');

  $form[$prefix . 'title'] = array(
    '#type' => 'textfield',
    '#title' => t('Widget title'),
    '#default_value' => $default_values['title'],
    '#description' => t('Widget title is displayed abouve the twitter widget. Use &lt;none&gt; to leave it empty.'),
  );

  $form[$prefix . 'type'] = array(
    '#type' => 'select',
    '#title' => t('Widget type'),
    '#options' => $fpfis_twitter_types,
    '#default_value' => $default_values['type'],
    '#description' => t('User feed,  List member feed, Search'),
  );
  $visibility_selector = $container == '' ? ($prefix . 'type') : ($container . '[' . $prefix . 'type]');

  $form['smk-twitter_user_timeline'] = array(
    '#type' => 'container',
    '#title' => t('User feed settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="' . $visibility_selector . '"]' => array('value' => 'smk-twitter_user_timeline'),
      ),
    ),
  );

  $form['smk-twitter_list_timeline'] = array(
    '#type' => 'container',
    '#title' => t('List member feed settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="' . $visibility_selector . '"]' => array('value' => 'smk-twitter_list_timeline'),
      ),
    ),
  );

  $form['smk-twitter_search'] = array(
    '#type' => 'container',
    '#title' => t('Search feed settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="' . $visibility_selector . '"]' => array('value' => 'smk-twitter_search'),
      ),
    ),
  );

  // User.
  $form['smk-twitter_user_timeline'][$prefix . 'screen_name'] = array(
    '#type' => 'textfield',
    '#title' => t('User screen name'),
    '#default_value' => $default_values['screen_name'],
    '#description' => t('User Twitter screen name'),
  );

  // List.
  $form['smk-twitter_list_timeline'][$prefix . 'owner_screen_name'] = array(
    '#type' => 'textfield',
    '#title' => t('List owner screen name'),
    '#default_value' => $default_values['owner_screen_name'],
    '#description' => t('Owner Twitter screen name'),
  );

  $form['smk-twitter_list_timeline'][$prefix . 'slug'] = array(
    '#type' => 'textfield',
    '#title' => t('Name of the list'),
    '#default_value' => $default_values['slug'],
    '#description' => t('Name of the list'),
  );

  $form['smk-twitter_search'][$prefix . 'incl_hashtags'] = array(
    '#type' => 'textfield',
    '#title' => t('Hashtags'),
    '#default_value' => $default_values['incl_hashtags'],
    '#description' => t('List of hashtags: search for tweets with the specified hashtags. You can divide them with comma, AND, OR'),
  );

  $form['smk-twitter_search'][$prefix . 'incl_profiles'] = array(
    '#type' => 'textfield',
    '#title' => t('Profiles'),
    '#default_value' => $default_values['incl_profiles'],
    '#description' => t('Comma seperated list of screen names: search for tweets containing all specified screen names'),
  );

  $form['smk-twitter_search']['detailed'] = array(
    '#type' => 'fieldset',
    '#title' => t('Detailed search settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['smk-twitter_search']['detailed'][$prefix . 'excl_hashtags'] = array(
    '#type' => 'textfield',
    '#title' => t('Exclude hashtags'),
    '#default_value' => $default_values['excl_hashtags'],
    '#description' => t('Comma seperated list of hashtags: exclude tweets containing at least one specified hashtag'),
  );

  $form['smk-twitter_search']['detailed'][$prefix . 'excl_profiles'] = array(
    '#type' => 'textfield',
    '#title' => t('Exclude profiles'),
    '#default_value' => $default_values['excl_profiles'],
    '#description' => t('Comma seperated list of screen names: exclude tweets containing at least one specified screen name'),
  );

  $form['smk-twitter_search']['detailed'][$prefix . 'from'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#default_value' => $default_values['from'],
    '#description' => t('Comma seperated list of screen names: display tweets from screen names'),
  );

  $form['smk-twitter_search']['detailed'][$prefix . 'restr_lang_to'] = array(
    '#type' => 'textfield',
    '#title' => t('Restrict language to'),
    '#default_value' => $default_values['restr_lang_to'],
    '#description' => t('Restricts tweets to the given language, given by an <a href="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" target="_blank">ISO 639-1</a> code.'),
  );

  $form['smk-twitter_search']['detailed'][$prefix . 'result_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Result type'),
    '#default_value' => $default_values['result_type'],
    '#description' => t('<ul><li>mixed: include both popular and real time results in the response</li><li>recent: return only the most recent results in the response</li><li>popular: return only the most popular results in the response</li></ul>'),
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced widget settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['advanced']['notice'] = array(
    '#markup' => t('<p>For detailed information on the following settings please refer to the <a target="_blank" href="http://webtools.ec.europa.eu/social-media-kit/documentation/">Social Media Kit documentation</a>.</p>'),
  );

  $form['advanced'][$prefix . 'count'] = array(
    '#type' => 'textfield',
    '#title' => t('The number of tweets displayed'),
    '#default_value' => $default_values['count'],
    '#description' => t('Recommended number of tweets 1-10'),
  );

  $form['advanced'][$prefix . 'include_rts'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display retweets'),
    '#default_value' => $default_values['include_rts'],
    '#return_value' => TRUE,
    '#description' => t('Display retweets'),
  );

  $form['advanced'][$prefix . 'exclude_replies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude replies'),
    '#default_value' => $default_values['exclude_replies'],
    '#return_value' => TRUE,
    '#description' => t('Exclude replies'),
  );

  $form['advanced'][$prefix . 'rts_display_original'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the original profile of a retweet'),
    '#default_value' => $default_values['rts_display_original'],
    '#return_value' => TRUE,
    '#description' => t('Display the original profile of a retweet'),
  );

  $form['advanced'][$prefix . 'display_user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the user name'),
    '#default_value' => $default_values['display_user'],
    '#return_value' => TRUE,
    '#description' => t('Display the user name'),
  );

  $form['advanced'][$prefix . 'display_user_pic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the user profile picture'),
    '#default_value' => $default_values['display_user_pic'],
    '#return_value' => TRUE,
    '#description' => t('Display the user profile picture'),
  );

  $form['advanced'][$prefix . 'auto_expand_photo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically expand an image in the tweet'),
    '#default_value' => $default_values['auto_expand_photo'],
    '#return_value' => TRUE,
    '#description' => t('Expand images inside the post'),
  );

  if ($mode == 'override') {
    unset($form['advanced']);
  }

  return $form;
}

/**
 * Implements hook_context_plugins().
 */
function multisite_twitterblock_context_plugins() {
  $plugins = array();
  $plugins['multisite_twitterblock_context_reaction'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'multisite_twitterblock') . '/plugins',
      'file' => 'multisite_twitterblock_reaction.inc',
      'class' => 'MultisiteTwitterblockReaction',
      'parent' => 'context_reaction',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function multisite_twitterblock_context_registry() {
  return array(
    'reactions' => array(
      'multisite_twitterblock' => array(
        'title' => t('Twitter Block Overrides'),
        'plugin' => 'multisite_twitterblock_context_reaction',
      ),
    ),
  );
}

/**
 * Implements hook_context_page_reaction().
 */
function multisite_twitterblock_context_page_reaction() {
  if ($plugin = context_get_plugin('reaction', 'multisite_twitterblock_context_reaction')) {
    $plugin->execute();
  }
}

/**
 * Detecs twitterblock context.
 *
 * @return array
 *   array of reactions
 */
function multisite_twitterblock_detect_multisite_twitterblock_reaction() {
  $active_contexts = context_active_contexts();
  $reaction = array();

  foreach ($active_contexts as $active_context) {
    if (is_array($active_context->reactions) && count($active_context->reactions) > 0) {
      foreach ($active_context->reactions as $reaction_type => $current_reaction) {
        if ($reaction_type == 'multisite_twitterblock') {
          $reaction = $current_reaction;
        }
      }
    }
  }

  return $reaction;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function multisite_twitterblock_form_node_type_form_alter(&$form, $form_state) {

  // Check availability of content type in the settings.
  if (!multisite_twitterblock_check_availability($form['type']['#default_value'], MULTISITE_TWITTERBLOCK_CONTENT_TYPE_LIST)) {
    return;
  }

  // Set custom submit handler to deal with the settings properly.
  $form['#submit'][] = 'multisite_twitterblock_form_node_type_submit';

  // Load default settings for new taxonomy terms.
  $settings = _multisite_twitterblock_load_settings($form['#entity'], $form['type']['#default_value'], MULTISITE_TWITTERBLOCK_ENTITY_CONTENT_TYPE);

  // Set subform with default or ovverridden settings.
  _multisite_twitterblock_entity_subform($form, $settings);
}

/**
 * Implements hook_node_type_delete().
 */
function multisite_twitterblock_node_type_delete($type) {
  // Delete variable from db.
  variable_del(multisite_twitterblock_get_var_name($type->type, MULTISITE_TWITTERBLOCK_ENTITY_CONTENT_TYPE));
}

/**
 * Generates variable name based on entity type and machine name.
 *
 * @param string $machine_name
 *   Machine name of the entity item.
 * @param string $entity_type
 *   Virtual entity type (content_type, taxonomy_vocabulary).
 *
 * @return string
 *   Generated name.
 */
function multisite_twitterblock_get_var_name($machine_name, $entity_type) {
  return MULTISITE_TWITTERBLOCK_FIELD_NAME . '_' . $entity_type . '_' . $machine_name;
}

/**
 * Submit handler for Node type form.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 */
function multisite_twitterblock_form_node_type_submit(array &$form, array $form_state) {
  if (isset($form_state['values'][MULTISITE_TWITTERBLOCK_FIELD_NAME])) {
    // We save settings if twitter settings are enabled.
    if (!empty($form_state['values'][MULTISITE_TWITTERBLOCK_FIELD_NAME]['enabled'])) {
      variable_set(multisite_twitterblock_get_var_name($form['type']['#default_value'], MULTISITE_TWITTERBLOCK_ENTITY_CONTENT_TYPE), $form_state['values'][MULTISITE_TWITTERBLOCK_FIELD_NAME]);
    }
    else {
      variable_del(multisite_twitterblock_get_var_name($form['type']['#default_value'], MULTISITE_TWITTERBLOCK_ENTITY_CONTENT_TYPE));
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function multisite_twitterblock_form_taxonomy_form_vocabulary_alter(&$form, $form_state) {
  // Check availability of content type in the settings.
  if (!multisite_twitterblock_check_availability($form['#vocabulary']->machine_name, MULTISITE_TWITTERBLOCK_VOCABULARY_LIST)) {
    return;
  }

  $form['#submit'][] = 'multisite_twitterblock_form_taxonomy_vocabulary_submit';

  // Load default settings for new taxonomy terms.
  $settings = _multisite_twitterblock_load_settings($form['#entity'], $form['#vocabulary']->machine_name, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_VOCABULARY);
  _multisite_twitterblock_entity_subform($form, $settings);
}

/**
 * Submit handler for taxonomy vocabulary form.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 */
function multisite_twitterblock_form_taxonomy_vocabulary_submit(array &$form, array $form_state) {
  if (isset($form_state['values'][MULTISITE_TWITTERBLOCK_FIELD_NAME])) {
    // We save settings if twitter settings are enabled.
    if (!empty($form_state['values'][MULTISITE_TWITTERBLOCK_FIELD_NAME]['enabled'])) {
      variable_set(multisite_twitterblock_get_var_name($form['#vocabulary']->machine_name, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_VOCABULARY), $form_state['values'][MULTISITE_TWITTERBLOCK_FIELD_NAME]);
    }
    else {
      variable_del(multisite_twitterblock_get_var_name($form['#vocabulary']->machine_name, MULTISITE_TWITTERBLOCK_ENTITY_TAXONOMY_VOCABULARY));
    }
  }
}
