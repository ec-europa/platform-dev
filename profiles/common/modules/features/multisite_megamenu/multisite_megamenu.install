<?php

/**
 * @file
 * Install the feature Mega Menu.
 */

/**
 * Implements hook_enable().
 */
function multisite_megamenu_enable() {
  // Create new megamenu bar and import into it
  // the (flattened) items in the the Drupal main menu.
  $menu_id = _multisite_megamenu_import_menu();
  if ($menu_id) {
    $context_name = 'site_wide';
    $region = 'featured';

    // Remove default menu block in region from context.
    $context = module_invoke('context', 'load', $context_name);
    if (is_array($context->reactions['block']['blocks']) && count($context->reactions['block']['blocks'])) {
      foreach ($context->reactions['block']['blocks'] as $block => $block_data) {
        if ('system-main-menu' == $block && $region == $block_data['region']) {
          _remove_block_context($context_name, 'system-main-menu');
          drupal_set_message(t('The default main menu has been removed from the "@context" context.', array('@context' => $context_name)));
          break;
        }
      }
    }

    // Add megamenu block in region to context.
    _add_block_context($context_name, 'om_maximenu-om-maximenu-1', 'om_maximenu', 'om-maximenu-' . $menu_id, $region);
    drupal_set_message(t('A Mega Menu bar has been created and inserted in the "@region" region of the "@context" context.', array('@region' => $region, '@context' => $context_name)));
  }

  // Alter default configuration.
  $om_maximenu = variable_get('om_maximenu');
  $om_maximenu[1]['block_options']['stacking'] = 'row';
  variable_set('om_maximenu', $om_maximenu);

  // Activation message.
  drupal_set_message(t('Mega Menu feature is now active on your site.'));
}

/**
 * Implements hook_disable().
 */
function multisite_megamenu_disable() {
  $context_name = 'site_wide';
  $region = 'featured';

  // Remove any megamenu in region from context.
  $context = module_invoke('context', 'load', $context_name);
  if (is_array($context->reactions['block']['blocks']) && count($context->reactions['block']['blocks'])) {
    foreach ($context->reactions['block']['blocks'] as $block => $block_data) {
      if ('om_maximenu' == $block_data['module'] && $region == $block_data['region']) {
        _remove_block_context($context_name, $block);
      }
    }
    drupal_set_message(t('All Mega Menu bars in the "@region" region have been removed from the "@context" context.', array('@region' => $region, '@context' => $context_name)));
  }

  // Add default menu block in region to context.
  _add_block_context($context_name, 'system-main-menu', 'system', 'main-menu', $region);
  drupal_set_message(t('The default main menu has been inserted in the "@region" region of the "@context" context.', array('@region' => $region, '@context' => $context_name)));
  variable_del('om_maximenu');
  // Activation message.
  drupal_set_message(t('Mega Menu feature is now disabled on your site.'));
}

/**
 * Menu informations.
 *
 * Build the info array structure needed to create a megamenu instance
 * with the items in a normal menu (by default the main menu).
 *
 * @param string $mlid
 *   The normal menu id.
 *
 * @return mixed
 *   The menu info structure array or FALSE.
 */
function _multisite_megamenu_get_menu_info($mlid = 'main-menu') {
  if (!is_string($mlid)) {
    return FALSE;
  }
  $item_list = array($mlid);
  $result = db_query("SELECT mlid, plid, link_path, link_title, options, weight FROM {menu_links} WHERE hidden = 0 AND menu_name = :menu_name AND TRIM(link_title) > '' ORDER BY p1, p2, p3, p4, p5, p6, p7, p8, p9, plid, mlid, link_title ASC", array(':menu_name' => $mlid));
  while ($record = $result->fetchObject()) {
    $item_list[] = $record->mlid;
  }
  $items_str = ',' . implode(',', $item_list);
  $menu_info = array(
    $mlid => array(
      'mlid' => $mlid,
      'menu_list' => $items_str,
    ),
  );
  return $menu_info;
}

/**
 * Menu id.
 *
 * Get the id of a megamenu that has been created
 * by importing a normal menu (by default the main menu).
 *
 * @param string $mlid
 *   The normal menu id.
 *
 * @return mixed
 *   The megamenu id or FALSE.
 */
function _multisite_megamenu_get_imported_menu($mlid = 'main-menu') {
  // Load om_maximenu settings and look for the id of our new menu.
  $_om_maximenu_variable = variable_get('om_maximenu');
  $menu_id = FALSE;
  if (is_array($_om_maximenu_variable) && count($_om_maximenu_variable)) {
    $code = $mlid . '-imported';
    foreach ($_om_maximenu_variable as $m_id => $menu_data) {
      if ($code == $menu_data['code']) {
        $menu_id = $m_id;
        // Ensure skin option is set to no_style.
        $_om_maximenu_variable[$m_id]['skin'] = 'no_style';
        variable_set('om_maximenu', $_om_maximenu_variable);
        break;
      }
    }
  }
  return $menu_id;
}

/**
 * Megamenu instance.
 *
 * Create a megamenu instance and populate with the (flattened) menu items
 * in a normal menu (by default the main menu).
 *
 * @param string $mlid
 *   The normal menu id.
 *
 * @return mixed
 *   The megamenu menu.
 */
function _multisite_megamenu_import_menu($mlid = 'main-menu') {
  // Obtain main menu info and prepare data for import.
  $form = $form_state = array();
  $form_state['values']['om_import']['menus'] = _multisite_megamenu_get_menu_info($mlid);

  // Initialization of global variable with om_maximenu settings needed.
  global $_om_maximenu_variable;
  $_om_maximenu_variable = variable_get('om_maximenu');

  // Import main menu (but note: the global variable is not updated).
  require_once drupal_get_path('module', 'om_maximenu') . '/inc/om_maximenu.import.inc';
  om_maximenu_import_submit($form, $form_state);

  // Load om_maximenu settings and look for the id of our new menu.
  return _multisite_megamenu_get_imported_menu($mlid);
}
