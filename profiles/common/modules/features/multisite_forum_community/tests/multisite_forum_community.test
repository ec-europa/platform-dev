<?php

/**
 * @file
 * Test file.
 */

/**
 * Test Multisite Forum features to ensure it follows QA requirements.
 */
class MultisiteForumCommunityQAWebTestCase extends MultisiteDrupalWebTestCase {
  protected $profile = 'multisite_drupal_communities';
  protected $user1;
  protected $user2;
  protected $nodeCommunity;

  /**
   * Getter method.
   */
  public static function getInfo() {
    return array(
      'name' => 'Multisite Forum Community QA tests',
      'description' => 'Test Multisite Forum Community feature to ensure it follows QA requirements.',
      'group' => 'Multisite - Communities',
    );
  }

  /**
   * Parent method.
   */
  public function setUp() {
    parent::setUp('multisite_forum_core', 'multisite_forum_community');
  }

  /**
   * Test initialization.
   */
  public function testFeatureInitialization() {
    $field_instance = field_info_instance('node', 'og_group_ref', MULTISITE_FORUM_CORE_CT_NAME);
    $status = isset($field_instance) && is_array($field_instance) && !empty($field_instance);
    $this->assert($status, 'Field og_group_ref correctly added Discussion content type');

    $field_instance = field_info_instance('node', 'group_content_access', MULTISITE_FORUM_CORE_CT_NAME);
    $status = isset($field_instance) && is_array($field_instance) && !empty($field_instance);
    $this->assert($status, 'Field group_content_access correctly added Discussion content type');

    $field_instance = field_info_instance('taxonomy_term', 'og_group_ref', MULTISITE_FORUM_CORE_TAXO_NAME);
    $status = isset($field_instance) && is_array($field_instance) && !empty($field_instance);
    $this->assert($status, 'Field og_group_ref correctly added Discussion content type');

    $value = variable_get('og_context_negotiation_group_context', array());
    $this->assert(isset($value['multisite_forum_community']), 'multisite_forum_community negotiation found');
  }

  /**
   * Test testDiscussionOGCreation.
   */
  public function testDiscussionOgCreation() {
    $this->user1 = $this->drupalCreateUser();
    $this->user2 = $this->drupalCreateUser();

    $this->drupalLogin($this->user1);

    // Create content of community type.
    $settings = array(
      'type' => 'community',
      'title' => 'Sample Community',
      'body' => array(LANGUAGE_NONE => array(array('Community body'))),
      'moderate' => 1,
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
      'uid' => $this->user1->uid,
      OG_GROUP_FIELD => array(LANGUAGE_NONE => array(0 => array('value' => 1))),
      OG_ACCESS_FIELD => array(LANGUAGE_NONE => array(0 => array('value' => 1))),
    );
    $this->nodeCommunity = $this->drupalCreateNode($settings);
    $this->drupalGet('community/sample-community');
    $this->assertRaw('Sample Community', t('Community created.'));
    $this->assertTrue($this->nodeCommunity, t('Node ID @nid is a group.', array('@nid' => $this->nodeCommunity->nid)));

    // Test with group manager.
    $nid = $this->nodeCommunity->nid;
    $options = array('query' => array('og_group_ref' => $nid));

    // Check if group manager has link to forum management page.
    $this->drupalGet("node/{$nid}/group");
    $this->assertLink('Forums', 0, 'Group manager has a link to forum management page');

    // Manager can access forum management page.
    $this->drupalGet("group/node/{$nid}/admin/forum");
    $this->assertResponse('200', t('Group manager has accss to forum management page'));

    // Manager can access forum term creation page.
    $this->drupalGet("group/node/{$nid}/admin/forum/add/forum");
    $this->assertResponse('200', t('Group manager has access to forum term creation page.'));

    $name = $this->randomName();
    $this->drupalPost("group/node/{$nid}/admin/forum/add/forum", array('name' => $name), t('Save'));

    $term = array_shift(taxonomy_get_term_by_name($name));

    // Manager can access forum term editing page.
    $this->drupalGet("group/node/{$nid}/admin/forum/edit/forum/{$term->tid}");
    $this->assertResponse('200', t('Group manager has access to forum term editing page.'));

    $name = $this->randomName();
    $this->drupalPost("group/node/{$nid}/admin/forum/edit/forum/{$term->tid}", array('name' => $name), t('Save'));
    $this->drupalGet("group/node/{$nid}/admin/forum");
    $this->assertLink($name, 0, 'Group manager can edit term');

    // Manager can post a forum topic.
    $field = array();
    $field[LANGUAGE_NONE][0]['target_id'] = $nid;

    $settings = array(
      'title' => $this->randomName(),
      'type' => MULTISITE_FORUM_CORE_CT_NAME,
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
      'og_group_ref' => $field,
      'taxonomy_forums' => array('undefine' => array('tid' => $term->tid)),
    );
    $node = $this->drupalCreateNode($settings);

    // Manager can edit is own forum topics.
    $this->drupalGet("node/{$node->nid}");
    $this->assertLink('Edit', 0, 'Group manager can edit is own forum topics.');

    // Test now with normal member.
    $this->drupalLogin($this->user2);
    $nid = $this->nodeCommunity->nid;

    // Assert the user is not a group member.
    $this->assertFalse(og_is_member('node', $nid, 'user', $this->user2), t('User is a not group member.'));

    $og_membership = og_membership_create('node', $nid, 'user', $this->user2->uid, 'og_user_node');
    og_membership_save($og_membership);

    // Assert the user is a group member.
    $this->assertTrue(og_is_member('node', $nid, 'user', $this->user2), t('User is a group member.'));

    // Assert the user can view the group.
    $this->drupalGet('node/' . $nid);
    $this->assertResponse('200', t('Group member can view group node.'));

    // Check if group member can access forum topic creation page.
    $this->drupalGet('node/add/forum', $options);
    $this->assertResponse('200', t('Group member can access forum topic creation page.'));
  }

}
