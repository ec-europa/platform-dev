<?php

/**
 * @file
 * Tests for events_resources.module.
 *
 * ECWeb MULTISITE Feature Test.
 */

/**
 * Defines a base class for testing the "events_resources" module.
 */
class EventsResourcesFeatureTest extends DrupalWebTestCase {

  protected $privilegedUser;
  protected $userPermissions;
  protected $resourcesList;
  protected $resourcesName;
  protected $resourcesVid;
  protected $entityType;
  protected $bundle;
  protected $fieldName;
  protected $resources;
  protected $events;

  /**
   * Get Info.
   */
  public static function getInfo() {
    return array(
      'name' => 'events_resources feature test',
      'description' => 'Test the Events Resources feature to ensure it works as intended.',
      'group' => 'Multisite Feature Test',
    );
  }

  /**
   * Configure environment.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array(
      'apachesolr', 'events_core', 'events_standard', 'events_resources',
    ));

    $this->resourcesName = 'resources';
    $this->entityType = 'node';
    $this->bundle = 'event';
    $this->fieldName = 'field_resource';
    $this->userPermissions = array(
      'access content',
      'create event content',
      'bypass workbench moderation',
    );
    $this->resourcesList = array(
      'Resource one', 'Resource two', 'Resource three',
    );
  }

  /**
   * Test taxonomy vocabulary and movable field.
   */
  public function testEventsResourcesTestCase() {
    $this->customTestEventsResourcesListAndFieldExistTestCase();
    $this->customTestEventsResourcesPublishEventsTestCase();
  }

  /**
   * Test taxonomy vocabulary and movable field.
   */
  protected function customTestEventsResourcesListAndFieldExistTestCase() {

    // Check if resources list is available.
    $this->getResourceSource();
    $this->assertTrue($this->resourcesVid, 'The Resources source exists.');

    // Check if resources list is empty.
    $this->getResources();
    $this->assertTrue(is_array($this->resources) && 0 == count($this->resources), 'The Resources source is empty.');

    // Check if field is available.
    $field_info = field_info_field($this->fieldName);
    $this->assertTrue(is_array($field_info) && isset($field_info['field_name']) && $this->fieldName == $field_info['field_name'], 'The Resource field exists');

  }

  /**
   * Test publishing events with and without resources.
   */
  protected function customTestEventsResourcesPublishEventsTestCase() {

    // Set-up the resources source.
    $this->getResourceSource();
    $this->getResources();

    // Check page before resources added.
    $this->checkPage(FALSE, FALSE);

    // Add some resources.
    foreach ($this->resourcesList as $resource_name) {
      $resource = $this->addResource($resource_name);
      $this->assertNotNull($resource, 'Added resource ' . $resource_name);
    }

    // Check the current resource items from source.
    $this->getResources();
    $this->assertTrue(is_array($this->resources) && count($this->resourcesList) == count($this->resources), 'The Resources source has been populated.');

    // Check page after resources added.
    $this->checkPage(TRUE, FALSE);

    // Add resource field to content-type.
    $field_instance = array(
      'field_name' => $this->fieldName,
      'entity_type' => $this->entityType,
      'bundle' => $this->bundle,
    );
    field_create_instance($field_instance);

    // Check for the field in the content-type.
    $fields = field_info_instances($this->entityType, $this->bundle);
    $this->assertTrue(isset($fields[$this->fieldName]) && is_array($fields[$this->fieldName]), 'The Resource field has been added to the Event content-type.');

    // Prepare user to add events.
    $this->privilegedUser = $this->drupalCreateUser($this->userPermissions);
    $this->drupalLogin($this->privilegedUser);

    $langcode = LANGUAGE_NONE;

    // Check for the field in add event page (node/add/event).
    $this->drupalGet('node/add/event');
    $this->assertFieldByName($this->fieldName . '[' . $langcode . ']', NULL, 'The Resource field has been found in the Add Event Page.');

    // Post some events.
    $day = date('m/d/Y', time() + 86400);
    $moderation_state = workbench_moderation_state_published();
    $this->events = array();
    foreach ($this->resources as $i => $r) {
      // Add event with assigned resource.
      $this->events[] = $this->addEvent($langcode, $day, $i % 2 ? '10:00' : '11:00', $r->tid, $moderation_state);
    }
    // Add event without assigned resource.
    $this->events[] = $this->addEvent($langcode, $day, '12:00', '_none', $moderation_state);

    // Check page after events added.
    $this->checkPage(TRUE, TRUE);

  }

  /**
   * Check the calendar page for various properties.
   */
  protected function checkPage($assert_resources, $assert_events) {

    // Get the Drupal.settings JavaScript variable.
    $this->drupalGet('calendar');
    $ds = $this->drupalGetSettings();
    $this->assertNotNull($ds, 'The Drupal.settings JavaScript variable is defined.');

    // Get the fullcalendar component.
    $condition = is_array($ds) && isset($ds['fullcalendar']) && is_array($ds['fullcalendar']) && 1 == count($ds['fullcalendar']);
    $this->assertTrue($condition, 'The Drupal.settings JavaScript variable contains a component for fullcalendar.');

    // Check the calendar mode buttons in the header.
    $calendar_ds = reset($ds['fullcalendar']);
    $condition = isset($calendar_ds['fullcalendar']) && isset($calendar_ds['fullcalendar']['header']) && isset($calendar_ds['fullcalendar']['header']['right']);
    $this->assertTrue($condition, 'The fullcalendar component contains a header-right component.');
    $calendar_modes = explode(' ', $calendar_ds['fullcalendar']['header']['right']);
    $this->assertTrue(in_array('agendaWeek', $calendar_modes), 'The header-right component contains the agendaWeek button.');
    if ($assert_resources) {
      // The resourceDay mode button and resources component should be present.
      $this->assertTrue(in_array('resourceDay', $calendar_modes), 'The header-right component contains the resourceDay button.');
      $condition = isset($ds['events_resources']) && isset($ds['events_resources']['resources']) && count($this->resourcesList) == count($ds['events_resources']['resources']);
      $this->assertTrue($condition, 'The Drupal.settings JavaScript variable contains a component for the list of resources.');
    }
    else {
      // The resourceDay mode button and resources component
      // should not be present.
      $this->assertFalse(in_array('resourceDay', $calendar_modes), 'The header-right component does not contain the resourceDay button.');
      $this->assertFalse(isset($ds['events_resources']), 'The Drupal.settings JavaScript variable does not contain a component for the list of resources.');
    }
    if ($assert_events) {
      // Check that the events are inserted in the page with
      // the correct properties.
      foreach ($this->events as $ord => $e) {
        $iord = $ord + 1;
        $this->assertPattern($this->buildEventPattern($iord, $e), 'Event ' . $iord . ' found in page with correct resource.');
      }
    }
  }

  /**
   * Get the Resources source.
   */
  protected function getResourceSource() {
    $this->resourcesVid = NULL;
    $resources_obj = taxonomy_vocabulary_machine_name_load($this->resourcesName);
    if (FALSE !== $resources_obj && $resources_obj->vid) {
      $this->resourcesVid = $resources_obj->vid;
    }
  }

  /**
   * Get the resources in the Resources source.
   */
  protected function getResources() {
    $this->resources = taxonomy_get_tree($this->resourcesVid);
  }

  /**
   * Add a resource to the Resources source.
   */
  protected function addResource($name) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $this->resourcesVid;
    taxonomy_term_save($term);
    return $term;
  }

  /**
   * Submit a new event.
   */
  protected function addEvent($langcode, $date, $hour, $resource_id, $moderation_state) {
    $edit = array(
      'title' => $this->randomName(),
      'field_event_date[' . $langcode . '][0][value][date]' => $date,
      'field_event_date[' . $langcode . '][0][value][time]' => $hour,
      $this->fieldName . '[' . $langcode . ']' => $resource_id,
      'workbench_moderation_state_new' => $moderation_state,
    );
    $this->drupalPost('node/add/event', $edit, t('Save'));
    return array(
      'title' => $edit['title'],
      'date' => $this->reformatDate($date),
      'hour' => $hour,
      'resource_id' => is_numeric($resource_id) ? $resource_id : '',
    );
  }

  /**
   * Build a pattern that matches an event in the page.
   */
  protected function buildEventPattern($ord, $event) {
    list($title, $day, $hour, $resource_id) = array_values($event);
    $patt = '<a href="[^"]*" allDay="[^"]*" start="' . $day . ' ' . $hour . ':00" end="[^"]*" editable="[^"]*" field="[^"]*" ' .
            'index="[^"]*" eid="' . $ord . '" entity_type="node" cn="[^"]*" ' .
            'title="' . $title . '" class="[^"]*" resourceId="' . $resource_id . '">';
    return $patt;
  }

  /**
   * Convert date from form format.
   */
  protected function reformatDate($date) {
    list($m, $d, $y) = preg_split('/[^0-9]+/', $date);
    return "$y-$m-$d";
  }

}
