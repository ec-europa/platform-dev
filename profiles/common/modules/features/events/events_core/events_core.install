<?php

/**
 * @file
 * Install the feature events.
 */

/**
 * Add block to the context.
 */
function events_core_enable() {
  // SolR configuration add bundle.
  multisite_drupal_toolbox_config_solr_bundle('event', 'add');

  // Add type to linkchecker scan.
  multisite_drupal_toolbox_content_type_linkchecker('event', 'add');

  // Flush the cache in order to display fullcalendar.
  drupal_flush_all_caches();

  // Activation message.
  drupal_set_message(t('Events feature is now active on your site.'));
}

/**
 * Remove block from the context.
 */
function events_core_disable() {
  // SolR configuration reomve bundle.
  multisite_drupal_toolbox_config_solr_bundle('event', 'delete');

  // Remove type to linkchecker scan.
  multisite_drupal_toolbox_content_type_linkchecker('event', 'delete');

  drupal_set_message(t('Events feature is now disabled on your site.'));
}

/**
 * Content types using date fields should be using timestamp instead datetime.
 *
 * No need to update schema in hook_install().
 * On a clean installation the date fields are already set up.
 * DATE FIELD MIGRATION SCRIPT: datetime to datestamp.
 */
function events_core_update_7202() {
  // CONFIG.
  // $content type : content type that contains fiels to replace
  // $module_name : module that contains fields.
  $content_type = 'event';
  $module_name = drupal_basename(__FILE__, '.install');
  //
  // Get db fields instances of content type.
  $fields_instances = field_info_instances('node', $content_type);

  // Get feature fields config&instance.
  module_load_include('inc', $module_name, $module_name . '.features.field');
  if (function_exists($module_name . '_field_default_fields')) {
    $fields_features_info = call_user_func($module_name . '_field_default_fields');
  }

  // MIGRATION.
  foreach ($fields_instances as $field_name => $field_instance) {
    // Get db field config.
    $field_info = field_info_field($field_name);

    // Get feature field config.
    $field_features_info = NULL;

    if (isset($fields_features_info['node-' . $content_type . '-' . $field_name])) {
      $field_features_info = $fields_features_info['node-' . $content_type . '-' . $field_name]['field_config'];
    }

    // Update our fields defines to 'datestamp' in feature.field.
    if ($field_info['type'] == 'datetime' && $field_info['locked'] && $field_features_info && $field_features_info['type'] == 'datestamp') {
      foreach ($field_info['storage']['details']['sql'] as $info_sql) {
        $table_name = array_shift(array_keys($info_sql));

        foreach ($info_sql[$table_name] as $column_name) {

          if (field_has_data($field_info)) {
            // There is data: migrate data and update column to int.
            $message = t('Update the  column %column of table %table : migrate datas and update to datestamp.', array('%column' => $column_name, '%table' => $table_name));
            watchdog('system', $message, NULL, WATCHDOG_WARNING);

            // Create a temporary date field.
            $param = array('type' => 'int', 'not null' => FALSE, 'default' => 0);
            db_add_field($table_name, $column_name . '_temp', $param);

            db_update($table_name)
              ->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")
              ->execute();

            // Delete old column.
            db_drop_field($table_name, $column_name);
            db_change_field($table_name, $column_name . '_temp', $column_name, array('type' => 'int'));

          }
          else {
            // If there is no data: just update column to int.
            $message = t('Update the  column %column of table %table : update to datestamp.', array('%column' => $column_name, '%table' => $table_name));
            watchdog('system', $message, NULL, WATCHDOG_WARNING);
            db_change_field($table_name, $column_name, $column_name, array('type' => 'int'));
          }
        }
      }

      $message = t('Saving field config of %field', array('%field' => $field_name));
      watchdog('system', $message, NULL, WATCHDOG_INFO);
      db_update('field_config')->fields(array('type' => 'datestamp'))->condition('id', $field_info['id'])->execute();

      // ERROR LOGS.
    }
    elseif ($field_info['type'] == 'datestamp') {
      $message = t('Field %field has been already converted to UNIX timestamp""', array('%field' => $field_name));
      watchdog('system', $message, NULL, WATCHDOG_WARNING);

    }
    elseif ($field_info['type'] == 'datetime') {
      if (!$field_features_info) {
        $message = t('Field %field not found in %feature', array('%field' => $field_name, '%feature' => $module_name . '.features.field.inc'));
        watchdog('system', $message, NULL, WATCHDOG_WARNING);

      }
      elseif ($field_features_info['type'] != 'datestamp') {
        $message = t('Field %field is not a datestamp in %feature', array('%field' => $field_name, '%feature' => $module_name . '.features.field.inc'));
        watchdog('system', $message, NULL, WATCHDOG_WARNING);
      }
    }
  }
  field_cache_clear();
}
