<?php

/**
 * @file
 * Tests for communities.module.
 */

/**
 * Defines a base class for testing the "communities" module.
 */
class NewsOgWebTestCase extends DrupalWebTestCase {

  protected $privilegedUser;
  protected $communityUser;
  protected $profile = 'multisite_drupal_communities';

  /**
   * Return infos concerning module.
   */
  public static function getInfo() {
    return array(
      'name' => 'news_og',
      'description' => 'Test the news_og feature.',
      'group' => 'Multisite - Communities',
    );
  }

  /**
   * Initialise user.
   */
  public function setUp() {
    $this->privilegedUser = new stdClass();
    // Enable modules.
    parent::setUp();

    // Login a user that has access to the content sync server admin settings.
    $this->privilegedUser = $this->drupalCreateUserWithRole("administrator");
    $this->communityUser = $this->drupalCreateUserWithRole("contributor");
    $this->drupalLogin($this->privilegedUser);
  }

  /**
   * Tests news in communities.
   */
  public function testCommunitiesnews() {

    // Check the communities directory URL.
    $this->drupalGet('communities_directory');
    // OK code 200.
    $this->assertResponse(200);
    // Check the presence of HTML class: view-communities-directory.
    $this->assertRaw('view-communities-directory', 'Communities enabled and accessible.');

    // COMUNITY CREATION
    // Create content of community type.
    $settings = array(
      'type' => 'community',
      'title' => 'Sample Community',
      'body' => array(LANGUAGE_NONE => array(array('Community body'))),
      'moderate' => 1,
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($settings);
    $this->drupalGet('community/sample-community');
    $this->assertRaw('Sample Community', t('Community created.'));
    $this->assertTrue($node, t('Node ID @nid is a group.', array('@nid' => $node->nid)));

    // LINK CREATION in the created community.
    module_enable(array("news_og"));
    $this->drupalGet('community/sample-community');
    $this->assertResponse(200);
    $this->assertTrue(module_exists('news_og'), t('news_og feature enabled.'));
    $this->drupalGet('node/add/news');
    $this->assertResponse(200);
    $this->assertRaw('node-news-form', 'Add news form accessible.');
    $this->drupalLogout();
    $this->drupalLogin($this->communityUser);

    // Request membership.
    $this->drupalGet('communities_directory');
    $this->clickLink(t('Request group membership'));

    // Could be 'I want to be registered'.
    $request = $this->randomString();
    $form_array = array(
      'og_membership_request[und][0][value]' => $request,
    );
    $this->drupalPost(NULL, $form_array, t('Join'));
    $this->assertRaw('Your membership to this group is pending', 'Membership in pending state.');
    $this->drupalLogout();

    // Grant Access.
    $this->drupalLogin($this->privilegedUser);
    $this->assertTrue($node, t('Node ID @nid is a group.', array('@nid' => $node->nid)));

    $this->assertTrue(module_exists('og'), t('og feature enabled.'));
    if (module_exists('og')) {
      og_role_grant_permissions($this->communityUser->name, array('edit group' => 0, 'administer group' => 1));
    }

    $this->drupalLogout();

    $this->drupalLogin($this->communityUser);
    $this->verbose('ROLEs --------------------> : ' . print_r(user_roles(), TRUE));

    $this->drupalGet('node/add/news');
    $this->assertResponse(200);
    $this->assertRaw('node-news-form', 'Add news form accessible.');
    $field = array();
    $field[LANGUAGE_NONE][0]['target_id'] = $node->nid;

    $settings = array(
      'type' => 'news',
      'title' => 'news Title',
      'body' => array(LANGUAGE_NONE => array(array('Link body'))),
      'og_group_ref' => $field,
    );
    $node = $this->drupalCreateNode($settings);
    $this->verbose('news Node created: ' . print_r($node, TRUE));

    // Access Link Page was displayed.
    $this->drupalGet('community/sample-community/news/news-title');
    $this->assertResponse(200);
    // Check the presence of h1.
    $elements = $this->xpath("//h1");
    $this->assertTrue(isset($elements[0]), t('The news page contains a h1 title'));
    $this->assertRaw('news Title', t('Title found.'));
    $this->assertRaw('block-print-print-links', t('group user can share links, see pdf version.'));
  }

  /**
   * Creates a user with the give role.
   */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }

}
