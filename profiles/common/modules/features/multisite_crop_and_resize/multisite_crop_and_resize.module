<?php

/**
 * @file
 * Multisite Crop and Resize definition module.
 */

/**
 * Implements hook_menu().
 */
function multisite_crop_and_resize_menu() {
  $items = array();

  $private_directory_path = 'system/files';
  $items[$private_directory_path . '/media_crop/%media_crop_instance'] = array(
    'title' => 'Generate media crop',
    'page callback' => '_multisite_crop_and_resize_get_image',
    'page arguments' => array(count(explode('/', $private_directory_path)) + 1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_media_format_form_prepare_alter().
 */
function multisite_crop_and_resize_media_format_form_prepare_alter(&$form, $form_state, $file) {
  // See access callback implementation.
  if (!media_crop_image_access($file)) {
    return;
  }

  // Alter only if file is not remote and is of type image.
  $scheme = file_uri_scheme($file->uri);
  $is_not_remote = module_exists('remote_stream_wrapper') ? !file_is_scheme_remote($scheme) : TRUE;

  if ($is_not_remote && $file->type === 'image') {
    $form['token'] = array(
      '#type' => 'hidden',
      '#value' => drupal_get_token(MEDIA_CROP_TOKEN_VALUE),
    );

    $form['template'] = array(
      '#type' => 'hidden',
      '#value' => theme('image', array(
        'path' => _media_crop_get_path('{MCIID}', $file->uri),
        'attributes' => array(
          'id' => 'ID_PLACEHOLDER',
        ),
      )),
    );

    $top_container_key = 'format_and_crop_top';
    $bottom_container_key = 'format_and_crop_bottom';

    $image = image_load($file->uri);

    // Remove original format select, we bypass this with a media crop specific
    // fake view mode.
    unset($form['options']['format']);
    $form['format_and_crop']['format'] = array(
      '#type' => 'hidden',
      '#value' => 'media_crop',
    );

    $form['image_edit_elements'] = array(
      '#type' => 'container',
      '#weight' => 0,
      '#attributes' => array(
        'class' => array('image-edit-elements-container'),
      ),
    );

    unset($form['preview']);

    // Form elements after this appear above the image area.
    $form['image_edit_elements'][$top_container_key] = array(
      '#type' => 'container',
      '#weight' => 0,
      '#attributes' => array(
        'class' => array('format-and-crop-container-top clearfix'),
      ),
    );

    $image_style_options = image_style_options(FALSE);
    $title = t('Current format is:', array(), array('context' => 'Media crop'));
    $form['image_edit_elements'][$top_container_key]['image_style'] = array(
      '#type' => 'select',
      '#title' => $title,
      '#weight' => -2,
      '#options' => $image_style_options + array(
        '-1' => t('None'),
      ),
      '#default_value' => variable_get('media_crop_default_style', -1),
      '#attributes' => array(
        'class' => array('media-crop-special-select'),
      ),
    );

    $image_style_keys = array_keys($image_style_options);
    foreach ($image_style_keys as $style_key) {
      $image_styles = image_styles();

      $style_def = NULL;
      if (isset($image_styles[$style_key])) {
        $style_def = $image_styles[$style_key];
      }

      $style_html = theme('image', array(
        'path' => "media_crop/{$style_key}/{$file->fid}/0/0/0/0/0",
      ));

      $form['image_edit_elements'][$top_container_key]['image_style']['#attached']['js'][] = array(
        'data' => array(
          'media_crop' => array(
            'imageStyleHtml' => array(
              $style_key => $style_html,
            ),
          ),
        ),
        'type' => 'setting',
      );

      $is_safe = FALSE;
      if ($style_def !== NULL) {
        $is_safe = _media_crop_effects_are_compatible($style_def['effects']);
      }

      $safe_style_rotation_crop_info = array();
      if ($is_safe) {
        $safe_style_rotation_crop_info = _media_crop_extract_rotation_and_crop($style_def['effects'], $image->info['width'], $image->info['height']);
      }

      $form['image_edit_elements'][$top_container_key]['image_style']['#attached']['js'][] = array(
        'data' => array(
          'media_crop' => array(
            'styles' => array(
              $style_key => array(
                'safe' => $is_safe,
              ) + $safe_style_rotation_crop_info,
            ),
          ),
        ),
        'type' => 'setting',
      );
    }

    $form['image_edit_elements'][$top_container_key]['image_style_description'] = array(
      '#markup' => t('Includes effects that may produce <a href="@url" target="_blank">unexpected results</a>.', array('@url' => url('admin/help/media_crop')), array('context' => 'Media crop')),
      '#prefix' => '<div class="image-style-description">',
      '#suffix' => '</div>',
      '#weight' => -1,
    );

    // Form elements after this appear under the image area.
    $form['image_edit_elements']['enable_interface'] = array(
      '#markup' => theme('image', array(
        'path' => drupal_get_path('module', 'media_crop') . '/images/crop-rotate-scale.png',
        'attributes' => array(
          'class' => 'enable-interface',
          'title' => t('Enable Image Editor UI', array(), array('context' => 'Media crop')),
        ),
      )),
      '#weight' => 2,
    );

    $form['image_edit_elements'][$bottom_container_key] = array(
      '#type' => 'container',
      '#weight' => 3,
      '#attributes' => array(
        'class' => array('format-and-crop-container-bottom clearfix'),
      ),
    );

    $crop_warning = theme('image', array(
      'path' => drupal_get_path('module', 'media_crop') . '/images/warning.png',
      'attributes' => array(
        'class' => 'crop-warning',
        'title' => t('Overrides the Image styleâ€™s cropping.', array(), array('context' => 'Media crop')),
      ),
    ));
    list($crop_title, $crop_desc) = explode('@sep', t('Crop @sep (click / drag)', array(), array('context' => 'Media crop')));
    $form['image_edit_elements'][$bottom_container_key]['crop_dimensions_container'] = array(
      '#type' => 'fieldset',
      '#title' => $crop_warning . $crop_title . '<span class="crop-title-description">' . $crop_desc . '</span>',
      '#weight' => -3,
      '#attributes' => array(
        'class' => array('crop-dimensions-container'),
      ),
    );

    $form['image_edit_elements'][$bottom_container_key]['crop_dimensions_container']['crop_aspect_ratio_lock'] = array(
      '#markup' => theme('image', array(
        'path' => drupal_get_path('module', 'media_crop') . '/images/lock.png',
        'attributes' => array(
          'class' => 'crop-aspect-ratio-lock',
          'title' => t('Lock aspect ratio', array(), array('context' => 'Media crop')),
        ),
      )),
      '#weight' => -3,
    );

    $form['image_edit_elements'][$bottom_container_key]['crop_dimensions_container']['crop_aspect_ratio_unlock'] = array(
      '#markup' => theme('image', array(
        'path' => drupal_get_path('module', 'media_crop') . '/images/unlock.png',
        'attributes' => array(
          'class' => 'crop-aspect-ratio-unlock',
          'title' => t('Unlock aspect ratio', array(), array('context' => 'Media crop')),
        ),
      )),
      '#weight' => -3.1,
    );

    $form['image_edit_elements'][$bottom_container_key]['crop_dimensions_container']['crop_dimensions'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('crop-dimensions'),
      ),
    );

    $form['image_edit_elements'][$bottom_container_key]['crop_dimensions_container']['crop_dimensions']['crop_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width:', array(), array('context' => 'Media crop')),
      '#field_suffix' => 'px',
      '#element_validata' => 'element_validate_integer_positive',
      '#size' => 4,
      '#maxlength' => 4,
      '#weight' => -2,
    );

    $form['image_edit_elements'][$bottom_container_key]['crop_dimensions_container']['crop_dimensions']['crop_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height:', array(), array('context' => 'Media crop')),
      '#field_suffix' => 'px',
      '#element_validata' => 'element_validate_integer_positive',
      '#size' => 4,
      '#maxlength' => 4,
      '#weight' => -1,
    );

    $scale_warning = theme('image', array(
      'path' => drupal_get_path('module', 'media_crop') . '/images/warning.png',
      'attributes' => array(
        'class' => 'scale-warning',
        'title' => t('Upscaling may produce poor image quality.', array(), array('context' => 'Media crop')),
      ),
    ));
    $form['image_edit_elements'][$bottom_container_key]['scale_image_container'] = array(
      '#type' => 'fieldset',
      '#title' => $scale_warning . t('Scale', array(), array('context' => 'Media crop')),
      '#weight' => -2,
      '#attributes' => array(
        'class' => array('scale-image-container'),
      ),
    );

    $form['image_edit_elements'][$bottom_container_key]['scale_image_container']['scale_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width:', array(), array('context' => 'Media crop')),
      '#field_suffix' => 'px',
      '#element_validata' => 'element_validate_integer_positive',
      '#size' => 4,
      '#maxlength' => 4,
      '#weight' => -2,
    );

    $form['image_edit_elements'][$bottom_container_key]['scale_image_container']['scale_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height:', array(), array('context' => 'Media crop')),
      '#field_suffix' => 'px',
      '#element_validata' => 'element_validate_integer_positive',
      '#size' => 4,
      '#maxlength' => 4,
      '#weight' => -1,
    );

    $form['image_edit_elements'][$bottom_container_key]['rotate_image_container'] = array(
      '#type' => 'fieldset',
      '#title' => t('Rotate', array(), array('context' => 'Media crop')),
      '#weight' => -1,
      '#attributes' => array(
        'class' => array('rotate-image-container'),
      ),
    );

    $form['image_edit_elements'][$bottom_container_key]['rotate_image_container']['rotate_right'] = array(
      '#markup' => '<a href="#" class="rotate-right-button"><span>' . t('Right', array(), array('context' => 'Media crop')) . '</span></a>',
      '#weight' => -2,
    );

    $form['image_edit_elements'][$bottom_container_key]['rotate_image_container']['rotate_left'] = array(
      '#markup' => '<a href="#" class="rotate-left-button"><span>' . t('Left', array(), array('context' => 'Media crop')) . '</span></a>',
      '#weight' => -1,
    );

    $form['image_edit_elements'][$bottom_container_key]['disable_interface'] = array(
      '#markup' => theme('image', array(
        'path' => drupal_get_path('module', 'media_crop') . '/images/close-crop.png',
        'attributes' => array(
          'class' => 'disable-interface',
          'title' => t('Disable Image Editor UI', array(), array('context' => 'Media crop')),
        ),
      )),
      '#weight' => 0,
    );

    $form['options']['#title'] = '';
    $form['options']['#weight'] = 5;

    $form['heading']['#weight'] = -5;

    // Create width, height, x, y fields.
    foreach (array('width', 'height', 'x', 'y', 'rotate') as $name) {
      // @codingStandardsIgnoreStart : Ignore the variable translation
      $form[$name] = array(
        '#title' => t(drupal_ucfirst($name), array(), array('context' => 'Media crop')),
        '#title_display' => 'invisible',
        '#type' => 'textfield',
        '#attributes' => array(
          'class' => array(
            'media-crop-invisible',
          ),
        ),
        '#theme_wrappers' => array(),
      );
      // @codingStandardsIgnoreEnd
    }

    $form['#attached']['css'][] = drupal_get_path('module', 'media_crop') . "/css/media_crop.base.css";
    $form['#attached']['css'][] = drupal_get_path('module', 'media_crop') . "/css/media_crop.theme.css";
    $form['#attached']['css'][] = drupal_get_path('module', 'multisite_crop_and_resize') . "/css/multisite_crop_and_resize.theme.css";
    $form['#attached']['js'][] = drupal_get_path('module', 'multisite_crop_and_resize') . "/js/multisite_crop_and_resize.js";

    $preview = file_view_file($file, 'preview');
    $preview['#theme_wrappers'][] = 'media_thumbnail';
    $preview['#style_name'] = 'media_crop_rotate_0';
    $form['image_edit_elements']['preview']['#markup'] = drupal_render($preview);
    $form['image_edit_elements']['preview']['#weight'] = 1;

    $form['image_edit_elements']['rotated-images'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'rotated-images',
        ),
      ),
    );

    for ($deg = 90; $deg < 360; $deg += 90) {
      $form['image_edit_elements']['rotated-images']["preview_{$deg}"] = array(
        '#markup' => theme('image_style', array(
          'style_name' => "media_crop_rotate_{$deg}",
          'path' => $file->uri,
          'attributes' => array(
            'class' => "rotated rotated-{$deg}",
          ),
        )),
      );
    }

    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array('media_format_form' => array()),
    );

    $form['fid'] = array(
      '#type' => 'hidden',
      '#value' => $file->fid,
    );

    $form['#attached']['library'][] = array('media_crop', 'imgareaselect');
  }
}

/**
 * Implements hook_image_default_styles().
 */
function multisite_crop_and_resize_image_default_styles() {
  $styles = array();

  for ($deg = 0; $deg < 360; $deg += 90) {
    $styles["media_crop_rotate_{$deg}"] = array(
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array(
            'width' => 350,
            'height' => 350,
            'upscale' => TRUE,
          ),
          'weight' => 0,
        ),
        array(
          'name' => 'image_rotate',
          'data' => array(
            'degrees' => $deg,
            'random' => FALSE,
          ),
          'weight' => 1,
        ),
      ),
    );
  }

  return $styles;
}

/**
 * Implements hook_file_download().
 */
function multisite_crop_and_resize_file_download($uri) {
  if (!user_access('view private files')) {
    return -1;
  }
}

/**
 * Page callback for image generation.
 */
function _multisite_crop_and_resize_get_image($media_crop_instance) {
  if (!$media_crop_instance) {
    drupal_goto(drupal_get_path('module', 'media_crop') . '/images/loading.gif');
  }

  $angle = (int) $media_crop_instance->angle;
  $file = file_load($media_crop_instance->fid);
  $style_name = $media_crop_instance->image_style_name;
  $crop_x_coordinate = (int) $media_crop_instance->crop_x;
  $crop_y_coordinate = (int) $media_crop_instance->crop_y;
  $crop_width = (int) $media_crop_instance->crop_w;
  $crop_height = (int) $media_crop_instance->crop_h;
  $scale_width = (int) $media_crop_instance->crop_scale_w;
  $scale_height = (int) $media_crop_instance->crop_scale_h;

  $args = func_get_args();
  array_shift($args);
  $req_uri = implode('/', $args);
  $orig_uri = str_replace('://', '/', $file->uri);
  if ($req_uri != $orig_uri) {
    watchdog('media_crop', 'Request URI not equals to original URI.');
    drupal_access_denied();
  }
  unset($args);

  $style = image_style_load($style_name);
  if (!$style) {
    $style = array(
      'name' => $style_name,
      'effects' => array(),
    );
  }

  $derivative_uri = _media_crop_get_path($media_crop_instance->mciid, $file->uri);

  if ((file_uri_scheme($derivative_uri)) == 'private') {
    $headers = module_invoke_all('file_download', $file->uri);
    if (in_array(-1, $headers) || empty($headers)) {
      watchdog('media_crop', 'No headers for file download.');
      return drupal_access_denied();
    }
    if (count($headers)) {
      foreach ($headers as $name => $value) {
        drupal_add_http_header($name, $value);
      }
    }
  }

  $lock = drupal_hash_base64($file->uri . implode('/', array(
    $angle,
    $crop_x_coordinate,
    $crop_y_coordinate,
    $crop_width,
    $crop_height,
  )));

  if (!file_exists($derivative_uri)) {
    $lock_acquired = lock_acquire($lock);
    if (!$lock_acquired) {
      drupal_add_http_header('Status', '503 Service Unavailable');
      drupal_add_http_header('Retry-After', 3);
      print t('Image generation in progress. Try again shortly.', array(), array('context' => 'Media crop'));
      drupal_exit();
    }
  }

  $crop_object = (object) array(
    'uri' => $file->uri,
    'angle' => $angle,
    'style' => $style,
    'crop_x_coordinate' => $crop_x_coordinate,
    'crop_y_coordinate' => $crop_y_coordinate,
    'crop_width' => $crop_width,
    'crop_height' => $crop_height,
    'scale_height' => $scale_height,
    'scale_width' => $scale_width,
    'mciid' => $media_crop_instance->mciid,
  );

  $success = file_exists($derivative_uri) || media_crop_create_derivative($crop_object);

  if (!empty($lock_acquired)) {
    lock_release($lock);
  }

  if ($success) {
    $image = image_load($derivative_uri);
    file_transfer($image->source, array(
      'Content-Type' => $image->info['mime_type'],
      'Content-Length' => $image->info['file_size'],
    ));
  }
  else {
    watchdog('media_crop', 'Unable to generate the derived image located at %path.', array('%path' => $derivative_uri));
    drupal_add_http_header('Status', '500 Internal Server Error');
    print t('Error generating image.', array(), array('context' => 'Media crop'));
    drupal_exit();
  }

  return NULL;
}

/**
 * Implements hook_media_token_to_markup_alter().
 */
function multisite_crop_and_resize_media_token_to_markup_alter(&$element, $tag_info, $settings) {
  if ($tag_info['view_mode'] === 'media_crop' && $tag_info['file']->type === 'image') {
    $mciid = NULL;

    if ($tag_info['fields']) {
      $mciid = db_query(
        "
          SELECT mciid FROM {media_crop_instance} WHERE
          fid = :fid AND
          image_style_name = :style AND
          angle = :angle AND
          crop_x = :x AND
          crop_y = :y AND
          crop_w = :w AND
          crop_h = :h AND
          crop_scale_w = :scale_w AND
          crop_scale_h = :scale_h
        ",
        array(
          ':fid' => $tag_info['fid'],
          ':style' => $tag_info['fields']['media_crop_image_style'],
          ':angle' => $tag_info['fields']['media_crop_rotate'],
          ':x' => $tag_info['fields']['media_crop_x'],
          ':y' => $tag_info['fields']['media_crop_y'],
          ':w' => $tag_info['fields']['media_crop_w'],
          ':h' => $tag_info['fields']['media_crop_h'],
          ':scale_w' => $tag_info['fields']['media_crop_scale_w'],
          ':scale_h' => $tag_info['fields']['media_crop_scale_h'],
        )
      )->fetchField();
    }

    if (is_null($mciid)) {
      return $element;
    }

    // Something changes here.
    // @todo find out why.
    if (!isset($element['#file']) && isset($element['content']['file']['#file'])) {
      $element['#file'] = $element['content']['file']['#file'];
    }

    if (!isset($element['#attributes']) && is_array($tag_info['attributes'])) {
      $element['#attributes'] = $tag_info['attributes'];
    }
    else {
      $element['#attributes'] = $tag_info['attributes'];
    }

    $element['#media_crop'] = array();
    $element['#media_crop']['media_crop_instance'] = $mciid;
    $element['#theme'] = 'media_crop_image';
  }
}

/**
 * Implements hook_theme().
 */
function multisite_crop_and_resize_theme() {
  return array(
    'media_crop_image' => array(
      'function' => 'multisite_media_crop_image',
    ),
  );
}

/**
 * For rendering the media (image), with applied crop/rotation settings.
 */
function multisite_media_crop_image($variables) {
  $file = $variables['file'];
  if (isset($variables['media_crop']['media_crop_instance'])) {
    $mciid = $variables['media_crop']['media_crop_instance'];

    $image_variables = array(
      'path' => _media_crop_get_path($mciid, $file->uri),
      'attributes' => $variables['attributes'],
      'alt' => $variables['file']->alt,
      'title' => $variables['file']->title,
    );

    return theme('image', $image_variables);
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add media_crop view modes to the file entity type.
 */
function multisite_crop_and_resize_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['media_crop'] = array('label' => t('Media Crop'), 'custom settings' => TRUE);
}

/**
 * Implements hook_element_info_alter().
 */
function multisite_crop_and_resize_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'multisite_crop_and_resize_pre_render_text_format';
}

/**
 * Process function for adding necessary js to the editor.
 */
function multisite_crop_and_resize_pre_render_text_format($element) {
  // filter_process_format() copies properties to the expanded 'value' child
  // element. Skip this text format widget, if it contains no 'format' or when
  // the current user does not have access to edit the value.
  if (!isset($element['format']) || !empty($element['value']['#disabled'])) {
    return $element;
  }
  // Allow modules to programmatically enforce no client-side editor by setting
  // the #wysiwyg property to FALSE.
  if (isset($element['#wysiwyg']) && !$element['#wysiwyg']) {
    return $element;
  }

  $path = drupal_get_path('module', 'multisite_crop_and_resize');
  drupal_add_js($path . '/js/multisite_crop_and_resize.image_replace.js');

  return $element;
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function multisite_crop_and_resize_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor === 'ckeditor') {
    if (isset($settings['extraPlugins'])) {
      $extra_plugins = explode(',', $settings['extraPlugins']);
      if (in_array('media_crop_ckeditor', $extra_plugins)) {
        $settings['allowedContent'] = TRUE;
        if (isset($settings['menu_groups'])) {
          $settings['menu_groups'] .= ',mediaCrop';
        }
        else {
          $settings['menu_groups'] = 'clipboard,form,tablecell,tablecellproperties,tablerow,tablecolumn,table,anchor,link,image,flash,checkbox,radio,textfield,hiddenfield,imagebutton,button,select,textarea,mediaCrop';
        }
      }
    }
  }
}
