<?php
/**
 * @file
 * Nexteuropa_multilingual module file.
 */

include_once 'nexteuropa_multilingual.tokens.inc';

/**
 * Implements hook_theme().
 */
function nexteuropa_multilingual_theme($existing, $type, $theme, $path) {
  return array(
    'nexteuropa_multilingual_language_list' => array(
      'path' => $path . '/theme',
    ),
    'nexteuropa_multilingual_language_icon' => array(
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Returns HTML for a list of languages.
 *
 * @param array $variables
 *   An associative array containing:
 *   - languages: An array of languages which should be shown in the list.
 *   - path: The path to which the user should be directed after clicking on a
 *     language.
 *   - options: Options to pass to the l() function when generating the link to
 *     the given path (optional).
 *   - title: Title for the language list (optional).
 *   - type: The type of list (optional). Can be either 'ol' or 'ul'. Defaults
 *     to 'ol'.
 *   - attributes: Attributes to apply to the item list (optional).
 *
 * @return string
 *   The HTML for the language list.
 *
 * @ingroup themeable
 */
function theme_nexteuropa_multilingual_language_list(array $variables) {
  // Provide defaults.
  $options = !empty($variables['options']) ? $variables['options'] : [];
  $title = !empty($variables['title']) ? $variables['title'] : '';
  $type = !empty($variables['type']) ? $variables['type'] : 'ol';
  $attributes = !empty($variables['attributes']) ? $variables['attributes'] : [];

  $languages = [];
  foreach ($variables['languages'] as $language) {
    $options['attributes']['lang'] = $language->language;
    $options['attributes']['hreflang'] = $language->language;
    $options['language'] = $language;
    $languages[] = l($language->native, $variables['path'], $options);
  }

  return theme('item_list', [
    'items' => $languages,
    'title' => $title,
    'type' => $type,
    'attributes' => $attributes,
  ]);
}

/**
 * Returns HTML for a language icon.
 *
 * @param array $variables
 *   An associative array containing:
 *   - width: Optional width of the icon, in pixels. Defaults to 60.
 *   - height: Optional height of the icon, in pixels. Defaults to 60.
 *   - alt: Optional alternative text for text-based browsers. Defaults to
 *     'Language icon'.
 *   - title: Optional title text which is displayed when the image is hovered
 *     in some popular browsers. Defaults to 'Language icon'.
 *
 * @return string
 *   The HTML for the language icon.
 *
 * @ingroup themeable
 */
function theme_nexteuropa_multilingual_language_icon(array $variables) {
  // Provide default values.
  $width = !empty($variables['width']) ? $variables['width'] : 60;
  $height = !empty($variables['height']) ? $variables['height'] : 60;
  $alt = !empty($variables['alt']) ? $variables['alt'] : t('Language icon');
  $title = !empty($variables['title']) ? $variables['title'] : t('Language icon');

  return theme('image', [
    'path' => drupal_get_path('module', 'nexteuropa_multilingual') . '/theme/language-icon.png',
    'width' => $width,
    'height' => $height,
    'alt' => $alt,
    'title' => $title,
  ]);
}

/**
 * Implements hook_module_implements_alter().
 */
function nexteuropa_multilingual_module_implements_alter(&$implementations, $hook) {
  // Make the following hooks exposed by nexteuropa_multilingual ran as last.
  $hooks = array(
    'language_switch_links_alter',
  );
  if (in_array($hook, $hooks)) {
    $group = $implementations['nexteuropa_multilingual'];
    unset($implementations['nexteuropa_multilingual']);
    $implementations['nexteuropa_multilingual'] = $group;
  }
}

/**
 * Implements hook_language_switch_links_alter().
 */
function nexteuropa_multilingual_language_switch_links_alter(array &$links, $type, $path) {

  // Implement language switcher behavior as per NEXTEUROPA-20.
  if (($node = menu_get_object('node'))) {
    $handler = entity_translation_get_handler('node', $node);
    $translations = $handler->getTranslations();
    if (empty($translations->original)) {
      $handler->initTranslations();
      $handler->saveTranslations();
    }
    foreach ($links as $key => $link) {
      if (!isset($translations->data[$key])) {
        unset($links[$key]);
      }
    }
  }
}

/**
 * Implements hook_language_negotiation_info().
 */
function nexteuropa_multilingual_language_negotiation_info() {
  $file = drupal_get_path('module', 'nexteuropa_multilingual') . '/nexteuropa_multilingual.callbacks.inc';
  $providers = array();
  $providers['nexteuropa_multilingual_url_suffix'] = array(
    'types' => array(
      LANGUAGE_TYPE_CONTENT,
      LANGUAGE_TYPE_INTERFACE,
      LANGUAGE_TYPE_URL,
    ),
    'callbacks' => array(
      'language' => 'nexteuropa_multilingual_language_negotiation_provider_callback',
      'url_rewrite' => 'nexteuropa_multilingual_language_negotiation_url_rewrite_callback',
      'switcher' => 'nexteuropa_multilingual_language_negotiation_switcher_url',
    ),
    'file' => $file,
    'weight' => -8,
    'name' => t('NextEuropa URL suffix'),
    'description' => t('Determine the language from the URL path suffix.'),
    'config' => 'admin/config/regional/language/configure/nexteuropa-url-suffix',
  );
  return $providers;
}


/**
 * Implements hook_menu().
 */
function nexteuropa_multilingual_menu() {
  $items['admin/config/regional/language/configure/nexteuropa-url-suffix'] = array(
    'title' => 'NextEuropa Language suffix delimiter',
    'description' => 'Settings to choose the language suffix delimiter in the url',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nexteuropa_multilingual_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Form callback.
 *
 * @see: nexteuropa_multilingual_menu()
 */
function nexteuropa_multilingual_form($form, &$form_state) {
  $form['nexteuropa_multilingual_language_suffix_delimiter'] = array(
    '#type' => 'textfield',
    '#maxlength' => 3,
    '#title' => t('Language suffix delimiter'),
    '#default_value' => variable_get('nexteuropa_multilingual_language_suffix_delimiter', '_'),
    '#description' => t('A character that separates language suffix from the actual URL, for example an underscore or a hyphen.'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_language_types_info_alter().
 */
function nexteuropa_multilingual_language_types_info_alter(&$language_types) {
  $defined_providers = language_negotiation_info();
  if (isset($defined_providers['nexteuropa_multilingual_url_suffix'])) {
    // Put the locale-url-suffix as priority provider for language type url.
    array_unshift($language_types[LANGUAGE_TYPE_URL]['fixed'], 'nexteuropa_multilingual_url_suffix');
  }
}

/**
 * Implements hook_form_alter().
 */
function nexteuropa_multilingual_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'locale_languages_configure_form':
      $language_negotiation = variable_get('language_negotiation_language');
      // Disable URL method if URL-suffix method is enabled.
      if (isset($language_negotiation['nexteuropa_multilingual_url_suffix'])) {
        $form['language']['enabled']['locale-url']['#disabled'] = TRUE;
        $form['language_content']['enabled']['locale-url']['#disabled'] = TRUE;
      }
      break;
  }
  if (substr($form_id, -9) == 'node_form') {
    $language_default = language_default();
    // Hide all languages except neutral language and default language
    // in node source form.
    if (isset($form_state['node'])) {
      if ($form_state['node']->language == LANGUAGE_NONE || $form_state['node']->language == $language_default->language) {
        // Check if node source or new node.
        if (isset($form['language']['#options'])) {
          foreach ($form['language']['#options'] as $lg => $language) {
            if ($lg != $language_default->language && $lg != LANGUAGE_NONE) {
              unset($form['language']['#options'][$lg]);
            }
          }
        }
      }
    }

    $warning_message = '<div class="alert alert-warning" role="alert" id="warning_languages_message">'
     . token_replace(variable_get('warning_message_languages'), array('node' => $form_state['node']))
     . '</div>';

    $form['warning_message_languages'] = array(
      '#markup' => $warning_message,
      '#weight' => 105,
      '#attached' => array(
        'css' => array(drupal_get_path('module', 'nexteuropa_multilingual') . '/nexteuropa_multilingual.css'),
      ),
    );
  }

  if ($form_id == 'workbench_moderation_moderate_form' || $form_id == 'workbench_moderation_node_unpublish_form') {
    $warning_message = '<div class="alert alert-warning" role="alert" id="warning_languages_message">'
     . token_replace(variable_get('warning_message_languages'), array('node' => $form_state['build_info']['args'][0]))
     . '</div>';

    $form['warning_languages_message'] = array(
      '#markup' => $warning_message,
      '#weight' => 105,
      '#attached' => array(
        'css' => array(drupal_get_path('module', 'nexteuropa_multilingual') . '/nexteuropa_multilingual.css'),
      ),
    );
  }

}

/**
 * Implements hook_tokens_alter().
 */
function nexteuropa_multilingual_tokens_alter(array &$replacements, array $context) {
  if ($context['type'] == 'node' && !empty($context['data']['node'])) {
    $node = $context['data']['node'];
    // IPG url rules : only the default language (should be english) title
    // must be used to generate the content url even for non translated content.
    $wrapper = entity_metadata_wrapper('node', $node);
    $original_language = $node->translations->original;
    $entity_properties = $wrapper->getPropertyInfo();
    // Check if the title module is used to manage the title as a field.
    if (isset($entity_properties['title_field'])) {
      $replacements['[node:source:title]'] = $wrapper->language($original_language)->title_field->raw();
    }
    else {
      $replacements['[node:source:title]'] = $wrapper->language($original_language)->label();
    }
  }
}

/**
 * Implements hook_language_fallback_candidates_alter().
 *
 * Change the language fallback order.
 */
function nexteuropa_multilingual_language_fallback_candidates_alter(array &$fallback_candidates) {
  // First we get our url parameters.
  $parameters = drupal_get_query_parameters();

  // Add the default language as first fallback.
  $language_default = language_default();
  $array_key = array_search($language_default->language, $fallback_candidates);
  if ($array_key !== FALSE) {
    unset($fallback_candidates[$array_key]);
  }
  array_unshift($fallback_candidates, $language_default->language);

  // Add the 2nd language as first fallback.
  if (isset($parameters['2nd-language'])) {
    $array_key = array_search($parameters['2nd-language'], $fallback_candidates);
    if ($array_key !== FALSE) {
      unset($fallback_candidates[$array_key]);
    }
    array_unshift($fallback_candidates, $parameters['2nd-language']);
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function nexteuropa_multilingual_pathauto_alias_alter(&$alias, array &$context) {
  // Force all aliases to be saved as language neutral.
  // All content translations will have a unique alias.
  $context['language'] = LANGUAGE_NONE;
}
