<?php
/**
 * @file
 * Nexteuropa_multilingual install file.
 */

module_load_include('inc', 'nexteuropa_multilingual', 'nexteuropa_multilingual.install');

/**
 * Implements hook_requirements().
 */
function nexteuropa_multilingual_requirements() {
  $requirements = [];
  if (module_exists('multisite_drupal_language_negociation')) {
    $t = get_t();
    $args = array('%module' => 'Multisite Drupal Language Negociation');
    $requirements['nexteuropa_multilingual_module_conflict'] = [
      'title' => 'NextEuropa Multilingual',
      'description' => $t('This module is not compatible with %module. Please disable that module first.', $args),
      'severity' => REQUIREMENT_ERROR,
    ];
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function nexteuropa_multilingual_install() {

  // Setting default English prefix.
  multisite_config_service('locale')->setLanguagePrefix('en', 'en');

  // Set "administrator" permissions.
  $permissions = array(

    // String translation.
    'translate user-defined strings',
    'translate admin strings',

    // Entity Translation.
    'translate any entity',

    // Locale.
    'translate interface',

    // Translation Management Core.
    'administer tmgmt',
    'create translation jobs',
    'submit translation jobs',
    'accept translation jobs',
  );
  multisite_config_service('user')->grantPermission('administrator', $permissions);

  // Set nexteuropa_multilingual_url_suffix as default language negotiation.
  $enabled_providers_interface = variable_get('language_negotiation_' . LANGUAGE_TYPE_INTERFACE);
  $enabled_providers_content = variable_get('language_negotiation_' . LANGUAGE_TYPE_CONTENT);
  $url_suffix_provider = array(
    'nexteuropa_multilingual_url_suffix' => array(
      'callbacks' => array(
        'language' => 'nexteuropa_multilingual_language_negotiation_provider_callback',
      ),
      'file' => drupal_get_path('module', 'nexteuropa_multilingual') . '/nexteuropa_multilingual.callbacks.inc',
    ),
  );
  $language_admin_provider = array(
    'language-administration' => array(
      'callbacks' => array(
        'language' => 'administration_language_negotiation_admin_language',
      ),
      'file' => drupal_get_path('module', 'administration_language_negotiation') . '/administration_language_negotiation.module',
      'cache' => 0,
    ),
  );
  // Suffix is not compatible with prefix. Remove that negotiation mechanism.
  unset($enabled_providers_interface[LOCALE_LANGUAGE_NEGOTIATION_URL]);

  // NEPT-8: Don't use interface language as admin interface is always EN.
  unset($enabled_providers_content[LOCALE_LANGUAGE_NEGOTIATION_INTERFACE]);

  drupal_static_reset("language_negotiation_info");
  variable_set('administration_language_negotiation_default', 'en');
  language_negotiation_set(LANGUAGE_TYPE_INTERFACE, $enabled_providers_interface + $url_suffix_provider + $language_admin_provider);
  language_negotiation_set(LANGUAGE_TYPE_CONTENT, $enabled_providers_content + $url_suffix_provider);

  // Set translatable states for TMGMT Workbench module.
  multisite_config_service('system')->setVariable('tmgmt_workbench_moderation_states', array('validated', 'published'));

  // IPG URL rules : use the token [node:source:title] to have always the
  // english title in the URL.
  variable_set('pathauto_node_pattern', 'content/[node:source:title]');

  // Remove old language switcher block.
  multisite_drupal_toolbox_remove_block_context('site_wide', 'language');
  multisite_drupal_toolbox_remove_block_context('site_wide', 'locale-language');

  // Set the warning message when changing node state.
  variable_set('nexteuropa_multilingual_warning_message_languages', "The state of the content <b>[node:title]</b> and all its validated translations <b>[node:entity-translation-languages]</b> will be updated!");

  _nexteuropa_multilingual_make_files_translatable();
}

/**
 * Implements hook_disable().
 */
function nexteuropa_multilingual_disable() {
  // Remove block from context.
  multisite_drupal_toolbox_remove_block_context('site_wide', 'language_selector_site');
  multisite_drupal_toolbox_remove_block_context('site_wide', 'language_selector_page');

  // Disable modules.
  module_disable(array('language_selector_site'), FALSE);
  module_disable(array('language_selector_page'), FALSE);
}

/**
 * NEXTEUROPA-9937: Normalizes the "warning_message_languages" variable name.
 */
function nexteuropa_multilingual_update_7001() {
  $old_variable = variable_get('warning_message_languages');
  variable_set('nexteuropa_multilingual_warning_message_languages', $old_variable);
  variable_del('warning_message_languages');
}

/**
 * NEPT-7: Make files translatable.
 */
function nexteuropa_multilingual_update_7002() {
  _nexteuropa_multilingual_make_files_translatable();
}
