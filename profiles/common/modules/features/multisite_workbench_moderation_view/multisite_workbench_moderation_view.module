<?php

/**
 * @file
 * Code for the multisite_workbench_moderation_view feature.
 */

include_once 'multisite_workbench_moderation_view_alter.inc';

/**
 * Implements hook_views_pre_view().
 */
function multisite_workbench_moderation_view_views_pre_view(&$views) {
  if ($views->name == "workbench_moderation") {

    // Alter display default fields for prying non admin user's eyes.
    if (array_key_exists('default', $views->display)) {
      if (!user_access('multisite_workbench_moderation_view_bulk_update')) {
        // &todo check if it needs to be by reference.
        $handler_default = $views->display['default']->handler;
        unset($handler_default->options['fields']['views_bulk_operations']);
      }
    }

    // Checkboxes on the first table column.
    $handler_default = $views->display['default']->handler;
    $fields = $handler_default->options['fields'];

    $last_field = end($fields);
    $last_key = key($fields);
    // PHP5 array_merge only accept type array.
    $last_element = array($last_key => $last_field);
    array_pop($fields);
    $fields = array_merge($last_element, $fields);

    $views->display['default']->handler->options['fields'] = $fields;
  }
}

/**
 * Implements hook_views_post_render().
 */
function multisite_workbench_moderation_view_views_post_render(&$view, &$output, &$cache) {

  // NEPT-485: For following views we need to process this logic:
  // If content was never published, we don't show "Last Published" date.
  // We need to query workbench moderation history,
  // if we don't find a state published we override the view field.
  if ($view->name === 'workbench_edited') {
    $field_nid = 'node_node_revision_nid';
    $field_status = 'node_node_revision_status';
    $field_status_ok = 1;
  }
  elseif ($view->name === 'workbench_moderation') {
    $field_nid = 'node_workbench_moderation_node_history_nid';
    $field_status = 'workbench_moderation_node_history_state';
    $field_status_ok = 'published';
  }
  else {
    return;
  }

  foreach ($view->result as &$row) {
    if ($row->$field_status != $field_status_ok) {
      $query = db_select('workbench_moderation_node_history', 'history')
        ->fields('history', ['nid'])
        ->condition('history.state', 'published')
        ->condition('nid', $row->$field_nid);
      $found = $query->execute()->fetchField();
      if (!$found) {
        $string = '<span id="last_published_' . $row->$field_nid . '">';
        $output = preg_replace('#(' . $string . ').*?(</span>)#', 'No', $output);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multisite_workbench_moderation_view_form_views_form_workbench_moderation_moderate_all_page_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['force_transition']) && isset($form['force_transition'])) {
    // Beware is dangerous to unset variables, choose better to hide them.
    $form['force_transition']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_permission().
 */
function multisite_workbench_moderation_view_permission() {
  $permissions = array();

  // Exported permission: create blog_post content.
  $permissions['multisite_workbench_moderation_view_bulk_update'] = array(
    'title' => t('Moderate workbench in bulk'),
    'description' => t('Allow users to manage items from the workbench in bulk.'),
  );
  return $permissions;
}
