<?php

/**
 * @file
 * Install, update and uninstall functions for the nexteuropa_editorial feature.
 */

/**
 * Implements hook_install().
 */
function nexteuropa_editorial_install() {

  // Create "editorial team member" site-wide role, automatically assigned
  // when a user is a member of an editorial team group.
  //
  // See: nexteuropa_editorial_og_membership_insert().
  // See: nexteuropa_editorial_og_membership_delete().
  multisite_config_service('user')->createRole(NEXTEUROPA_EDITORIAL_TEAM_MEMBER_ROLE, 2);

  // Use soft config for editorial_teams comment form location.
  multisite_config_service('comment')->setThreadingCommentForContentType('editorial_team', 1);

  // Set "editorial team member" permissions.
  $permissions = array(

    // Admin menu.
    'access administration menu',

    // Bean.
    'access bean overview',
    'view bean page',
    'view bean revisions',

    // Contextual.
    'access contextual links',

    // Entity Translation.
    'translate any entity',

    // File entity.
    'create files',
    'view own private files',
    'view own files',

     // Menu.
    'administer menu',

    // Node.
    'view own unpublished content',
    'view revisions',
    'access content overview',

    // Path.
    'create url aliases',

    // Scheduler.
    'schedule (un)publishing of nodes',

    // Scheduler Workbench Integration.
    'override default scheduler time',

    // Taxonomy.
    'administer taxonomy',

    // Translation Management.
    'submit translation jobs',
    'create translation jobs',

    // User.
    'access user profiles',

    // Workbench.
    'access workbench',

    // Workbench Moderation.
    'view all unpublished content',
    'view moderation history',
    'view moderation messages',
    'use workbench_moderation my drafts tab',
    'use workbench_moderation needs review tab',

    // WYSIWYG Editor.
    'use media wysiwyg',

    // System.
    'access administration pages',
  );
  multisite_config_service('user')->grantPermission(NEXTEUROPA_EDITORIAL_TEAM_MEMBER_ROLE, $permissions, 'nexteuropa_editorial');

  // Set "administrator" permissions.
  multisite_config_service('user')->grantPermission('administrator', $permissions);

  // Rebuilds the node access database.
  node_access_rebuild();

  // Replace title field.
  multisite_config_service('title')->replaceTitleField('node', 'editorial_team', 'title');

  // Add NextEuropa specific moderation states.
  multisite_config_service('workbench_moderation')->createModerationState('expired', 'Expired', 'Not visible to site visitors', 100);
  multisite_config_service('workbench_moderation')->createModerationState('archived', 'Archived', 'Content is not published anymore', 100);
  multisite_config_service('workbench_moderation')->createModerationState('validated', 'Validated', 'Approved by administrator', 10);

  // Build transitions (not transitions provided by workbench_moderation).
  $transitions = array(
    array('from' => 'published', 'to' => 'needs_review'),
    array('from' => 'needs_review', 'to' => 'validated'),
    array('from' => 'validated', 'to' => 'published'),
    array('from' => 'published', 'to' => 'archived'),
    array('from' => 'published', 'to' => 'expired'),
    array('from' => 'published', 'to' => 'draft'),
  );
  foreach ($transitions as $transition) {
    multisite_config_service('workbench_moderation')->createModerationStateTransition($transition['to'], $transition['from']);
  }

  // Grant Worbench moderation permissions.
  $transitions = array(
    array('from' => 'draft', 'to' => 'needs_review'),
    array('from' => 'needs_review', 'to' => 'draft'),
    array('from' => 'needs_review', 'to' => 'published'),
    array('from' => 'published', 'to' => 'needs_review'),
    array('from' => 'needs_review', 'to' => 'validated'),
    array('from' => 'validated', 'to' => 'published'),
    array('from' => 'published', 'to' => 'archived'),
    array('from' => 'published', 'to' => 'expired'),
    array('from' => 'published', 'to' => 'draft'),
  );
  $permissions_wb = array();
  foreach ($transitions as $transition) {
    $permissions_wb[] = 'moderate content from ' . $transition['from'] . ' to ' . $transition['to'];
  }
  multisite_config_service('user')->grantPermission('editor', $permissions_wb, 'workbench_moderation');

  $transitions = array(
    array('from' => 'draft', 'to' => 'needs_review'),
    array('from' => 'needs_review', 'to' => 'draft'),
  );
  $permissions_wb = array();
  foreach ($transitions as $transition) {
    $permissions_wb[] = 'moderate content from ' . $transition['from'] . ' to ' . $transition['to'];
  }
  multisite_config_service('user')->grantPermission('contributor', $permissions_wb, 'workbench_moderation');

  // Linkchecker: checks for both internal and external links.
  multisite_config_service('system')->setVariable('linkchecker_check_links_types', 0);
}

/**
 * Implements hook_enable().
 */
function nexteuropa_editorial_enable() {

  // Adding Organic Group fields.
  multisite_config_service('og')->createOgGroupField('node', 'editorial_team');
  multisite_config_service('og')->createOgAccessField('node', 'editorial_team');
  multisite_config_service('og')->createOgDefaultContentAccessField('node', 'editorial_team');

  // Create NextEuropa default roles.
  multisite_config_service('og')->createOgRole('contributor', 'node', 'editorial_team');
  multisite_config_service('og')->createOgRole('validator', 'node', 'editorial_team');
  multisite_config_service('og')->createOgRole('publisher', 'node', 'editorial_team');

  // Create Global editorial team.
  multisite_config_service('nexteuropa_editorial')->createEditorialTeam('Global editorial team');

  // Grant Workbench OG permissions.
  drupal_static_reset('workbench_moderation_transitions');
  $og_permissions = array(
    'contributor' => array(
      'draft',
      'needs_review',
    ),
    'validator' => array(
      'draft',
      'validated',
      'needs_review',
    ),
    'publisher' => array(
      'draft',
      'validated',
      'needs_review',
      'published',
      'expired',
    ),
    'administrator member'  => array(
      'draft',
      'validated',
      'needs_review',
      'published',
      'expired',
    ),
  );
  foreach ($og_permissions as $role => $states) {
    $permissions = array();
    foreach ($states as $from) {
      foreach ($states as $to) {
        if ($from != $to) {
          $permissions[] = "moderate content from {$from} to {$to}";
        }
      }
    }
    multisite_config_service('og')->grantOgPermissions($role, $permissions, 'node', 'editorial_team', 'workbench_og');
  }

  // Grant other editorial team group-related permission.
  $og_roles = array(
    'validator',
    'publisher',
    'administrator member',
  );
  foreach ($og_roles as $og_role) {
    multisite_config_service('og')->grantOgPermissions($og_role, array('View all unpublished content'), 'node', 'editorial_team', 'workbench_og');
  }
  $og_roles = array(
    'contributor',
    'validator',
    'publisher',
    'administrator member',
  );
  foreach ($og_roles as $og_role) {
    multisite_config_service('og')->grantOgPermissions($og_role, array('manage organic group translation jobs'), 'node', 'editorial_team', 'tmgmt_og');
  }

  // Grant OG Linkchecker permission.
  $og_roles = array(
    'contributor',
    'validator',
    'publisher',
    'administrator member',
  );
  foreach ($og_roles as $og_role) {
    multisite_config_service('og')->grantOgPermissions($og_role, array('access group broken links report'), 'node', 'editorial_team', 'og_linkchecker');
  }
}

/**
 * NEXTEUROPA-11901: "ckeditor_lite highlight changes" (editorial team member).
 */
function nexteuropa_editorial_update_7001() {
  // Set permissions for "contributor" role.
  $permissions = array(
    // Version Management.
    'ckeditor_lite highlight changes',
  );
  multisite_config_service('user')->grantPermission(NEXTEUROPA_EDITORIAL_TEAM_MEMBER_ROLE, $permissions);
}

/**
 * NEXTEUROPA-12634: Set "wysiwyg tracking settings." variable.
 */
function nexteuropa_editorial_update_7002() {
  // Workbench moderation state for WYSIWYG tracking settings.
  $wbm_state = array(
    'validated' => 'validated',
    'published' => 'published',
  );
  variable_set('nexteuropa_editorial_tracking_wbm_states', $wbm_state);
  // WYSIWYG tracking settings for "Published" status case.
  variable_set('nexteuropa_editorial_tracking_status', 1);
}
