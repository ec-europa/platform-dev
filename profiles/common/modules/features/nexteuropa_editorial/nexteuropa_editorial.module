<?php
/**
 * @file
 * Code for the NextEuropa Editorial feature.
 */

include_once 'nexteuropa_editorial.features.inc';
include_once 'includes/nexteuropa_editorial.tracking.inc';

/**
 * Editorial team member role name.
 */
define('NEXTEUROPA_EDITORIAL_TEAM_MEMBER_ROLE', 'editorial team member');

/**
 * Implements hook_menu().
 */
function nexteuropa_editorial_menu() {

  $items['admin/config/content/multisite_wysiwyg/workbench'] = [
    'title' => 'WYSIWYG workflow settings',
    'description' => 'Setup page for Multisite WYSIWYG workflow',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['nexteuropa_editorial_wysiwyg_tracking_settings_form'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/nexteuropa_editorial.tracking.inc',
    'weight' => 1,
  ];

  return $items;
}
/**
 * Implements hook_workbench_block().
 */
function nexteuropa_editorial_workbench_block() {
  if (($node = menu_get_object('node'))) {
    if (node_access('update', $node) && isset($node->{OG_AUDIENCE_FIELD})) {
      $output = array();
      $og_audience = field_view_field('node', $node, OG_AUDIENCE_FIELD, 'default');
      $output[] = drupal_render($og_audience);
      return $output;
    }
  }
}

/**
 * Implements hook_og_membership_insert().
 */
function nexteuropa_editorial_og_membership_insert(OgMembership $og_membership) {

  // Automatically assign "editorial team member" to a user joining
  // an editorial team organic group.
  if ($og_membership->entity_type == 'user') {
    if (multisite_config_service('nexteuropa_editorial')->isEditoralTeamMember($og_membership->etid)) {
      multisite_config_service('user')->assignRoleToUser(NEXTEUROPA_EDITORIAL_TEAM_MEMBER_ROLE, $og_membership->etid);
    }
  }
}

/**
 * Implements hook_og_membership_delete().
 */
function nexteuropa_editorial_og_membership_delete(OgMembership $og_membership) {

  // Automatically revoke "editorial team member" to a leaving
  // an editorial team organic group.
  if ($og_membership->entity_type == 'user') {
    if (!multisite_config_service('nexteuropa_editorial')->isEditoralTeamMember($og_membership->etid)) {
      multisite_config_service('user')->revokeRoleFromUser(NEXTEUROPA_EDITORIAL_TEAM_MEMBER_ROLE, $og_membership->etid);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nexteuropa_editorial_form_user_profile_form_alter(&$form, $form_state) {

  // Disable "editorial team member" on the UI role
  // as Drupal does with the "Authenticated user" role.
  $role = user_role_load_by_name(NEXTEUROPA_EDITORIAL_TEAM_MEMBER_ROLE);

  $default_value = in_array($role->rid, $form['account']['roles']['#default_value']);
  unset($form['account']['roles']['#options'][$role->rid]);
  $form['account']['roles'][$role->rid] = array(
    '#type' => "checkbox",
    '#title' => $role->name,
    '#default_value' => $default_value,
    '#disabled' => TRUE,
    '#weight' => 0,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nexteuropa_editorial_form_diff_node_revisions_alter(&$form, $form_state) {
  $form['submit']['#submit'] = array('nexteuropa_editorial_diff_node_revisions_submit');
}

/**
 * Submit code for input form to select two revisions.
 */
function nexteuropa_editorial_diff_node_revisions_submit($form, &$form_state) {
  // Select "Marked down" diff mode by default.
  // The ids are ordered so the old revision is always on the left.
  $old_vid = min($form_state['values']['old'], $form_state['values']['new']);
  $new_vid = max($form_state['values']['old'], $form_state['values']['new']);
  $form_state['redirect'] = 'node/' . $form_state['values']['nid'] . '/moderation/diff/view/' . $old_vid . '/' . $new_vid . '/raw-plain';
}

/**
 * Implements hook_menu_alter().
 */
function nexteuropa_editorial_menu_alter(&$items) {
  // Fix shortcoming of workbench_moderation_menu() in providing diff path.
  $items['node/%node/moderation/diff/view']['page arguments']
    = array(1, 5, 6, 7);
}

/**
 * Implements hook_module_implements_alter().
 */
function nexteuropa_editorial_module_implements_alter(&$implementations, $hook) {
  // Make the following hooks, exposed by nexteuropa_editorial, ran as last.
  $hooks = array(
    'menu_alter',
  );
  if (in_array($hook, $hooks)) {
    $group = $implementations['nexteuropa_editorial'];
    unset($implementations['nexteuropa_editorial']);
    $implementations['nexteuropa_editorial'] = $group;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function nexteuropa_editorial_form_workbench_moderation_moderate_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['node'])) {
    $entity = $form['node']['#value'];
    $tracking_settings = _nexteuropa_editorial_wysiwyg_tracking_settings($entity);
    if ($tracking_settings['is_activate']) {
      $form['#validate'][] = '_nexteuropa_editorial_tracking_wbm_validate';
    }
  }
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * It implements it for "Text area" widget.
 */
function nexteuropa_editorial_field_widget_text_textarea_form_alter(&$element, &$form_state, $context) {
  _nexteuropa_editorial_field_widget_tracking_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * It implements it for "Text area with a summary" widget.
 */
function nexteuropa_editorial_field_widget_text_textarea_with_summary_form_alter(&$element, &$form_state, $context) {
  _nexteuropa_editorial_field_widget_tracking_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * It implements it for "Text field" widget.
 */
function nexteuropa_editorial_field_widget_text_textfield_form_alter(&$element, &$form_state, $context) {
  _nexteuropa_editorial_field_widget_tracking_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_attach_form().
 */
function nexteuropa_editorial_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // Only node entities are supported.
  $tracking_settings = _nexteuropa_editorial_wysiwyg_tracking_settings($entity);
  if (($entity_type == 'node') && $tracking_settings['is_activate']) {
    if (!isset($form['language'])) {
      // The form item containing the entity can change from an entity to
      // another. Then we set it like that to easy future treatment.
      $form['language'] = array(
        '#type' => 'value',
        '#value' => $langcode,
      );
    }
    $form['#validate'][] = '_nexteuropa_editorial_tracking_entity_validate';
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function nexteuropa_editorial_entity_view_alter(&$build, $type) {
  _nexteuropa_editorial_ckeditor_lite_view_alter($build, $type);
}
