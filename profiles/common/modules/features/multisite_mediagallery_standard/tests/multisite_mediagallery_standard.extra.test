<?php

/**
 * @file
 * Tests for multisite_mediagallery_standard.module.
 *
 * ECWeb MULTISITE Feature Test.
 */

/**
 * Define base class for testing the Multisite Media Gallery Standard feature.
 */
class MultisiteMediaGalleryStandardFeatureTest extends DrupalWebTestCase {
  protected $webUser;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Multisite Media Gallery Standard feature test',
      'description' => 'Test the Multisite Media Gallery Standard feature to ensure it works as intended.',
      'group' => 'Multisite Feature Test',
    );
  }

  /**
   * Configure the environment, enable the required modules.
   */
  public function setUp() {
    parent::setUp(array(
      'multisite_mediagallery_standard',
      'apachesolr',
    ));
  }

  /**
   * Check content type and fields.
   */
  public function testMediaGalleryInstallation() {
    // Checkout there is a content type called gallerymedia.
    $node_type = node_type_get_type('gallerymedia');
    $this->assertTrue($node_type, 'There is a Media Gallery content type.', 'API');

    // Checkout gallerymedia has a body field.
    $body = field_info_instance('node', 'body', 'gallerymedia');
    $this->assertTrue($body, 'Media Gallery content type has a body field.', 'API');

    // Checkout gallerymedia has a picture upload field.
    $picture = field_info_instance('node', 'field_picture_upload', 'gallerymedia');
    $this->assertTrue($picture, 'Media Gallery content type has a Picture Upload field.', 'API');

    // Checkout gallerymedia has a video upload field.
    $video = field_info_instance('node', 'field_video_upload', 'gallerymedia');
    $this->assertTrue($video, 'Media Gallery content type has a Video Upload field.', 'API');
  }

  /**
   * Verify that current user has no access to page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function mediaGalleryVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied.
    $this->drupalGet($url);
    $this->assertResponse(403, 'Not Allowed Access -> Expected Fail');
  }

  /**
   * Check the access to the content creation depending on the available roles.
   */
  public function testMediaGalleryAccess() {
    // Verify that anonymous users can't create gallery media nodes.
    $this->mediaGalleryVerifyNoAccess('node/add/gallerymedia');

    // Create a regular user and login.
    $this->webUser = $this->drupalCreateUser();
    $this->drupalLogin($this->webUser);
    // Verify that authenticated users can't create gallery media nodes.
    $this->mediaGalleryVerifyNoAccess('node/add/gallerymedia');

    // Create a user with permissions to create gallery media nodes and login.
    $this->webUser = $this->drupalCreateUser(array('create gallerymedia content'));
    $this->drupalLogin($this->webUser);
    // Verify that users with permission can create gallery media nodes.
    $this->drupalGet('node/add/gallerymedia');
    $this->assertResponse(200, 'Allowed Access -> Expected OK');
  }

  /**
   * Create a test node and check it.
   */
  public function testMediaGalleryCreate() {
    $this->webUser = $this->drupalCreateUser(array('create gallerymedia content'));
    $this->drupalLogin($this->webUser);
    $edit = array();
    $edit['title'] = 'Test Gallery';
    $edit["body[und][0][value]"] = $this->randomName(128);
    $this->drupalPost('node/add/gallerymedia', $edit, t('Save'));
    $this->assertText(t('Media Gallery @title has been created.', array('@title' => $edit['title'])), 'A Media Gallery test node has been successfully created', 'API');
  }

}
