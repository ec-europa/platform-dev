<?php

/**
 * @file
 * This file implements the hooks related to the likedislike feature.
 */

/**
 * Add the js file needed to enable like/dislike button.
 */
function likedislike_init() {
  drupal_add_js('http://ec.europa.eu/wel/like/js/likedislike.js', 'external');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function likedislike_form_likedislike_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module', 'likedislike') . '/scripts/form_script.js');
}

/**
 * Implements hook_block_info().
 */
function likedislike_block_info() {
  $blocks['likedislike'] = array(
    'info' => t('likedislike'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function likedislike_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'likedislike':
      $block['content'] = likedislike_contents();
      break;
  }
  return $block;
}

/**
 * Custom html block.
 */
function likedislike_contents() {
  $wid = variable_get('widget');
  switch ($wid) {
    case t('Like / Dislike with labels'):
      $wid_final = NULL;
      break;

    case t('Like / Dislike without labels - Thumbs only'):
      $wid_final = '"layout":"thumbs",';
      break;

    case t('Like ONLY with label'):
      $wid_final = '"type":"likeonly",';
      break;

    case t('Like ONLY without label - Thumb only'):
      $wid_final = '"type":"likeonly","layout":"thumbs",';
      break;

    default:
      $wid_final = NULL;
      break;
  }
  $url = variable_get('url');
  $url_address = variable_get('url_address');
  switch ($url) {
    case t('No URL specified - URL detected automatically'):
      $url_final = NULL;
      break;

    case t('No URL specified - URL detected automatically but without considering request parameters'):
      $url_final = '"url":"noparams",';
      break;

    case 'User specified URL':
      if ($url_address == "") {
        $url_final = NULL;
      }
      else {
        $url_final = '"url":"' . $url_address . '",';
      }
      break;

    default:
      $url_final = NULL;
      break;
  }
  $lan = variable_get('language');
  $language_selector = variable_get('language_selector');
  switch ($lan) {
    case t('From URL'):
      $lan_final = '"lang":"url"';
      break;

    case t('From HTML lang'):
      $lan_final = '"lang":"html-lang"';
      break;

    case t('From META http-equiv content-language'):
      $lan_final = '"lang":"http-equiv"';
      break;

    case t('From META name language'):
      $lan_final = '"lang":"meta-language"';
      break;

    case t('Language specified'):
      $lan_final = '"lang":"' . $language_selector . '"';
      break;

    default:
      $lan_final = '"lang":"url"';
      break;
  }
  return '<span class="like_dislike">{' . $wid_final . $url_final . $lan_final . '}</span>';
}

/**
 * Implements hook_menu().
 */
function likedislike_menu() {
  $items = array();
  $items['admin/config/likedislike'] = array(
    'title' => 'Like / Dislike module configuration page',
    'description' => 'Configuration for Like / Dislike widget',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('likedislike_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements configuration form().
 */
function likedislike_form($form, &$form_state) {
  $form['like_dislike'] = array(
    '#type' => 'fieldset',
    '#title' => t('Like & Dislike widget'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['like_dislike']['widget'] = array(
    '#type' => 'radios',
    '#default_value' => variable_get('widget', 'Like / Dislike with labels'),
    '#options' => drupal_map_assoc(array(
      0 => t('Like / Dislike with labels'),
      1 => t('Like / Dislike without labels - Thumbs only'),
      2 => t('Like ONLY with label'),
      3 => t('Like ONLY without label - Thumb only'),
    )),
    '#description' => t('Choose the widget you prefer.'),
    '#required' => TRUE,
  );

  $form['specify_url'] = array(
    '#type' => 'fieldset',
    '#title' => t('Specify URL'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['specify_url']['url'] = array(
    '#type' => 'radios',
    '#default_value' => variable_get('url', 'No URL specified - URL detected automatically'),
    '#options' => drupal_map_assoc(array(
      0 => t('No URL specified - URL detected automatically'),
      1 => t('No URL specified - URL detected automatically but without considering request parameters'),
      2 => t('User specified URL'),
    )),
    '#description' => t('By default, URL of an article is automatically detected by the button. Nevertheless, it is also possible to specify the URL of an article by using the parameter "url" (useful when several buttons are used on the same page).'),
    '#required' => TRUE,
  );

  $form['specify_url']['url_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Set a specific URL'),
    '#default_value' => variable_get('url_address', NULL),
    '#maxlength' => 255,
    '#description' => t('Please, introduce the specific URL in case you select the option "User specified URL". i.e. http://ec.europa.eu/index_en.htm'),
    '#required' => FALSE,
  );

  $form['language_detection'] = array(
    '#type' => 'fieldset',
    '#title' => t('Modify language detection'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['language_detection']['language'] = array(
    '#type' => 'radios',
    '#default_value' => variable_get('language', 'From URL'),
    '#options' => drupal_map_assoc(array(
      0 => t('From URL'),
      1 => t('From HTML lang'),
      2 => t('From META http-equiv content-language'),
      3 => t('From META name language'),
      4 => t('Language specified'),
    )),
    '#description' => t('In order to change the language detection you should
      use this options. If this parameter is not defined, the application
      tries to detect the language automatically from HTML or META tags.'),
    '#required' => TRUE,
  );
  global $language;
  $languages = language_list('enabled');
  $langs = array();
  foreach ($languages[1] as $lan) {
    $langs[$lan->language] = $lan->name;
  }
  $form['language_detection']['language_selector'] = array(
    '#type' => 'select',
    '#title' => t('Set a specific Language'),
    '#options' => $langs,
    '#default_value' => variable_get('language_selector', $language->language),
    '#description' => t('Please, select a specific language in case you select the option "Language specified"'),
  );
  return system_settings_form($form);
}
