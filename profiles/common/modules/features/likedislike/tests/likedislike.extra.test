<?php

/**
 * @file
 * Tests for likedislike.module.
 *
 * ECWeb MULTISITE Feature Test.
 */

/**
 * Defines a base class for testing the likedislike feature.
 */
class LikeDislikeFeatureTest extends DrupalWebTestCase {
  protected $webUser;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Like/Dislike feature test',
      'description' => 'Test the Like/Dislike feature to ensure it works as intended.',
      'group' => 'Multisite Feature Test',
    );
  }

  /**
   * Configure environment: declare modules, users, permissions...
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array('likedislike'));
  }

  /**
   * Verify that current user has no access to page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function likedislikeVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied.
    $this->drupalGet($url);
    $this->assertResponse(403, 'Expected -> Access Denied');
  }

  /**
   * Verify that current user has access to page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function likedislikeVerifyAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, 'Expected -> Access OK');

    $this->assertText(t('Like / Dislike with labels'), '"Like / Dislike with labels" parameter is available');
    $this->assertText(t('Like / Dislike without labels - Thumbs only'), '"Like / Dislike without labels - Thumbs only" parameter is available');
    $this->assertText(t('Like ONLY with label'), '"Like ONLY with label" parameter is available');
    $this->assertText(t('Like ONLY without label - Thumb only'), '"Like ONLY without label - Thumb only" parameter is available');

    $this->assertText(t('No URL specified - URL detected automatically'), '"No URL specified - URL detected automatically" parameter is available');
    $this->assertText(t('No URL specified - URL detected automatically but without considering request parameters'), '"No URL specified - URL detected automatically but without considering request parameters" parameter is available');
    $this->assertText(t('User specified URL'), '"User specified URL" parameter is available');

    $this->assertText(t('From URL'), '"From URL" parameter is available');
    $this->assertText(t('From HTML lang'), '"From HTML lang" parameter is available');
    $this->assertText(t('From META http-equiv content-language'), '"From META http-equiv content-language" parameter is available');
    $this->assertText(t('From META name language'), '"From META name language" parameter is available');
    $this->assertText(t('Language specified'), '"Language specified" parameter is available');
  }

  /**
   * Check the access to the moderation view and to the workbench by role.
   */
  public function testlikedislikeAccess() {
    // Verify that anonymous users can't access to the moderation view.
    $this->likedislikeVerifyNoAccess('admin/config/likedislike');

    // Create a regular user and login.
    $this->web_user = $this->drupalCreateUser();
    $this->drupalLogin($this->web_user);
    // Verify that access to the workbench moderation view.
    $this->likedislikeVerifyNoAccess('admin/config/likedislike');

    // Create a user to access to the moderation view and login.
    $this->web_user = $this->drupalCreateUser(array('administer site configuration', 'access administration pages'));
    $this->drupalLogin($this->web_user);
    // Verify that users can access to the workbench moderation view.
    $this->likedislikeVerifyAccess('admin/config/likedislike');
  }

}
