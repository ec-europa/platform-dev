<?php

/**
 * @file
 * Tests for PROJECTFEATURE_multisite_custom_error.module.
 *
 * ECWeb MULTISITE Feature Test.
 */

/**
 * Defines a base class for testing the Multisite Custom Error feature.
 */
class MultisiteCustomErrorFeatureTest extends DrupalWebTestCase {
  protected $webUser;
  protected $title;
  protected $description;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Multisite Custom Error feature test',
      'description' => 'Test the Multisite Custom Error feature to ensure it works as intended.',
      'group' => 'Multisite Core Features',
    );
  }

  /**
   * Configure environment: declare modules, users, permissions...
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array('customerror', 'multisite_custom_error'));
  }

  /**
   * Verify that current user has no access to page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteCustomErrorVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied.
    $this->drupalGet($url);
    $this->assertResponse(403, 'Expected -> Access Denied');
  }

  /**
   * Verify that current user has access to Site information page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteCustomErrorVerifySiteInformationAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, 'Expected -> Access OK');
    $this->assertFieldByName('site_403', 'customerror/403', 'There is a default 403 (access denied) page.');
    $this->assertFieldByName('site_404', 'customerror/404', 'There is a default 404 (not found) page.');
  }

  /**
   * Check the access to the 'Site information' configuration page.
   */
  public function testMultisiteCustomErrorSiteInformationAccess() {
    // Verify that anonymous users can't access to the Site information page.
    $this->multisiteCustomErrorVerifyNoAccess('admin/config/system/site-information');

    // Create a regular user and login.
    $this->webUser = $this->drupalCreateUser();
    $this->drupalLogin($this->webUser);
    // Verify that authenticated users can't access
    // to the Site information page.
    $this->multisiteCustomErrorVerifyNoAccess('admin/config/system/site-information');

    // Create a user with permissions to access
    // to the Site information page and login.
    $this->webUser = $this->drupalCreateUser(array('administer site configuration'));
    $this->drupalLogin($this->webUser);
    // Verify that users with permission can access
    // to the Site information page.
    $this->multisiteCustomErrorVerifySiteInformationAccess('admin/config/system/site-information');
  }

  /**
   * Verify that current user has access to page.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteCustomErrorVerifyConfigurationAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, 'Expected -> Access OK');

    // 403 ERROR PAGE SETTINGS.
    $this->assertText(t('403 Error Settings'), 'Creation of custom error page for 403 error is enabled.');
    $this->assertFieldById('edit-customerror-403-title', '', 'Ther is a "Title for 403" field.');
    $this->assertFieldByName('customerror_403', 'access denied', 'There is a "Description for 403" field.');

    // 404 ERROR PAGE SETTINGS.
    $this->assertText(t('404 Error Settings'), 'Creation of custom error page for 404 error is enabled.');
    $this->assertFieldById('edit-customerror-404-title', '', 'There is a "Title for 404".');
    $this->assertFieldByName('customerror_404', 'requested page not found', 'There is a "Description for 404" field.');
  }

  /**
   * Check the access to the 'Custom error' configuration page.
   */
  public function testMultisiteCustomErrorConfigurationAccess() {
    // Verify that anonymous users can't access
    // to the Custom Error configuration page.
    $this->multisiteCustomErrorVerifyNoAccess('admin/config/system/customerror');

    // Create a regular user and login.
    $this->webUser = $this->drupalCreateUser();
    $this->drupalLogin($this->webUser);
    // Verify that authenticated users can't access
    // to the Custom Error configuration page.
    $this->multisiteCustomErrorVerifyNoAccess('admin/config/system/customerror');

    // Create a user with permissions to access
    // to the Custom Error configuration page and login.
    $this->webUser = $this->drupalCreateUser(array('administer site configuration'));
    $this->drupalLogin($this->webUser);
    // Verify that users with permission can access
    // to the Custom Error configuration page.
    $this->multisiteCustomErrorVerifyConfigurationAccess('admin/config/system/customerror');
  }

  /**
   * Verify that 403 error page is working.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteCustomErrorPage403Access($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertText(t('access denied'), 'Acces denied. Custom 403 error page is working.');
  }

  /**
   * Check the access to the 403 error page.
   */
  public function testCustomErrorPage403() {
    $this->multisiteCustomErrorPage403Access('admin');
  }

  /**
   * Verify that 404 error page is working.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteCustomErrorPage404Access($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertText(t('requested page not found'), 'Requested page not found. Custom 404 error page is working.');
  }

  /**
   * Check the access to the 404 error page.
   */
  public function testCustomErrorPage404() {
    $this->multisiteCustomErrorPage404Access('notfound');
  }

  /**
   * Verify that 403 error page is working.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteCustomErrorPage403Test($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertText($this->title, 'Title found. New custom 403 error page is working.');
    $this->assertText($this->description, 'Description found. New custom 403 error page is working.');
  }

  /**
   * Edit 403 error message.
   */
  public function testCreatePage403() {
    // Create a user with permissions to access
    // to the Custom Error configuration page and login.
    $this->webUser = $this->drupalCreateUser(array('administer site configuration'));
    $this->drupalLogin($this->webUser);

    $this->title = $this->randomName(10);
    $this->description = $this->randomName(100);

    // Edit 403 error message.
    $edit = array();
    $edit['customerror_403_title'] = $this->title;
    $edit["customerror_403"] = $this->description;
    $this->drupalPost('admin/config/system/customerror', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));

    $this->drupalLogout();

    $this->multisiteCustomErrorPage403Test('admin');
  }

  /**
   * Verify that 404 error page is working.
   *
   * @param string $url
   *   URL to verify.
   */
  public function multisiteCustomErrorPage404Test($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertText($this->title, 'Title found. New custom 404 error page is working.');
    $this->assertText($this->description, 'Description found. New custom 404 error page is working.');
  }

  /**
   * Edit 404 error message.
   */
  public function testCreatePage404() {
    // Create a user with permissions to access
    // to the Custom Error configuration page and login.
    $this->webUser = $this->drupalCreateUser(array('administer site configuration'));
    $this->drupalLogin($this->webUser);

    $this->title = $this->randomName(10);
    $this->description = $this->randomName(100);

    // Edit 404 error message.
    $edit = array();
    $edit['customerror_404_title'] = $this->title;
    $edit["customerror_404"] = $this->description;
    $this->drupalPost('admin/config/system/customerror', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));

    $this->multisiteCustomErrorPage404Test('notfound');
  }

}
