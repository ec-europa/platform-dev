<?php

/**
 * @file
 * Code for the communities feature.
 */

include_once "communities.install.inc";

/**
 * Implements hook_requirements().
 */
function communities_requirements() {
  $requirements = [];
  if (module_exists('nexteuropa_communities')) {
    $t = get_t();
    $args = array('%module' => 'Nexteuropa Communities');
    $requirements['communities_module_conflict'] = array(
      'title' => 'Communities',
      'description' => $t('This module is not compatible with %module. Please disable that module first.', $args),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

/**
 * Implements hook_disable().
 */
function communities_disable() {
  // SolR configuration add bundle.
  multisite_drupal_toolbox_config_solr_bundle('community', 'delete');
  drupal_set_message(t('Communities feature is now disable on your site.'));
}

/**
 * Implements hook_enable().
 */
function communities_enable() {
  // SolR configuration add bundle.
  if (module_exists('apachesolr')) {
    db_insert('apachesolr_index_bundles')->fields(array(
      'env_id' => 'solr',
      'entity_type' => 'node',
      'bundle' => 'community',
    ))->execute();
  }

  drupal_set_message(t('Communities feature is now active on your site.'));
}

/**
 * Implements hook_install().
 */
function communities_install() {

  global $_communities_fid_default_community_image;
  // Affect a file image to the default image of the field thumbnail
  // of the content type community.
  // File creation.
  $file = new stdClass();
  $file->fid = NULL;
  $file->uri = "public://default_images/community_default.png";
  $file->filename = "community_default.png";
  $file->filemime = file_get_mimetype($file->uri);
  $file->uid = 1;
  $file->status = FILE_STATUS_PERMANENT;
  $f = file_save($file);
  $_communities_fid_default_community_image = $f->fid;

  // Enable the og ontext negociation 'multisite_communities'.
  communities_enable_og_context_negociation();

  // Use soft config for community comment form location.
  multisite_config_service('comment')->setReplyFormCommentForContentType('community', 1);
  // Use soft config to allow comments from authenticated users.
  multisite_config_service('comment')->setDefaultCommentForContentType('community', 'closed');
  // Use soft config to allow community comment threading.
  multisite_config_service('comment')->setThreadingCommentForContentType('community', 1);
  // Use soft config for community comment title.
  multisite_config_service('comment')->setTitleCommentForContentType('community', 1);
  // Use soft config for preview community comment.
  multisite_config_service('comment')->setPreviewCommentForContentType('community', 1);
  // Use soft config to set number of comments per page.
  multisite_config_service('comment')->setNumberCommentForContentType('community', '50');
  // Use soft config for anonymous comments in communities.
  multisite_config_service('comment')->setAnonymousCommentForContentType('community', 0);

}

/**
 * Enable the og context negociation 'multisite_communities'.
 */
function communities_update_7202() {
  communities_enable_og_context_negociation();
}

/**
 * Set new value for communities feature in database.
 *
 * Variables from comments settings must be removed from hard config.
 * Recreate the value of the feature in database without the variable.
 */
function communities_update_7203() {
  module_load_include('inc', 'features', "features.export");
  features_set_signature('communities', 'variable');
}
