<?php
/**
 * @file
 * Code for the communities feature.
 */

include_once 'communities.features.inc';

/**
 * Implements hook_views_pre_render().
 */
function communities_views_pre_render(&$view) {

  if ($view->name == 'communities_directory' || $view->name == 'communities_directory_my') {
    // Add picture for private communities.
    foreach ($view->result as $row) {
      if (isset($row->field_group_access[0]['raw']['value']) && $row->field_group_access[0]['raw']['value'] == 1) {
        // Private commmunity.
        if (isset($row->field_body[0]['rendered']['#markup'])) {
          $row->field_body[0]['rendered']['#markup'] = '<i class="icon-lock"></i> ' . $row->field_body[0]['rendered']['#markup'];
        }
        else {
          $row->field_body[0]['rendered']['#markup'] = '<i class="icon-lock"></i> ';
        }
      }

      // If the ecas module is enabled, alter the default register links
      // to redirect to the ecas login page.
      if (module_exists('ecas') && !user_is_logged_in()) {
        if (isset($row->field_group_group[0]['rendered']['#href'])) {
          $row->field_group_group[0]['rendered']['#href'] = "ecas";
        }
      }
    }
  }

  if ($view->name == "communities_members") {
    $og = og_context();
    if ($og) {
      $gid = $og['gid'];
      if (!og_is_member('node', $gid)) {
        $view->result = array();
      }
    }
  }
}

/**
 * Implements hook_init().
 */
function communities_init() {
  drupal_add_css(drupal_get_path('module', 'communities') . '/communities.css');
}

/**
 * Helper function to detect group name in a path.
 */
function _communities_get_group_name_from_path($path) {
  $group_name = FALSE;
  // Assuming a path pattern of
  // "node/[node:id]".
  $node_patt = '/(node\/)([0-9]+)/';
  // Assuming a path pattern of
  // "community/[node:og_group_ref]/articles/[node:title]".
  $patt = '/^community\/([^\/]+)(\/.*)?$/';
  if (preg_match($node_patt, $path, $matches)) {
    $path = drupal_lookup_path('alias', $path);
  }
  if (preg_match($patt, $path, $matches)) {
    $group_name = $matches[1];
  }

  return $group_name;
}

/**
 * Helper function to create node aliases.
 */
function _communities_create_alias($node, $op) {
  $checked_url = 'update' != $op ? pathauto_pattern_load_by_entity('node', $node->type, $node->language) : $node->path['alias'];
  $group_name = _communities_get_group_name_from_path($checked_url);

  // Generate one alias for each group linked in the node.
  if ($group_name) {
    $node_source = 'update' != $op ? 'node/' . $node->nid : $node->path['source'];
    $node_language = 'update' != $op ? $node->language : $node->path['language'];

    // For each linked group, leave only that group alone
    // linked in the node and obtain the node alias.
    module_load_include('inc', 'pathauto');
    $og_group_ref = $node->og_group_ref[LANGUAGE_NONE];

    foreach ($og_group_ref as $v) {
      $node->og_group_ref[LANGUAGE_NONE] = array($v);
      // We cannot use 'pathauto_create_alias' to save the path alias
      // because $existing_path is not correctly loaded (we have multiple
      // alias for one source and the last created alias is loaded as
      // $existing_path,see pathauto_create_alias).
      // So 'pathauto_create_alias' is used to build the alias and we save it
      // using 'path_save'.
      $new_path = pathauto_create_alias('node', 'return', $node_source, array('node' => $node), $node->type, $node->language);

      if ($new_path) {
        if (is_string($new_path)) {
          $new_paths[] = $new_path;
        }
        elseif (is_array($new_path) && isset($new_path['alias'])) {
          $new_paths[] = $new_path['alias'];
        }
      }
    }
    $node->og_group_ref[LANGUAGE_NONE] = $og_group_ref;

    // We cannot respect update action (see pathauto_update_action)
    // due to multiples alias per node, so all aliases are deleted and resaved
    // (avoid outdated alias in case of it changed).
    path_delete(array('source' => $node_source));
    if (isset($new_paths)) {
      // Save the aliases obtained.
      $node->path['pathauto'] = FALSE;
      $path = array(
        'pathauto' => FALSE,
        'source' => $node_source,
        'language' => $node_language,
      );
      foreach ($new_paths as $p) {
        $path['pid'] = '';
        $path['alias'] = $p;
        path_save($path);
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function communities_node_insert($node) {
  if (isset($node->og_group_ref[LANGUAGE_NONE]) && is_array($node->og_group_ref[LANGUAGE_NONE])) {
    _communities_create_alias($node, 'insert');
  }
}

/**
 * Implements hook_node_update().
 */
function communities_node_update($node) {
  if (isset($node->og_group_ref[LANGUAGE_NONE]) && is_array($node->og_group_ref[LANGUAGE_NONE])) {
    _communities_create_alias($node, 'update');
  }
}

/**
 * Implements hook_pathauto().
 */
function communities_pathauto($op) {
  $settings = new stdClass();
  $settings->module = 'communities';
  $settings->groupheader = t('Communities contents paths');
  $settings->patterndescr = t('Default path pattern');
  $settings->patterndefault = pathauto_pattern_load_by_entity('node', 'article', LANGUAGE_NONE);
  $settings->token_type = 'node';
  $settings->batch_update_callback = 'communities_pathauto_bulkupdate';
  return $settings;
}

/**
 * Implements hook_pathauto_bulkupdate().
 */
function communities_pathauto_bulkupdate() {
  // Find all node ids for contents (i.e. not communities).
  $query = db_select('node', 'n');
  $query
    ->condition('n.type', 'community', '<>')
    ->fields('n', array('nid'));
  $results = $query->execute()->fetchCol();
  $count = 0;
  foreach ($results as $nid) {
    $node = node_load($nid);
    if (isset($node->og_group_ref[LANGUAGE_NONE]) && is_array($node->og_group_ref[LANGUAGE_NONE])) {
      _communities_create_alias($node, 'bulkupdate');
    }
    $count++;
  }
  drupal_set_message($count . ' community contents nodes were updated.');
}

/**
 * Implements hook_url_outbound_alter().
 */
function communities_url_outbound_alter(&$path, &$options, $original_path) {
  $new_path = _communities_get_url_in_group($path, $original_path);
  if ($new_path) {
    $path = $new_path;
    $options['alias'] = $path;
  }
}

/**
 * Helper function to find proper node alias for a group.
 */
function _communities_get_url_in_group($path, $original_path) {
  static $paths_group, $paths, $gid, $group_name, $group_nid, $group_path;

  if (FALSE !== strpos($original_path, 'node/')) {
    if (!isset($paths[$original_path])) {
      $paths[$original_path] = NULL;

      if (!isset($group_name)) {
        // Get the current group from the url.
        $group_name = _communities_get_group_name_from_path(request_path());
      }
      if (!$group_name) {
        // Give og_context a chance and get the current group.
        $group_name = group_name_to_arg();
        if ('none' == $group_name) {
          $group_name = '';
        }
      }
      if ($group_name) {
        if (!isset($group_nid)) {
          $group_nid = @group_name_load($group_name);
        }

        if (!isset($gid)) {
          $gid = NULL;
          $context = og_context();
          if (isset($context['gid'])) {
            $gid = $context['gid'];
          }
        }
        if ($gid) {
          if ($group_nid && $group_nid == $gid) {
            if (!isset($group_path)) {
              // Get the group path.
              $group_path = NULL;
              $group_node = node_load($gid);
              if ($group_node && isset($group_node->path['alias'])) {
                $group_path = $group_node->path['alias'];
              }
            }
            if ($group_path) {
              // Get all the aliases for this $original_path.
              $select = db_select('url_alias');
              $select->condition('source', $original_path);
              $paths[$original_path] = $select->fields('url_alias', array('pid', 'alias'))->execute()->fetchAllKeyed(0, 1);
            }
          }
        }
      }
    }
    // If multiple aliases we need to choose
    // the appropiate one for the current group.
    if (is_array($paths[$original_path]) && count($paths[$original_path]) > 1) {
      if (!isset($paths_group[$group_path][$original_path])) {
        $paths_group[$group_path][$original_path] = NULL;
        // Find the node alias that matches with the current group path.
        foreach ($paths[$original_path] as $pid => $alias) {
          if (0 === strpos($alias, $group_path)) {
            $paths_group[$group_path][$original_path] = $alias;
            break;
          }
        }
      }
      // If there is a candidate node alias for the current group,
      // force its use.
      if ($paths_group[$group_path][$original_path]) {
        $new_path = $paths_group[$group_path][$original_path];
      }
    }
  }

  return isset($new_path) ? $new_path : FALSE;
}


/**
 * Returns the sanitized group title or 'none' if there is no group context.
 */
function group_name_to_arg($arg = NULL) {
  module_load_include('inc', 'pathauto', 'pathauto');
  $context = og_context();
  if (empty($context) && is_numeric($arg)) {
    $group = node_load($arg);
    if (og_is_group('node', $group->nid)) {
      $context = og_context('node', $group);
    }
  }
  if (isset($context['gid'])) {
    $node = node_load($context['gid']);
    return pathauto_cleanstring($node->title);
  }
  else {
    return NULL;
  }
}


/**
 * Returns the ID of the Community node corresponding to the given group name.
 *
 * @param string $arg
 *   The group name, or 'none' if no ID should be returned.
 *
 * @return int | NULL
 *   The node ID of the Community node,
 *   or the integer 0 if no group name was given,
 *   or NULL if the Community node could not be derived from the path alias.
 */
function group_name_load($arg) {
  global $language;

  if ($arg == 'none') {
    return 0;
  }

  // Get real path to get node id.
  $alias = drupal_get_normal_path("community/" . $arg, 'en');

  if ($alias != "community/" . $arg) {
    // If the url is an alias.
    $param = explode("/", $alias);
    $group = node_load($param[1]);
    // Load community.
    return $group->nid;
  }

  return;
  // No og found in the url to determine the og context.
}


/**
 * Implements hook_menu().
 */
function communities_menu() {
  $items['community/%group_name/view'] = array(
    'title' => 'Home page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'page callback' => '_communities_menu_redirect',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => -10,
  );

  $items['community/%group_name/article'] = array(
    'title' => 'Articles',
    'page callback' => 'views_page',
    'page arguments' => array('articles_list', 'page', 1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'menu-communities-menu',
    'weight' => 1,
  );
  return $items;
}

/**
 * Redirects to the right place depending the last argument.
 */
function _communities_menu_redirect($arg1) {
  // Sometimes the parameter contains a language suffix, remove it.
  $suffix_clean = preg_replace('/\\_[^.\\s]{2}$/', '', $arg1);
  drupal_goto('community/' . group_name_to_arg($suffix_clean));
}

/**
 * Dynamically change menu item title.
 */
function _communities_title_item($arg) {
  $n = db_select('og', 'og')
    ->fields('og', array('etid'))
    ->condition('gid', $arg, '=')
    ->condition('entity_type', 'node', '=')
    ->execute()
    ->fetchAssoc();
  if (isset($n['etid'])) {
    $node = node_load($n['etid']);
    return $node->title . " homepage";
  }
  else {
    return NULL;
  }
}


/**
 * Implements hook_block_view_alter().
 */
function communities_block_view_alter(&$data, $block) {
  if ($block->delta == 'menu-communities-menu') {
    $context  = og_context();
    if (isset($context['gid'])) {
      $node = node_load($context['gid']);
      $data['subject'] = $node->title;
    }
    else {
      $data['content'] = array();
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * When a user request a membership to a community,
 * he's request is in state 'pending'.
 * Since he's request is still in pending state, when he's view the homepage
 * of this community a message is display to inform him.
 */
function communities_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'community') {
    $context = $node->nid;
    $check_pending_state = og_is_member('node', $context, 'user', NULL, array(OG_STATE_PENDING));
    if ($check_pending_state) {
      drupal_set_message(t("Your membership to this group is pending and waiting for community manager's approval"));
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function communities_form_community_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide group field of the group content.
  $form[OG_GROUP_FIELD]['#access'] = FALSE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function communities_form_node_form_alter(&$form, &$form_state, $form_id) {
  // If it's a node edit form.
  $context = og_context();
  // We are not in a og context.
  if (!isset($context['gid'])) {
    if (isset($form[OG_CONTENT_ACCESS_FIELD])) {
      // Hide highlighted field.
      $form['field_highlighted']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_views_post_execute().
 *
 * Correct the subsitution of "OG membership: Group ID title"
 * and add subtitution for title cleaned by pathauto.
 */
function communities_views_post_execute(&$view) {
  if (isset($view->argument['gid'])) {
    $handler = $view->argument['gid'];
    if ($handler->table == 'og_membership' && $handler->field == 'gid') {
      // Postiton 0 = argument 1 (%1, !1)...
      $position = $handler->position + 1;
      // Not use node_load for performance reason.
      $title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $handler->argument))->fetchField();
      if ($title) {
        module_load_include('inc', 'pathauto', 'pathauto');
        $view->build_info['substitutions']['%' . $position] = check_plain($title);
        // New token (not documented on views UI).
        $view->build_info['substitutions']['#' . $position] = pathauto_cleanstring($title);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function communities_node_delete($node) {
  if ($node->type == 'community') {
    // Force field_cache clearing.
    // Fix bug : error during a login user
    // who was member of a deleted community.
    field_cache_clear();
  }
}

/**
 * Implements hook_node_view_alter().
 */
function communities_node_view_alter(&$build) {
  if (module_exists('ecas') && !user_is_logged_in()) {
    // If the ecas module is enabled, alter the default register links
    // to redirect to the ecas login page.
    if (isset($build['group_group'][0]['#href'])) {
      $build['group_group'][0]['#href'] = 'ecas';
    }
  }
}

/**
 * Implements hook_og_permission().
 */
function communities_og_permission() {
  return array(
    'displays-community-member' => array(
      'title' => t('Displays information of a community'),
      'description' => t("Displays information of a community if a user is a member of it"),
      // Determine to which role to limit the permission.
      'roles' => array(OG_AUTHENTICATED_ROLE),
      // Determine to which roles the permissions will be enabled by default.
      'default role' => array(OG_AUTHENTICATED_ROLE),
    ),
  );
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function communities_og_context_negotiation_info() {
  $providers = array();

  $providers['multisite_communities'] = array(
    'name' => t('Multisite Communities'),
    'description' => t("Select group context for any url that start with 'community'"),
    'callback' => 'communities_context_handler',
    'menu path' => array('community/%'),
  );

  return $providers;
}

/**
 * Context handler; Get groups from events.
 *
 * @return array
 *   OG context
 */
function communities_context_handler() {
  global $language;

  $keyword = 'community';

  // Remove langcode on URL according the language negotiation type used.
  if (language_negotiation_get_any('nexteuropa_multilingual_url_suffix')) {
    $path = nexteuropa_multilingual_language_negotiation_split_suffix(request_path(), [$language]);
  }
  elseif (defined('MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX') && language_negotiation_get_any(MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX)) {
    $path = language_url_split_suffix(request_path(), [$language]);
  }
  elseif (language_negotiation_get_any(LOCALE_LANGUAGE_NEGOTIATION_URL)) {
    $path = language_url_split_prefix(request_path(), [$language]);
  }
  else {
    $path = [FALSE, request_path()];
  }

  $path_args = explode('/', $path[1]);

  // Look for the community keyword in the path.
  if ($path_args[0] === $keyword) {
    $community_path = drupal_lookup_path('source', $path_args[0] . '/' . $path_args[1], $language->language);

    // If no path was found, then it's not a community in particular.
    if ($community_path !== FALSE) {
      $community_path = explode('/', $community_path);

      // Check that the node acts as a group.
      $node = node_load($community_path[1]);

      if (og_is_group('node', $node)) {
        return [
          'node' => [
            $node->nid,
          ],
        ];
      }
    }
  }
  return [];
}
