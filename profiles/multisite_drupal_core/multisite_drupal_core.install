<?php
/**
 * @file
 * Multisite Drupal Core installation profile.
 */

/**
 * Implements hook_install().
 */
function multisite_drupal_core_install() {
  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'bartik');
  $admin_theme = 'seven';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array(
    'module',
    'delta',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'cache',
  ));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $t = get_t();
  $types = array(
    array(
      'type' => 'page',
      'name' => $t('Basic page'),
      'base' => 'node_content',
      'description' => $t("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => $t('Article'),
      'base' => 'node_content',
      'description' => $t('Use <em>articles</em> for time-sensitive content.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Enable user picture support and set the default to a square thumbnail
  // option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Create a default role for site administrators, with all available
  // permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => $t('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');

  $contributor_role = new stdClass();
  $contributor_role->name = 'contributor';
  user_role_save($contributor_role);

  $editor_role = new stdClass();
  $editor_role->name = 'editor';
  user_role_save($editor_role);

  // Add dummy terms in 'tags' vocabulary.
  $vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  $term = new stdClass();
  $term->name = "sport";
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);

  $term = new stdClass();
  $term->name = "economic";
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);

  // Grant permissions for contributors.
  user_role_grant_permissions($contributor_role->rid, array(
    'access workbench',
    'create article content',
    'delete own article content',
    'edit own article content',
    'moderate content from draft to needs_review',
    'moderate content from needs_review to draft',
    'revert revisions',
    'use workbench_moderation my drafts tab',
    'use workbench_moderation needs review tab',
    'view all unpublished content',
    'view moderation history',
    'view moderation messages',
    'view own unpublished content',
    'view revisions',
  ));

  // Grant permissions for authenticated users.
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access PDF version',
    'access print',
    'access site-wide contact form',
    'access user contact forms',
    'access user profiles',
    'access workbench',
    'use text format full_html',
    'view moderation history',
    'view moderation messages',
    'view own unpublished content',
    'view revisions',
  ));

  // Grant permissions for administrators.
  user_role_revoke_permissions($admin_role->rid, array(
    'administer features',
    'administer modules',
    'administer software updates',
    'manage features',
    'use PHP to import nodes',
  ));

  // Grant permissions for anonymous users.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access PDF version',
    'access print',
    'access site-wide contact form',
    'access user contact forms',
    'access user profiles',
    'post comments',
    'search content',
    'use advanced search',
  ));

  // Grant permissions for editors.
  user_role_grant_permissions($editor_role->rid, array(
    'create article content',
    'delete any article content',
    'delete own article content',
    'delete revisions',
    'edit any article content',
    'edit own article content',
    'export nodes',
    'moderate content from draft to needs_review',
    'moderate content from needs_review to draft',
    'moderate content from needs_review to published',
    'moderate content from needs_review to validated',
    'moderate content from published to archived',
    'moderate content from validated to published',
    'revert revisions',
    'use workbench_moderation my drafts tab',
    'use workbench_moderation needs review tab',
    'view all unpublished content',
    'view own unpublished content',
  ));

  // Define the theme used.
  $themes = array(
    // Our CCE theme is the default theme.
    'theme_default' => 'ec_resp',
    'admin_theme' => 'seven',
  );
  theme_enable($themes);

  foreach ($themes as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  // Disable all Solr environments for the remainder of this request. We are
  // going to create some files, and need to prevent the apachesolr module from
  // trying to update the Solr indexes when hook_entity_save() fires.
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/NEXTEUROPA-3659
  $environments = &drupal_static('apachesolr_load_all_environments');
  $environments = array();

  // Set default images.
  $theme_path = drupal_get_path('theme', 'ec_resp');
  $default_images = array(
    'user_picture_default' => 'user_default.png',
    'empty_gallery_default' => 'empty_gallery.png',
  );
  foreach ($default_images as $variable => $default_image) {
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = "public://default_images/" . $default_image;
    $file->filename = $default_image;
    $file->filemime = file_get_mimetype($file->uri);
    $file->uid = 1;
    $file->status = FILE_STATUS_PERMANENT;
    $f = file_save($file);
    variable_set($variable, $file->uri);
  }

  // Disable the Workbench block.
  db_update('block')
    ->fields(array('region' => '-1'))
    ->condition('module', 'workbench', '=')
    ->condition('delta', 'block', '=')
    ->execute();

  // Add login link to the user menu.
  $options = array();
  $options['attributes']['title'] = $t('Login');
  $options['attributes']['class'][] = 'btn';
  $options['attributes']['class'][] = 'btn-default';
  $options['attributes']['data-image'] = 'log-in';
  $options['attributes']['data-toggle'] = 'tooltip';
  $options['attributes']['data-placement'] = 'bottom';
  $options['attributes']['data-container'] = 'body';

  $item = array(
    'link_path' => 'user/login',
    'link_title' => $t('Login'),
    'menu_name' => 'user-menu',
    'options' => $options,
  );
  menu_link_save($item);

  // Add workbench link to the user menu.
  $options = array();
  $options['attributes']['title'] = $t('My workbench');
  $options['attributes']['class'][] = 'btn';
  $options['attributes']['class'][] = 'btn-info';
  $options['attributes']['data-image'] = 'list-alt';
  $options['attributes']['data-display-title'] = 0;
  $options['attributes']['data-toggle'] = 'tooltip';
  $options['attributes']['data-placement'] = 'bottom';
  $options['attributes']['data-container'] = 'body';

  $item = array(
    'link_path' => 'admin/workbench',
    'link_title' => $t('My workbench'),
    'menu_name' => 'user-menu',
    'weight' => '-30',
    'options' => $options,
  );
  menu_link_save($item);

  // Add search links to the main menu.
  $item = array(
    'link_path' => 'search/site',
    'link_title' => $t('Search'),
    'menu_name' => 'main-menu',
    'weight' => '19999',
  );
  menu_link_save($item);

  // Update home link in the main menu.
  $options = array();
  $options['attributes']['data-display-title'] = 0;
  $options['attributes']['data-image'] = 'home';

  db_update('menu_links')
    ->fields(array('options' => serialize($options), 'weight' => '-50'))
    ->condition('link_title', 'Home')
    ->condition('menu_name', 'main-menu')
    ->execute();

  // At the end of the installation cron will be run. During cron an error
  // might occur in the apachesolr_multisitesearch module when it tries to
  // update the solr metadata for servers that may not be configured, or may
  // not be reachable from the environment where the site is being installed.
  // We can work around it by tricking the module into thinking it has already
  // performed its updates.
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/NEXTEUROPA-3659
  global $conf;
  $conf['apachesolr_multisitesearch_last_metadata_fetch'] = REQUEST_TIME;
  $conf['apachesolr_multisitesearch_last_metadata_update'] = REQUEST_TIME;

}
