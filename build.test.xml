<?xml version="1.0" encoding="UTF-8" ?>

<project name="NextEuropa" default="help">

    <!-- Install the platform. -->
    <target name="install-platform" description="Install the platform.">
        <drush
            command="site-install"
            assume="yes"
            root="${platform.build.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="db-url" value="${drupal.db.url}"/>
            <option name="site-name" value="${platform.site.name}"/>
            <option name="account-name" value="${drupal.admin.username}"/>
            <option name="account-pass" value="${drupal.admin.password}"/>
            <option name="account-mail" value="${drupal.admin.email}"/>
            <param>${platform.profile.name}</param>
            <!-- Prevent e-mails from being sent during the installation. -->
            <param>install_configure_form.update_status_module='array(FALSE,FALSE)'</param>
            <!-- Setup default theme. -->
            <param>cce_basic_config_profile_theme_default_form.theme_default=${platform.site.theme_default}</param>
        </drush>

		<!-- Rebuild node access after site installation -->
        <phingcall target="rebuild-node-access" />
    </target>

    <!-- Set up PHP CodeSniffer. -->
    <target name="setup-php-codesniffer" description="Generate the configuration file for PHP CodeSniffer.">
        <if>
            <available file="${phpcs.config}" type="file" property="phpcs.config.available" />
            <then>
                <echo message="Deleting existing PHP Codesniffer default configuration file." />
                <delete file="${phpcs.config}" failonerror="false" />
            </then>
        </if>
        <if>
            <available file="${phpcs.global.config}" type="file" property="phpcs.global.config.available" />
            <then>
                <echo message="Deleting existing PHP Codesniffer global configuration file." />
                <delete file="${phpcs.global.config}" failonerror="false" />
            </then>
        </if>
        <phpcodesnifferconfiguration
            configFile="${phpcs.config}"
            extensions="${phpcs.extensions}"
            files="${phpcs.files}"
            globalConfig="${phpcs.global.config}"
            ignorePatterns="${phpcs.ignore}"
            installedPaths="${phpcs.installed.paths}"
            ignoreWarnings = "${phpcs.ignore.warnings}"
            report="${phpcs.report}"
            showProgress="${phpcs.progress}"
            showSniffCodes="${phpcs.sniffcodes}"
            standards="${phpcs.standards}"
        />
    </target>

    <!-- Set up Behat. -->
    <target name="setup-behat">
        <if>
            <isset property="env.FLICKR_KEY" />
            <then>
                <property name="flickr.key" value="${env.FLICKR_KEY}" override="true" />
            </then>
        </if>
        <if>
            <isset property="env.FLICKR_SECRET" />
            <then>
                <property name="flickr.secret" value="${env.FLICKR_SECRET}" override="true" />
            </then>
        </if>
        <copy todir="${behat.dir}" overwrite="true">
            <fileset dir="${behat.dir}" casesensitive="yes">
                <include name="*.yml.dist"/>
            </fileset>
            <filterchain>
                <replacetokens begintoken="{{ " endtoken=" }}">
                    <token key="behat.base_url" value="${behat.base_url}" />
                    <token key="behat.wd_host.url" value="${behat.wd_host.url}" />
                    <token key="behat.browser.name" value="${behat.browser.name}" />
                    <token key="platform.build.dir" value="${platform.build.dir}" />
                    <token key="behat.subcontexts.path" value="${behat.subcontexts.path}" />
                    <token key="flickr.key" value="${flickr.key}" />
                    <token key="flickr.secret" value="${flickr.secret}" />
                    <token key="drush.bin" value="${drush.bin}" />
                    <token key="drush.db.dump" value="${drush.db.dump}" />
                    <token key="behat.formatter.name" value="${behat.formatter.name}" />
                    <token key="integration.server.port" value="${integration.server.port}" />
                    <token key="varnish.server.port" value="${varnish.server.port}" />
                </replacetokens>
            </filterchain>
            <mapper type="glob" from="*.yml.dist" to="*.yml" />
        </copy>
        <symlink link="${phing.project.build.dir}" overwrite="true">
            <fileset dir="${behat.dir}" casesensitive="yes">
                <include name="*.yml"/>
            </fileset>
        </symlink>
        <symlink link="${phing.project.build.dir}/features" target="../tests/features" />
        <symlink link="${phing.project.build.dir}/tests" target="../tests" />
        <symlink link="bin/behat" target="../${phing.project.build.dir}/vendor/bin/behat" overwrite="true"/>
    </target>

    <!-- Set up Behat balancer. -->
    <target name="setup-behat-balancer">
        <behat:balancer
            containers="${behat.load_balancer.containers}"
            root="${behat.load_balancer.root}"
            destination="${behat.load_balancer.destination}"
            import="${behat.load_balancer.import}"
        />
    </target>

    <!-- Run Behat tests. -->
    <target name="behat" description="Run Behat tests.">
        <foreach param="filename" absparam="config" target="behat-suite">
          <fileset dir="${behat.dir}">
            <include name="*.yml"/>
          </fileset>
        </foreach>
    </target>

    <target name="behat-suite" description="Run Behat tests suite.">
        <behat
            executable="${behat.bin}"
            config="${config}"
            strict="${behat.options.strict}"
            verbose="${behat.options.verbosity}"
        />
    </target>

    <!-- Set up PHPUnit. -->
    <target name="setup-phpunit">
        <copy todir="${phpunit.dir}" overwrite="true">
            <fileset dir="${phpunit.dir}" casesensitive="yes">
                <include name="*.xml.dist"/>
            </fileset>
            <filterchain>
                <replacetokens begintoken="{{ " endtoken=" }}">
                    <token key="phpunit.base_url" value="${phpunit.base_url}" />
                    <token key="platform.build.dir" value="${platform.build.dir}" />
                    <token key="phpunit.dir" value="${phpunit.dir}" />
                </replacetokens>
            </filterchain>
            <mapper type="glob" from="*.xml.dist" to="*.xml" />
        </copy>
        <symlink link="${phing.project.build.dir}" overwrite="true">
            <fileset dir="${phpunit.dir}" casesensitive="yes">
                <include name="*.yml"/>
            </fileset>
        </symlink>
        <symlink link="${phing.project.build.dir}/tests" target="../tests" />
        <symlink link="bin/phpunit" target="../${phing.project.build.dir}/vendor/bin/phpunit" overwrite="true"/>
    </target>

    <!-- Rebuild node access. -->
    <target name="rebuild-node-access">
        <drush
            command="php-eval"
            assume="yes"
            root="${platform.build.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <param>"node_access_rebuild()"</param>
        </drush>
    </target>
</project>
