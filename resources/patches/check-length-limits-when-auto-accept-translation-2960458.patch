diff --git a/entity/tmgmt.entity.job_item.inc b/entity/tmgmt.entity.job_item.inc
index b1e7114..5f1a083 100644
--- a/entity/tmgmt.entity.job_item.inc
+++ b/entity/tmgmt.entity.job_item.inc
@@ -411,11 +411,141 @@ class TMGMTJobItem extends Entity {
     $return = $this->setState(TMGMT_JOB_ITEM_STATE_REVIEW, $message, $variables, $type);
     // Auto accept the trganslation if the translator is configured for it.
     if ($this->getTranslator()->getSetting('auto_accept')) {
+      $this->validateFieldMaxLength($this->data);
       $this->acceptTranslation();
     }
     return $return;
   }
 
+  /**
+   * Validate each item field against its default max length allowed.
+   * This way it avoids exception while saving on the database.
+   * "File import failed with the following message: SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'field_teste_value'"
+   *
+   * @param $data
+   * @throws TMGMTException
+   */
+  private function validateFieldMaxLength($data) {
+
+    foreach ($data as $field_name => $field_data) {
+      $field_info = field_info_field($field_name);
+
+      // Skip fields type "text_with_summary" which the column type is "longtext/bg", such as body field..
+      if ($field_info !== NULL) {
+        $max_allowed_length = $this->fieldSettingsLength($field_info);
+        $translation_length = $this->fieldDataLength($field_info, $field_data);
+        if (is_numeric($max_allowed_length) && $max_allowed_length < $translation_length) {
+          // By setting the state it avoids a second try to be finished with a false successful message "Successfully imported file."
+          $this->setState(TMGMT_JOB_ITEM_STATE_ACTIVE, 'Failed to validate file, import aborted.', array(), 'error');
+          throw new TMGMTException(t('The data on %field_name should be equal or less than %max_allowed_length characters, found %translation_length characters!', array('%field_name' => $field_name, '%max_allowed_length' => $max_allowed_length, '%translation_length' => $translation_length)));
+        }
+      }
+    }
+  }
+
+  /**
+   * @param $field_name
+   * @param $field_data
+   * @param bool $isConfig
+   * @return int
+   */
+  private function fieldDataLength(&$field_info, &$field_data) {
+    switch ($field_info['type']) {
+      case 'link':
+        $data = $this->linkDataLength($field_data);
+        break;
+      case 'text_with_summary':
+        $data = $this->textSummaryDataLength($field_data);
+        break;
+      default:
+        $data = $field_data[0]['value']['#translation']['#text'];
+        break;
+    }
+    return drupal_strlen($data);
+  }
+
+  /**
+   * @param $data
+   * @param string $column
+   * Te column can be value and or summary.
+   * @return mixed
+   */
+  private function textSummaryDataLength(&$data, $column = 'value') {
+    return $data[0][$column]['#translation']['#text'];
+  }
+
+  /**
+   * @param $field_name
+   * @param $field_data
+   * @param bool $isConfig
+   *
+   * @return int|mixed|null
+   */
+  private function fieldSettingsLength(&$field_info) {
+    switch ($field_info['type']) {
+      case 'link':
+        $length = $this->linkTitleLengthSettings($field_info);
+        break;
+      case 'text_with_summary':
+        $length = $this->textSummaryLengthSettings($field_info);
+        break;
+      default:
+        $length = $field_info['settings']['max_length'];
+        break;
+    }
+    return $length;
+  }
+
+  /**
+   * @param $field_info
+   * @param string $column
+   * The column name: {value, summary and format}.
+   * For tmgmt
+   *
+   * @return mixed
+   */
+  public function textSummaryLengthSettings(&$field_info, $column = 'value') {
+    $size = $field_info['columns'][$column]['size'];
+//      if (!is_numeric($size)) {
+//        switch ($size) {
+//          case 'bg':
+//            $size = 4000000000;
+//            break;
+//          default:
+//            break;
+//        }
+//      }
+    return $size;
+  }
+
+  /**
+   * Get the custom length on link field type from settings.
+   * The length which was set while creating the bundle, otherwise it is 128 characters by default.
+   *
+   * @param $entity_type
+   *   The entity type for the instance.
+   *
+   * @return int|null
+   *  The max number of characters allowed.
+   */
+  function linkTitleLengthSettings(&$field_info, $entity_type = 'node') {
+    // May have many bundles, in case of the same field being attached to many content type, however the settings are the same, so just pick up the first one.
+    $bundle = isset($field_info['bundles'][$entity_type][0]) ? $field_info['bundles'][$entity_type][0] : NULL;
+    $field_instance = field_info_instance($entity_type, $field_info['field_name'], $bundle);
+
+    return isset($field_instance['settings']['title_maxlength']) ? $field_instance['settings']['title_maxlength'] : NULL;
+  }
+
+  /**
+   * @param $data
+   * @param string $column
+   * @return mixed
+   */
+  function linkDataLength($data, $column = 'title') {
+    return $data[0][$column]['#translation']['#text'];
+  }
+
+
   /**
    * Sets the state of the job item to 'accepted'.
    */
