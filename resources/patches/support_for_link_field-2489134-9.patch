diff --git a/sources/field/processor/link.inc b/sources/field/processor/link.inc
new file mode 100644
index 0000000..e0024e8
--- /dev/null
+++ b/sources/field/processor/link.inc
@@ -0,0 +1,87 @@
+<?php
+/**
+ * @file
+ * Field processor for link.module.
+ */
+
+/**
+ * Implements hook_tmgmt_source_translation_structure().
+ *
+ * This hook is implemented on behalf of the link.module.
+ */
+function link_tmgmt_source_translation_structure($entity_type, $entity, $field, $instance, $langcode, $items) {
+  $structure = array();
+  if (!empty($items)) {
+    $structure['#label'] = check_plain($instance['label']);
+    foreach ($items as $delta => $value) {
+      $structure[$delta]['#label'] = t('Delta #@delta', array('@delta' => $delta));
+      // Translatable columns.
+      foreach (array('url', 'title') as $column) {
+        if (isset($value[$column])) {
+          $structure[$delta][$column] = array(
+            '#label' => t('@field (@column)', array('@field' => $structure['#label'], '@column' => $column)),
+            '#text' => $value[$column],
+            '#translate' => TRUE,
+          );
+        }
+      }
+
+      // The 'attributes' columns might contain translatable strings.
+      if (!empty($value['attributes']['title'])) {
+        $structure[$delta]['attributes:title'] = array(
+          '#label' => t('@field (@column)', array('@field' => $structure['#label'], '@column' => 'title attribute')),
+          '#text' => $value['attributes']['title'],
+          '#translate' => TRUE,
+        );
+      }
+
+      // Non-translatable columns.
+      $structure[$delta]['attributes'] = array(
+        '#label' => '',
+        '#text' => $value['attributes'],
+        '#translate' => FALSE,
+      );
+    }
+  }
+  return $structure;
+}
+
+/**
+ * Implements hook_field_type_tmgmt_populate_entity().
+ *
+ * This hook is implemented on behalf of the link.module.
+ */
+function link_field_type_tmgmt_populate_entity($entity_type, $entity, $field, $instance, $langcode, $data, $use_field_translation) {
+  $field_name = $field['field_name'];
+  $field_langcode = $field['translatable'] ? $langcode : LANGUAGE_NONE;
+  // When not using field translation, make sure we're not storing multiple
+  // languages.
+  if (!$use_field_translation) {
+    $entity->{$field_name} = array($field_langcode => array());
+  }
+
+  foreach (element_children($data[$field_name]) as $delta) {
+    $columns = array();
+    // Prepare first the 'attributes' column, if contains a translated 'title'.
+    if (!empty($data[$field_name][$delta]['attributes:title']['#translation']['#text'])) {
+      $data[$field_name][$delta]['attributes']['#text']['title'] = $data[$field_name][$delta]['attributes:title']['#translation']['#text'];
+    }
+    // This value has been packed in $data[$field_name][$delta]['attributes'].
+    unset($data[$field_name][$delta]['attributes:title']);
+
+    foreach (element_children($data[$field_name][$delta]) as $column) {
+      if (isset($data[$field_name][$delta][$column]['#translation']['#text'])) {
+        $columns[$column] = $data[$field_name][$delta][$column]['#translation']['#text'];
+      }
+      // For elements which are not translatable, keep using the original value.
+      elseif (isset($data[$field_name][$delta][$column]['#translate']) && $data[$field_name][$delta][$column]['#translate'] == FALSE) {
+        $columns[$column] = $data[$field_name][$delta][$column]['#text'];
+      }
+    }
+    // Make sure the array_merge() gets an array as a first parameter.
+    if (!isset($entity->{$field_name}[$field_langcode][$delta])) {
+      $entity->{$field_name}[$field_langcode][$delta] = array();
+    }
+    $entity->{$field_name}[$field_langcode][$delta] = array_merge($entity->{$field_name}[$field_langcode][$delta], $columns);
+  }
+}
diff --git a/sources/field/processor/text.inc b/sources/field/processor/text.inc
new file mode 100644
index 0000000..0cfca10
--- /dev/null
+++ b/sources/field/processor/text.inc
@@ -0,0 +1,40 @@
+<?php
+
+/**
+ * @file
+ * Field processor for text.module.
+ */
+
+/**
+ * Implements hook_tmgmt_source_translation_structure().
+ *
+ * This hook is implemented on behalf of the core text module.
+ */
+function text_tmgmt_source_translation_structure($entity_type, $entity, $field, $instance, $langcode, $items) {
+  $structure = array();
+  if (!empty($items)) {
+    $structure['#label'] = check_plain($instance['label']);
+    foreach ($items as $delta => $value) {
+      $structure[$delta]['#label'] = t('Delta #@delta', array('@delta' => $delta));
+      $structure[$delta]['value'] = array(
+        '#label' => $structure['#label'],
+        '#text' => $value['value'],
+        '#translate' => TRUE,
+      );
+      // Add format.
+      $structure[$delta]['format'] = array(
+        '#label' => '',
+        '#text' => $value['format'],
+        '#translate' => FALSE,
+      );
+      if ($field['type'] == 'text_with_summary' && !empty($value['summary'])) {
+        $structure[$delta]['summary'] = array(
+          '#label' => t('Summary'),
+          '#text' => $value['summary'],
+          '#translate' => TRUE,
+        );
+      }
+    }
+  }
+  return $structure;
+}
diff --git a/sources/field/tmgmt_field.api.php b/sources/field/tmgmt_field.api.php
index 7c54078..f5eb0fb 100644
--- a/sources/field/tmgmt_field.api.php
+++ b/sources/field/tmgmt_field.api.php
@@ -24,6 +24,9 @@ function hook_tmgmt_field_source_data_alter(&$data, $entity_type, $entity, $lang
 /**
  * Extract translatable text elements from a field.
  *
+ * This hook should be implemented in behalf of modules that are providing the
+ * file types.
+ *
  * @param $entity_type
  *   The type of $entity.
  * @param $entity
@@ -52,6 +55,9 @@ function hook_tmgmt_source_translation_structure($entity_type, $entity, $field,
 /**
  * Puts data on the entity of the field type owned by the module.
  *
+ * This hook should be implemented in behalf of modules that are providing the
+ * file types.
+ *
  * @param $entity_type
  *   The type of $entity.
  * @param $entity
@@ -69,7 +75,7 @@ function hook_tmgmt_source_translation_structure($entity_type, $entity, $field,
  *
  * @see tmgmt_field_populate_entity()
  */
-function hook_tmgmt_field_type_populate_entity($entity_type, $entity, $field, $instance, $langcode, $data, $use_field_translation) {
+function hook_field_type_tmgmt_populate_entity($entity_type, $entity, $field, $instance, $langcode, $data, $use_field_translation) {
 
 }
 
diff --git a/sources/field/tmgmt_field.module b/sources/field/tmgmt_field.module
index 016cb03..4767ec6 100644
--- a/sources/field/tmgmt_field.module
+++ b/sources/field/tmgmt_field.module
@@ -6,40 +6,6 @@
  */
 
 /**
- * Implements hook_tmgmt_source_translation_structure().
- *
- * This hook is implemented on behalf of the core text module.
- */
-function text_tmgmt_source_translation_structure($entity_type, $entity, $field, $instance, $langcode, $items) {
-  $structure = array();
-  if (!empty($items)) {
-    $structure['#label'] = check_plain($instance['label']);
-    foreach ($items as $delta => $value) {
-      $structure[$delta]['#label'] = t('Delta #@delta', array('@delta' => $delta));
-      $structure[$delta]['value'] = array(
-        '#label' => $structure['#label'],
-        '#text' => $value['value'],
-        '#translate' => TRUE,
-      );
-      // Add format.
-      $structure[$delta]['format'] = array(
-        '#label' => '',
-        '#text' => $value['format'],
-        '#translate' => FALSE,
-      );
-      if ($field['type'] == 'text_with_summary' && !empty($value['summary'])) {
-        $structure[$delta]['summary'] = array(
-          '#label' => t('Summary'),
-          '#text' => $value['summary'],
-          '#translate' => TRUE,
-        );
-      }
-    }
-  }
-  return $structure;
-}
-
-/**
  * Helper function for retrieving all translatable field values from an entity.
  *
  * @param $entity_type
@@ -70,6 +36,11 @@ function tmgmt_field_get_source_data($entity_type, $entity, $langcode, $only_tra
     $field = field_info_field($field_name);
     $items = field_get_items($entity_type, $entity, $field_name, $langcode);
     if ((!$only_translatable || $field['translatable']) && $items) {
+      // Load the appropriate field type processor file if exists, to get the
+      // hook implementation of hook_tmgmt_source_translation_structure(). Note
+      // that the hook implementation can live anywhere else, if a field type
+      // processor has not been provided in tmgmt_field.module.
+      module_load_include('inc', 'tmgmt_field', 'processor/' . $field['module']);
       if ($data = module_invoke($field['module'], 'tmgmt_source_translation_structure', $entity_type, $entity, $field, $instance, $langcode, $items)) {
         $fields[$field_name] = $data;
       }
@@ -102,6 +73,11 @@ function tmgmt_field_populate_entity($entity_type, $entity, $langcode, $data, $u
       $function = $field['module'] . '_field_type_tmgmt_populate_entity';
       list(, , $bundle) = entity_extract_ids($entity_type, $entity);
       $instance = field_info_instance($entity_type, $field_name, $bundle);
+      // Load the appropriate field type processor file if exists, to get the
+      // hook implementation of hook_field_type_tmgmt_populate_entity(). Note
+      // that the hook implementation can live anywhere else, if a field type
+      // processor has not been provided in tmgmt_field.module.
+      module_load_include('inc', 'tmgmt_field', 'processor/' . $field['module']);
       if (function_exists($function)) {
         $function($entity_type, $entity, $field, $instance, $langcode, $data, $use_field_translation);
       }
