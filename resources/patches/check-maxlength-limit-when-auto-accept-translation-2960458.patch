diff --git a/entity/tmgmt.entity.job_item.inc b/entity/tmgmt.entity.job_item.inc
index b1e7114..b540cf2 100644
--- a/entity/tmgmt.entity.job_item.inc
+++ b/entity/tmgmt.entity.job_item.inc
@@ -409,12 +409,154 @@ class TMGMTJobItem extends Entity {
       $variables = array('!source' => l($this->getSourceLabel(), $uri['path']));
     }
     $return = $this->setState(TMGMT_JOB_ITEM_STATE_REVIEW, $message, $variables, $type);
-    // Auto accept the trganslation if the translator is configured for it.
+    // Auto accept the translation if the translator is configured for it.
     if ($this->getTranslator()->getSetting('auto_accept')) {
-      $this->acceptTranslation();
+        $this->validateFieldMaxLength($this->data);
+        $this->acceptTranslation();
+      }
+      return $return;
+    }
+
+    /**
+     * Validate each item field against its default max length allowed.
+     * This way it avoids exception while saving on the database.
+     * "File import failed with the following message: SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'field_teste_value'"
+     *
+     * @param $data
+     *   A structured data array.
+     * @throws TMGMTException
+     */
+    private function validateFieldMaxLength($data) {
+
+      foreach ($data as $field_name => $field_data) {
+        $field_info = field_info_field($field_name);
+
+        // Skip fields type "text_with_summary" which the column type is "longtext/bg", such as body field..
+        if ($field_info === NULL) {
+          continue;
+        }
+
+        $max_allowed_length = $this->fieldSettingsLength($field_info);
+
+        // Skip the longtext, with a maximum length of 4 GiB (maximum characters depending on the encoding).
+        // Represented as 'bg', which normally found in body field, text areas, etc.
+        if (!is_numeric($max_allowed_length)) {
+          continue;
+        }
+
+        $translation_length = $this->fieldDataLength($field_info, $field_data);
+
+        if ($max_allowed_length >= $translation_length) {
+          continue;
+        }
+
+        // By setting the state it avoids a second try to be finished with a false successful message "Successfully imported file."
+        $this->setState(TMGMT_JOB_ITEM_STATE_ACTIVE, 'Failed to validate file, import aborted.', array(), 'error');
+        throw new TMGMTException(t('The data on %field_name should be equal or less than %max_allowed_length characters, found %translation_length characters!', array('%field_name' => $field_name, '%max_allowed_length' => $max_allowed_length, '%translation_length' => $translation_length)));
+      }
+    }
+
+    /**
+     * Manage the data length from imported file.
+     *
+     * @param $field_info
+     *   Field info object.
+     * @param $field_data
+     *   Field data structure as array.
+     * @return int
+     *   The data length, zero is empty or null.
+     */
+    private function fieldDataLength(&$field_info, &$field_data) {
+      switch ($field_info['type']) {
+        case 'link_field':
+          $data = $this->linkDataLength($field_data);
+          break;
+        case 'text_long':
+        case 'text_with_summary':
+          $data = $this->textSummaryDataLength($field_data);
+          break;
+        default:
+          $data = $field_data[0]['value']['#translation']['#text'];
+          break;
+      }
+      return drupal_strlen($data);
+    }
+
+    /**
+     * Get the length from the text_with_summary field type.
+     *
+     * @param $data
+     *   The data from translation file.
+     * @param string $column
+     *   The column can be value and or summary.
+     *
+     * @return mixed
+     */
+    private function textSummaryDataLength(&$data, $column = 'value') {
+      return $data[0][$column]['#translation']['#text'];
+    }
+
+    /**
+     * Manage field settings length.
+     *
+     * @param $field_info.
+     * @return int|mixed|null
+     */
+    private function fieldSettingsLength(&$field_info) {
+      switch ($field_info['type']) {
+        case 'link_field':
+          $length = $this->linkTitleLengthSettings($field_info);
+          break;
+        case 'text_with_summary':
+          $length = $this->textSummaryLengthSettings($field_info);
+          break;
+        default:
+          $length = $field_info['settings']['max_length'];
+          break;
+      }
+      return $length;
+    }
+
+    /**
+     * Get text_with_summary field type length.
+     *
+     * @param $field_info
+     *   The field info object.
+     * @param string $column
+     *   The column name: {value, summary and format}.
+     * @return mixed
+     */
+    public function textSummaryLengthSettings(&$field_info, $column = 'value') {
+      return $field_info['columns'][$column]['size'];
+    }
+
+    /**
+     * Get the custom length on link field type from settings.
+     * The length which was set while creating the bundle, otherwise it is 128 characters by default.
+     *
+     * @param $entity_type
+     *   The entity type for the instance.
+     * @return int|null
+     *  The max number of characters allowed.
+     */
+    private function linkTitleLengthSettings(&$field_info, $entity_type = 'node') {
+      // May have many bundles, in case of the same field being attached to many content type, however the settings are the same, so just pick up the first one.
+      $bundle = isset($field_info['bundles'][$entity_type][0]) ? $field_info['bundles'][$entity_type][0] : NULL;
+      $field_instance = field_info_instance($entity_type, $field_info['field_name'], $bundle);
+
+      return isset($field_instance['settings']['title_maxlength']) ? $field_instance['settings']['title_maxlength'] : NULL;
+    }
+
+    /**
+     * Get the link data length.
+     *
+     * @param $data
+     * @param string $column
+     * @return mixed
+     */
+    private function linkDataLength(&$data, $column = 'title') {
+      return $data[0][$column]['#translation']['#text'];
     }
-    return $return;
-  }
 
   /**
    * Sets the state of the job item to 'accepted'.
