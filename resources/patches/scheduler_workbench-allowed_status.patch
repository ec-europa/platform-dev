diff --git a/README.txt b/README.txt
old mode 100644
new mode 100755
index f6f4755..8fa2ac5
--- a/README.txt
+++ b/README.txt
@@ -5,6 +5,8 @@ Workbench Moderation module [2]. It allows to set a moderation state when
 Scheduler triggers automatic publication or unpublication of a node. It also
 adds a field to capture a default value for unpublication and adds a permission
 to determine which users can override this default value.
+When cron runs, the content scheduled will be published or unpublished. The
+content will only be published if the current status is allowed to be published.


 Requirements
@@ -36,6 +38,7 @@ Usage
 5. Go to People > Permissions and grant the permission "Override default
    scheduler time" to all user roles that should be able to enter a custom
    unpublish time.
+6. Access "admin/config/content/scheduler/scheduler_workbench" to configure the status that can be published. By default, the status allowed are those that allow a transition to "published".


 References
diff --git a/scheduler_workbench.admin.inc b/scheduler_workbench.admin.inc
new file mode 100755
index 0000000..2b903b1
--- /dev/null
+++ b/scheduler_workbench.admin.inc
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Form callback for the settings form.
+ *
+ * @see system_settings_form()
+ */
+function scheduler_workbench_allowed_status_form($form, &$form_state) {
+  $options = workbench_moderation_state_labels();
+  $form['scheduler_workbench_allowed_status'] = array(
+    '#type' => 'checkboxes',
+    '#title' => t('Allowed Workbench Moderation status for scheduling publication'),
+    '#options' => $options,
+    '#default_value' => _scheduler_workbench_allowed_status(),
+    '#description' => t('This is a list of status from Workbench Moderation. By default, the status enabled are those with a transition to the publish status, currently (@status). You can choose what status to allow revisions for scheduling publication. When Scheduler Workbench tries to publish a revision it will check if the current state is one of the selected from this list.', array('@status' => implode(',', _scheduler_workbench_allowed_status()))),
+  );
+  return system_settings_form($form);
+}
diff --git a/scheduler_workbench.install b/scheduler_workbench.install
new file mode 100755
index 0000000..c11e28d
--- /dev/null
+++ b/scheduler_workbench.install
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the scheduler_workbench module.
+ */
+
+/**
+ * Implements hook_uninstall().
+ */
+function scheduler_workbench_uninstall() {
+  variable_del('scheduler_workbench_allowed_status');
+}
+
diff --git a/scheduler_workbench.module b/scheduler_workbench.module
old mode 100644
new mode 100755
index 868435e..89caacb
--- a/scheduler_workbench.module
+++ b/scheduler_workbench.module
@@ -7,6 +7,22 @@
  */

 /**
+ * Implements hook_menu().
+ */
+function scheduler_workbench_menu() {
+  $items['admin/config/content/scheduler/scheduler_workbench'] = array(
+    'title' => 'Workbench Scheduler status',
+    'description' => 'Select the states that can be scheduled for publication',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('scheduler_workbench_allowed_status_form'),
+    'access arguments' => array('scheduler workbench'),
+    'file' => 'scheduler_workbench.admin.inc',
+    'weight' => 25,
+    'type' => MENU_LOCAL_TASK,
+  );
+  return $items;
+}
+/**
  * Implements hook_form_node_type_form_alter().
  *
  * Alters node_type forms to add fields to scheduler.
@@ -46,12 +62,15 @@ function scheduler_workbench_form_node_type_form_alter(&$form, $form_state) {
  * Implements hook_permission().
  */
 function scheduler_workbench_permission() {
-  return array(
-    'override default scheduler time' => array(
-      'title' => t('Override default scheduler time'),
-      'description' => t('Allow users to override the default un-publish schedule time'),
-    ),
+  $permissions['override default scheduler time'] = array(
+    'title' => t('Override default scheduler time'),
+    'description' => t('Allow users to override the default un-publish schedule time'),
+  );
+  $permissions['scheduler workbench'] = array(
+    'title' => t('Administer Scheduler Workbench'),
+    'description' => t('Perform administration tasks for Scheduler Workbench.'),
   );
+  return $permissions;
 }

 /**
@@ -141,7 +160,14 @@ function scheduler_workbench_scheduler_node_form_submit($form, $form_state) {
  */
 function scheduler_workbench_node_validate($node, $form) {
   $date_format = variable_get('scheduler_date_format', SCHEDULER_DATE_FORMAT);
-
+  if (isset($node->workbench_moderation_state_new) && 'published' != $node->workbench_moderation_state_new && (!empty($node->revision_publish_on) || !empty($node->publish_on))) {
+    // Check if the current status will be published.
+    $allowed_status = _scheduler_workbench_allowed_status();
+    if (!in_array($node->workbench_moderation_state_new, $allowed_status) || $allowed_status[$node->workbench_moderation_state_new] === 0) {
+      $message = t('The current status is @status and it is not allowed to be published on a future date, you will need to update the status.', array('@status' => $node->workbench_moderation_state_new));
+      drupal_set_message($message, 'status', FALSE);
+    }
+  }
   if (!empty($node->revision_publish_on) && !is_numeric($node->revision_publish_on)) {
     $publishtime = _scheduler_strtotime($node->revision_publish_on);
     if ($publishtime === FALSE) {
@@ -172,7 +198,8 @@ function scheduler_workbench_node_update($node) {
     $replacements = array(
       '@publish_time' => format_date($publish_on, 'custom', $date_format),
     );
-    drupal_set_message(t('This revision is unpublished and will be published @publish_time.', $replacements), 'status', FALSE);
+    $message = t('This revision is unpublished and will be published @publish_time.', $replacements);
+    drupal_set_message($message, 'status', FALSE);
   }
 }

@@ -253,6 +280,23 @@ function _scheduler_workbench_scheduler_unpublish(&$node) {
  */
 function _scheduler_workbench_scheduler_pre_publish(&$node) {
   if ($state = variable_get('scheduler_publish_moderation_state_' . $node->type, FALSE)) {
+    // Get status allowed to be published.
+    $allowed_status = _scheduler_workbench_allowed_status();
+    foreach ($allowed_status as $key => $value) {
+      // If the status is not enabled we remove it from allowed status.
+      if (trim($value) != trim($key)) {
+        unset($allowed_status[$key]);
+      }
+    }
+    // Check if the revision current status allows it to be published.
+    if (!in_array($node->workbench_moderation['current']->state, $allowed_status)) {
+      $options = array(
+        "%node" => $node->nid,
+        '%status' => $node->workbench_moderation['current']->state,
+      );
+      watchdog("scheduler_workbench", t("Node %node with status %status can't be published, check status allowed to be published."), $options, WATCHDOG_INFO);
+      return;
+    }
     if (!empty($node->workbench_moderation['my_revision']) &&
       $node->workbench_moderation['my_revision']->state == $state
     ) {
@@ -299,7 +343,6 @@ function scheduler_workbench_form_workbench_moderation_moderate_form_alter(&$for
   if (!empty($form['node']['#value'])) {
     $node = $form['node']['#value'];
     if (($state = variable_get('scheduler_publish_moderation_state_' . $node->type, FALSE)) &&
-      !empty($node->workbench_moderation['published']) &&
       !empty($node->publish_on)
     ) {
       $date_format = variable_get('scheduler_date_format', SCHEDULER_DATE_FORMAT);
@@ -319,6 +362,15 @@ function scheduler_workbench_form_workbench_moderation_moderate_form_alter(&$for
 function scheduler_workbench_revision_publish($current, $state) {
   workbench_moderation_moderate($current, $state);
   $create_publishing_revision = variable_get('scheduler_publish_revision_' . $current->type, 0) == 1;
+  $allowed_status = _scheduler_workbench_allowed_status();
+  if (!in_array($current->workbench_moderation['my_revision']->state, $allowed_status)) {
+    $options = array(
+      "%node" => $current->nid,
+      '%status' => $current->workbench_moderation['my_revision']->state,
+    );
+    watchdog("scheduler_workbench", t("Node %node with status %status, can't be published, check status allowed to be published."), $options, WATCHDOG_INFO);
+    return;
+  }
   if ($create_publishing_revision) {
     $current->revision = TRUE;
     $current->log = t('Saved by Scheduler workbench on @now.', array(
@@ -345,11 +397,34 @@ function scheduler_workbench_scheduler_allow_publishing($node) {
     $draft_owner = user_load($node->workbench_moderation['current']->uid);
     $published_state = variable_get('scheduler_publish_moderation_state_' . $node->type, workbench_moderation_state_published());

-    // If this state is one that the current user can access, return TRUE.
-    if ($permitted_states = workbench_moderation_states_next($current_state, $draft_owner, $node)) {
-      $allowed = isset($permitted_states[$published_state]);
+    // Get status allowed to be published.
+    $allowed_status = _scheduler_workbench_allowed_status();
+    // Check if the revision current status allows it to be published.
+    if (!in_array($node->workbench_moderation['current']->state, $allowed_status) || $allowed_status[$node->workbench_moderation['current']->state] === 0) {
+      $options = array(
+        "%node" => $node->nid,
+        '%status' => $node->workbench_moderation['current']->state,
+      );
+      watchdog("scheduler_workbench", t("Node %node with status %status, can't be published, check status allowed to be published."), $options, WATCHDOG_INFO);
+      $allowed = FALSE;
     }
   }
-
   return $allowed;
 }
+
+/**
+ * Return status allowed to be scheduled for transition.
+ */
+function _scheduler_workbench_allowed_status() {
+  $allowed_status = variable_get('scheduler_workbench_allowed_status', array());
+  if ($allowed_status == array()) {
+    $transitions = workbench_moderation_transitions();
+    $status = array();
+    foreach ($transitions as $key => $value) {
+      if ($value->to_name == 'published') {
+        $allowed_status[$value->from_name] = $value->from_name;
+      }
+    }
+  }
+  return $allowed_status;
+}
