diff --git a/includes/MediaAvPortalMalformedQueryException.inc b/includes/MediaAvPortalMalformedQueryException.inc
new file mode 100644
index 0000000..453ae67
--- /dev/null
+++ b/includes/MediaAvPortalMalformedQueryException.inc
@@ -0,0 +1,16 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaAvPortalMalformedQueryException.
+ */
+
+/**
+ * Class MediaAvPortalMalformedQueryException.
+ *
+ * This type of exceptions is catch when a query sent to the service
+ * is not correctly set.
+ */
+class MediaAvPortalMalformedQueryException extends Exception {
+
+}
diff --git a/includes/MediaAvPortalMedia.inc b/includes/MediaAvPortalMedia.inc
new file mode 100644
index 0000000..f3d3ec7
--- /dev/null
+++ b/includes/MediaAvPortalMedia.inc
@@ -0,0 +1,409 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaAvPortalMedia.
+ */
+
+/**
+ * Class MediaAvPortalMedia.
+ *
+ * It proposes the metadata of AVportal media.
+ */
+class MediaAvPortalMedia {
+
+  const MEDIA_AVPORTAL_TYPE_VIDEO = 'VIDEO';
+
+  const MEDIA_AVPORTAL_TYPE_IMAGE = 'PHOTO';
+
+  /**
+   * The language code referred in the consumer system for the media metadata.
+   *
+   * @var string
+   */
+  private $metadataDefaultLanguage = '';
+
+  /**
+   * The language code referred in the consumer system for the media.
+   *
+   * @var string
+   */
+  private $mediaDefaultLanguage = '';
+
+  /**
+   * List of the available language versions for the media.
+   *
+   * @var array
+   */
+  private $mediaAvailableLanguages = array();
+
+  /**
+   * The title set for the media.
+   *
+   * @var string
+   */
+  private $mediaDefaultSummary = '';
+
+  /**
+   * The other summary translations set for the media.
+   *
+   * @var array
+   */
+  private $mediaSummaryAlternativeTranslations = array();
+
+  /**
+   * The title set for the media.
+   *
+   * @var string
+   */
+  private $mediaDefaultTitle = '';
+
+  /**
+   * The other title translations set for the media.
+   *
+   * @var array
+   */
+  private $mediaTitleAlternativeTranslations = array();
+
+  /**
+   * The reference of the media.
+   *
+   * @var string
+   */
+  private $mediaRef = '';
+
+  /**
+   * The media thumbnail URL.
+   *
+   * @var string
+   */
+  private $mediaDefaultThumbnailUrl = '';
+
+  /**
+   * The media thumbnail URL for other languages.
+   *
+   * @var array
+   */
+  private $mediaTranslatedThumbnailUrls = array();
+
+  /**
+   * The media type.
+   *
+   * @var string
+   */
+  private $mediaType = self::MEDIA_AVPORTAL_TYPE_VIDEO;
+
+  /**
+   * MediaAvPortalMedia constructor.
+   *
+   * @param array $serviceResponse
+   *   The object with data sent by the AVportal service.
+   * @param string $metadataDefaultLanguage
+   *   The language code used as reference in the consumer system.
+   */
+  public function __construct(array $serviceResponse, $metadataDefaultLanguage = 'en') {
+    $this->metadataDefaultLanguage = $metadataDefaultLanguage;
+    $this->parseServiceMedia($serviceResponse);
+  }
+
+  /**
+   * Gets the translated metadata value for the media language.
+   *
+   * @param array $metadataValues
+   *   Associative array containing the metadata translated values;
+   *   the key is the translation language code in upper case.
+   * @param string $language
+   *   (Optional) The language corresponding to metadata to retrieved.
+   *   If not set, the metadataDefaultLanguage value will be taken.
+   *
+   * @return string
+   *   The translated value in the language specified by the
+   *   $metadataDefaultLanguage parameter. If not found, the value will
+   *   returned in English, otherwise in the first language defined in the
+   *   array.
+   */
+  private function getTranslatableMediaMetadata(array $metadataValues, $language = '') {
+    $searchedLanguage = $this->metadataDefaultLanguage;
+    if (!empty($language)) {
+      $searchedLanguage = $language;
+    }
+    $searchedLanguage = drupal_strtoupper($searchedLanguage);
+
+    if (!empty($metadataValues[$searchedLanguage])) {
+      return $metadataValues[$searchedLanguage];
+    }
+
+    if (!empty($metadataValues['EN'])) {
+      $this->metadataDefaultLanguage = 'en';
+      return $metadataValues['EN'];
+    }
+
+    foreach ($metadataValues as $upper_lang => $value) {
+      $this->metadataDefaultLanguage = drupal_strtolower($upper_lang);
+      return $value;
+    }
+  }
+
+  /**
+   * Gets other translation for the metadata value.
+   *
+   * @param array $metadataValues
+   *   Associative array containing the metadata translated values;
+   *   the key is the translation language code in upper case.
+   *
+   * @return array
+   *   Associative array with the translations of a media metadata value other
+   *   than the one of the reference language
+   */
+  private function getOtherMetadataTranslations(array $metadataValues) {
+    $values = array();
+
+    foreach ($metadataValues as $upper_lang => $value) {
+      $currentLanguage = drupal_strtolower($upper_lang);
+      $values[$currentLanguage] = $value;
+    }
+
+    return $values;
+  }
+
+  /**
+   * Parses the media_json data of the AVportal response for the thumbnail URL.
+   *
+   * @param array $mediaJson
+   *   The media_json data array.
+   *
+   * @return string
+   *   The thumbnail URL related to the media.
+   */
+  private function parseThumbnailMediaJson(array $mediaJson) {
+    if (empty($mediaJson)) {
+      return '';
+    }
+
+    // Retrieve the media parameters in order to retrieve the thumbnail.
+    // The "16:9" format must be used in priority but if not available, the
+    // "1:1" format must be used then but it is not available, then use the
+    // "4:3" one.
+    $formattedMedia = reset($mediaJson);
+    if (!empty($mediaJson['16:9'])) {
+      $formattedMedia = (array) $mediaJson['16:9'];
+    }
+    elseif (!empty($mediaJson['1:1'])) {
+      $formattedMedia = (array) $mediaJson['1:1'];
+    }
+
+    if (empty($formattedMedia)) {
+      return '';
+    }
+
+    $this->mediaDefaultLanguage = reset($this->mediaAvailableLanguages);
+    if (in_array($this->metadataDefaultLanguage, $this->mediaAvailableLanguages)) {
+      $this->mediaDefaultLanguage = $this->metadataDefaultLanguage;
+    }
+    elseif (in_array('en', $this->mediaAvailableLanguages)) {
+      $this->mediaDefaultLanguage = 'en';
+    }
+
+    // Retrieve the thumbnail from the "THUMB" parameter. If not available,
+    // Use the "IMAGE" parameter.
+    // if none of them is available, leave the calling system choose what it
+    // displays instead.
+    foreach ($this->mediaAvailableLanguages as $language) {
+      $translatedMedia = $this->getTranslatableMediaMetadata($formattedMedia, $language);
+      $url = '';
+      if (isset($translatedMedia['THUMB'])) {
+        $url = $translatedMedia['THUMB'];
+      }
+      elseif (isset($translatedMedia['IMAGE'])) {
+        $url = $translatedMedia['IMAGE'];
+      }
+
+      if ($language == $this->mediaDefaultLanguage) {
+        $this->mediaDefaultThumbnailUrl = $url;
+      }
+      $this->mediaTranslatedThumbnailUrls[$language] = $url;
+    }
+  }
+
+  /**
+   * Parses the array of the AVportal service to set object properties.
+   *
+   * @param array $serviceMedia
+   *   An associative array with the media metadata returned by the service.
+   */
+  protected function parseServiceMedia(array $serviceMedia) {
+    // Media reference.
+    $this->mediaRef = '';
+    if (!empty($serviceMedia['ref'])) {
+      $this->mediaRef = $serviceMedia['ref'];
+    }
+
+    // Treat the title.
+    $this->mediaDefaultTitle = '';
+    if (!empty($serviceMedia['titles_json'])) {
+      $this->mediaDefaultTitle = $this->getTranslatableMediaMetadata($serviceMedia['titles_json']);
+      $this->mediaTitleAlternativeTranslations = $this->getOtherMetadataTranslations($serviceMedia['titles_json']);
+    }
+
+    // Available languages for the video.
+    if (!empty($serviceMedia['languages'])) {
+      foreach ($serviceMedia['languages'] as $language) {
+        $this->mediaAvailableLanguages[] = drupal_strtolower($language);
+        // Let's add the regional specification language like "pt-pt" that
+        // exist in the predefined list of language, see
+        // _locale_get_predefined_list().
+        switch ($language) {
+          case 'pt':
+            // Portuguese, Portugal (Português).
+            $this->mediaAvailableLanguages[] = 'pt-pt';
+            // Portuguese, Brazil (Português).
+            $this->mediaAvailableLanguages[] = 'pt-br';
+            break;
+
+          case 'en':
+            $this->mediaAvailableLanguages[] = 'en-gb';
+            break;
+
+          case 'de':
+            // Swiss German.
+            $this->mediaAvailableLanguages[] = 'gsw-berne';
+            break;
+
+          case 'zh':
+            // Chinese (Simplified).
+            $this->mediaAvailableLanguages[] = 'zh-Hans';
+            // Chinese (Traditional).
+            $this->mediaAvailableLanguages[] = 'zh-Hant';
+            break;
+        }
+      }
+    }
+
+    // Treat the summary.
+    $this->mediaDefaultSummary = '';
+    if (!empty($serviceMedia['summary_json'])) {
+      $this->mediaDefaultSummary = $this->getTranslatableMediaMetadata($serviceMedia['summary_json']);
+      $this->mediaSummaryAlternativeTranslations = $this->getOtherMetadataTranslations($serviceMedia['summary_json']);
+    }
+
+    // Treat the media type.
+    $this->mediaType = self::MEDIA_AVPORTAL_TYPE_VIDEO;
+    if (!empty($serviceMedia['type'])) {
+      if ((drupal_strtoupper($serviceMedia['type']) != self::MEDIA_AVPORTAL_TYPE_VIDEO)) {
+        $this->mediaType = self::MEDIA_AVPORTAL_TYPE_IMAGE;
+      }
+    }
+
+    // Treat the thumbnail URL.
+    if (!empty($serviceMedia['media_json'])) {
+      $mediaJson = (array) $serviceMedia['media_json'];
+      $this->parseThumbnailMediaJson($mediaJson);
+    }
+  }
+
+  /**
+   * Gets the summary of the media.
+   *
+   * The summary will be returned in the reference language set for the object.
+   *
+   * @return string
+   *   The summary.
+   */
+  public function getMediaSummary() {
+    return $this->mediaDefaultSummary;
+  }
+
+  /**
+   * Gets the title of the media.
+   *
+   * The title will be returned in the reference language set for the object.
+   *
+   * @return string
+   *   The title.
+   */
+  public function getMediaTitle() {
+    return $this->mediaDefaultTitle;
+  }
+
+  /**
+   * Gets the default language of the media metadata.
+   *
+   * @return string
+   *   The language code of the media metadata.
+   */
+  public function getMetadataDefaultLanguage() {
+    return $this->metadataDefaultLanguage;
+  }
+
+  /**
+   * Gets the default language of the media.
+   *
+   * @return string
+   *   The language code of the media.
+   */
+  public function getMediaDefaultLanguage() {
+    return $this->mediaDefaultLanguage;
+  }
+
+  /**
+   * Gets the available languages available for the media.
+   *
+   * @return array
+   *   The list of the language codes.
+   */
+  public function getMediaAvailableLanguages() {
+    return $this->mediaAvailableLanguages;
+  }
+
+  /**
+   * Gets the reference of the media.
+   *
+   * @return string
+   *   The reference.
+   */
+  public function getMediaRef() {
+    return $this->mediaRef;
+  }
+
+  /**
+   * Gets the thumbnail of the media.
+   *
+   * @return string|bool
+   *   The thumbnail of the media; or false if the mediat is not a video.
+   */
+  public function getMediaDefaultThumbnailUrl() {
+    return $this->mediaDefaultThumbnailUrl;
+  }
+
+  /**
+   * Gets the type of the media as defined in AVportal.
+   *
+   * @return string
+   *   The media type; the constant MEDIA_AVPORTAL_TYPE_VIDEO or
+   *   MEDIA_AVPORTAL_TYPE_IMAGE.
+   */
+  public function getMediaType() {
+    return $this->mediaType;
+  }
+
+  /**
+   * Checks if the media is a video.
+   *
+   * @return bool
+   *   TRUE if it is a video.
+   */
+  public function isVideoType() {
+    return ($this->getMediaType() == self::MEDIA_AVPORTAL_TYPE_VIDEO);
+  }
+
+  /**
+   * Gets the thumbnail of the media in the other languages than teh default.
+   *
+   * @return string|bool
+   *   The thumbnail of the media; or false if the media is not a video.
+   */
+  public function getMediaTranslatedThumbnailUrls() {
+    return $this->mediaTranslatedThumbnailUrls;
+  }
+
+}
diff --git a/includes/MediaAvPortalServiceException.inc b/includes/MediaAvPortalServiceException.inc
new file mode 100644
index 0000000..2b278fe
--- /dev/null
+++ b/includes/MediaAvPortalServiceException.inc
@@ -0,0 +1,16 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaAvPortalServiceException.
+ */
+
+/**
+ * Class MediaAvPortalServiceException.
+ *
+ * This type of exceptions is catch when the service does not answer
+ * because of a misconfiguration of connection or a network problem.
+ */
+class MediaAvPortalServiceException extends Exception {
+
+}
diff --git a/includes/MediaAvportalHandler.inc b/includes/MediaAvportalHandler.inc
new file mode 100644
index 0000000..a36dc86
--- /dev/null
+++ b/includes/MediaAvportalHandler.inc
@@ -0,0 +1,92 @@
+<?php
+
+/**
+ * @file
+ * Contains MediaInternetAvportalHandler.
+ */
+
+/**
+ * Implementation of MediaInternetBaseHandler.
+ *
+ * @see hook_media_internet_providers().
+ */
+class MediaAvportalHandler extends MediaInternetBaseHandler {
+
+  private function getMediaAvportalService() {
+    $service_params = array(
+      'service_url' => MEDIA_AVPORTAL_SERVICE_URL,
+    );
+
+    return new MediaAvportalService($service_params);
+  }
+
+  /**
+   * Check if a Avportal video id is valid.
+   */
+  public function validId($id) {
+    try {
+      $service = $this->getMediaAvportalService();
+
+      return $service->checkMediaRefAccessibility($id);
+    }
+    catch (Exception $e) {
+      throw new MediaInternetValidationException($e->getMessage());
+    }
+  }
+
+  /**
+   * Implements parent:parse().
+   */
+  public function parse($embedCode) {
+    $listPatterns = array(
+      // url: http://ec.europa.eu/avservices/video/player.cfm.
+      '@ec\.europa\.eu/avservices/video/player\.cfm\?(.+)@i',
+      // url: http://ec.europa.eu/avservices/play.cfm.
+      '@ec\.europa\.eu/avservices/play\.cfm\?(.+)@i',
+    );
+
+    foreach ($listPatterns as $pattern) {
+      if (preg_match($pattern, $embedCode)) {
+        // Found the URL type used, let's get the query parameter from URL.
+        $parsed_url = drupal_parse_url($embedCode);
+        $queryParams = (!empty($parsed_url['query'])) ? $parsed_url['query'] : array();
+
+        if (isset($queryParams['ref']) && $this->validId($queryParams['ref'])) {
+          return file_stream_wrapper_uri_normalize('avportal://v/' . $queryParams['ref']);
+        }
+      }
+    }
+
+    // Check if the use did not insert the ref directly.
+    if (preg_match('/^I[a-zA-Z0-9-]/', $embedCode)) {
+      if ($this->validId($embedCode)) {
+        return file_stream_wrapper_uri_normalize('avportal://v/' . $embedCode);
+      }
+    }
+  }
+
+  /**
+   * Implements parent:claim().
+   */
+  public function claim($embed_code) {
+    if ($this->parse($embed_code)) {
+      return TRUE;
+    }
+  }
+
+  /**
+   * Implements parent:getFileObject().
+   */
+  public function getFileObject() {
+    $uri = $this->parse($this->embedCode);
+    $file = file_uri_to_object($uri, TRUE);
+
+    if (empty($file->fid)) {
+      $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
+      $video_title = $wrapper->getVideoTitle();
+      $file->filename = truncate_utf8(strip_tags($video_title), 255);
+    }
+    return $file;
+  }
+
+}
diff --git a/includes/MediaAvportalMediaNotAccessibleException.inc b/includes/MediaAvportalMediaNotAccessibleException.inc
new file mode 100644
index 0000000..11eeaae
--- /dev/null
+++ b/includes/MediaAvportalMediaNotAccessibleException.inc
@@ -0,0 +1,16 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaAvPortalServiceException.
+ */
+
+/**
+ * Class MediaAvportalMediaNotAccessibleException.
+ *
+ * This type of exceptions is catch when media data cannot be found or
+ * retrieved.
+ */
+class MediaAvportalMediaNotAccessibleException extends Exception {
+
+}
diff --git a/includes/MediaAvportalService.inc b/includes/MediaAvportalService.inc
new file mode 100644
index 0000000..ce3e472
--- /dev/null
+++ b/includes/MediaAvportalService.inc
@@ -0,0 +1,264 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaAvportalService.
+ */
+
+/**
+ * Class MediaAvportalService.
+ *
+ * It is in charge to send the requests to the AV portal service.
+ */
+class MediaAvportalService {
+  /**
+   * The URL to connect to the service.
+   *
+   * @var string
+   */
+  private $serviceUrl;
+
+  /**
+   * MediaAvportalService constructor.
+   *
+   * @param array $connectionParameters
+   *   (Optional) The connection parameters.
+   *   It must contains at least the service URL.
+   *
+   * @throws MediaAvPortalServiceException
+   *   Catched if the connection parameters are not set correctly.
+   */
+  public function __construct(array $connectionParameters = array()) {
+    if (isset($connectionParameters['service_url'])) {
+      $this->serviceUrl = $connectionParameters['service_url'];
+    }
+  }
+
+  /**
+   * Normalize a media reference to be recognized by the AV Portal service.
+   *
+   * @param string $refToNormalize
+   *   The reference value to normalize.
+   *
+   * @return string
+   *   The normalized reference value.
+   */
+  protected function normalizeRef($refToNormalize) {
+    if (stripos($refToNormalize, 'I-') === 0) {
+      return $refToNormalize;
+    }
+
+    return preg_replace('/^I|^i/', 'I-', $refToNormalize);
+  }
+
+  /**
+   * Gets the metadata for the specified reference.
+   *
+   * @param string $ref
+   *   The reference, id of the video, its format is either "I-000000" or
+   *   "I000000".
+   *
+   * @return MediaAvPortalMedia|bool
+   *   The MediaAvPortalMedia object with the video metadata or
+   *   FALSE if not found.
+   */
+  public function searchVideoByRef($ref) {
+    $ref = $this->normalizeRef($ref);
+    $searchParameters = array(
+      'ref' => $ref,
+      'type' => 'VIDEO',
+    );
+    $results = $this->searchVideos($searchParameters);
+
+    if (empty($results)) {
+      return FALSE;
+    }
+
+    return reset($results);
+  }
+
+  /**
+   * Executes a video search via the AVportal services.
+   *
+   * @param array $searchParameters
+   *   Associative array defining the search parameters:
+   *   - The key is the parameter name,
+   *   - The value the parameter value.
+   * @param string $language
+   *   The reference language to use for the metadata of each retrieved video.
+   *
+   * @return array
+   *   An array of MediaAvPortalMedia objects corresponding to the search
+   *   criteria.
+   *
+   * @throws MediaAvPortalMalformedQueryException
+   *   Catch if the search parameters are wrongly set.
+   * @throws MediaAvportalMediaNotAccessibleException
+   *   Catch if the search request to the service returns no video information.
+   * @throws MediaAvPortalServiceException
+   *   Catch if the search request to the service failed.
+   */
+  public function searchVideos(array $searchParameters = array(), $language = 'en') {
+    if (empty($searchParameters['ref']) && empty($searchParameters['kwand'])  && empty($searchParameters['themes'])) {
+      throw new MediaAvPortalMalformedQueryException('One of these query parameters is mandatory: ref, kwand, themes.');
+    }
+    $query = array(
+      'fl' => 'ref,titles_json,summary_json,type,media_json,mediaorder_json,languages',
+      'pagesize' => 15,
+    );
+    $query = array_merge($query, $searchParameters);
+
+    // Force some configuration to ensure that only published video are
+    // retrieved and the data are in JSON.
+    $query['type'] = 'VIDEO';
+    $query['hasMedia'] = 1;
+    $query['wt'] = 'json';
+
+    $results = array();
+    $response = $this->sendServiceRequest($query);
+    if (isset($response->error)) {
+      $message = sprintf('The query execution failed on %s: %s', $this->serviceUrl, $response->error);
+      throw new MediaAvPortalServiceException($message);
+    }
+
+    $decoded_json_data = drupal_json_decode($response->data);
+
+    if (empty($decoded_json_data['response']) || empty($decoded_json_data['response']['docs'])) {
+      throw new MediaAvportalMediaNotAccessibleException('No information about the video has been found.');
+    }
+
+    foreach ($decoded_json_data['response']['docs'] as $media_array) {
+      $results[] = new MediaAvPortalMedia($media_array, $language);
+    }
+
+    return $results;
+  }
+
+  /**
+   * Check if the specified media is accessible.
+   *
+   * @param string $ref
+   *   The media reference to search.
+   *
+   * @return bool
+   *   TRUE, if the media is available.
+   *
+   * @throws MediaAvportalMediaNotAccessibleException
+   *   Catch if the media is not found or accessible.
+   */
+  public function checkMediaRefAccessibility($ref) {
+    $ref = $this->normalizeRef($ref);
+
+    $query = array(
+      'fl' => 'ref',
+      'ref' => $ref,
+      'type' => 'VIDEO',
+      'hasMedia' => 1,
+    );
+    $response = $this->sendServiceRequest($query);
+    $decoded_json_data = drupal_json_decode($response->data);
+
+    if ($response->code == 401 || empty($decoded_json_data['response']) || empty($decoded_json_data['response']['docs'])) {
+      throw new MediaAvportalMediaNotAccessibleException('Embedding has been disabled for this avportal video.');
+    }
+
+    if ($response->code != 200) {
+      throw new MediaAvportalMediaNotAccessibleException('The avportal video ID is invalid or the video has been deleted.');
+    }
+
+    return TRUE;
+  }
+
+  /**
+   * Gets the media thumbnail file.
+   *
+   * @param string $ref
+   *   The media reference.
+   * @param string $language
+   *   (Optional) The language to use to get the file.
+   *   If not set, the media default language will be used.
+   *
+   * @return bool|string
+   *   The checked thumbnail file URL or FALSE if the file url is
+   *   invalid or the file is not found.
+   */
+  public function checkMediaThumbnailFile($ref, $language = '') {
+    $media = $this->searchVideoByRef($ref);
+    $url = $media->getMediaDefaultThumbnailUrl();
+    $availableTranslatedUrls = $media->getMediaTranslatedThumbnailUrls();
+    if (!empty($language) && isset($availableTranslatedUrls[$language])) {
+      $url = $availableTranslatedUrls[$language];
+    }
+
+    try {
+      $response = drupal_http_request($url);
+
+      if (!isset($response->error)) {
+        return $response->data;
+      }
+    }
+    catch (Exception $e) {
+      // Let's log the exception leave the function process continue with
+      // its own "error" management.
+      watchdog_exception('media_avportal', $e);
+    }
+
+    watchdog('media_avportal', 'The url "%url" is invalid or does not exist.', array('%url' => $url), WATCHDOG_ERROR);
+
+    return FALSE;
+  }
+
+  /**
+   * Send a request to the service.
+   *
+   * @param array $queryParameters
+   *   Associative array containing the query parameters,
+   *   The keys are the query parameter name.
+   * @param array $connectionParameters
+   *   (Optional) An array that can have one or more of the following elements:
+   *   - headers: An array containing request headers to send as name/value
+   *     pairs.
+   *   - method: A string containing the request method. Defaults to 'GET'.
+   *     Defaults to NULL.
+   *   - max_redirects: An integer representing how many times a redirect
+   *     may be followed. Defaults to 3.
+   *   - timeout: A float representing the maximum number of seconds the
+   *     function call may take. The default is 30 seconds. If a timeout
+   *     occurs, the error code is set to the HTTP_REQUEST_TIMEOUT constant.
+   *   - context: A context resource created with stream_context_create().
+   *
+   * @return object
+   *   An object that can have one or more of the following components:
+   *   - request: A string containing the request body that was sent.
+   *   - code: An integer containing the response status code, or the error
+   *     code if an error occurred.
+   *   - protocol: The response protocol (e.g. HTTP/1.1 or HTTP/1.0).
+   *   - status_message: The status message from the response, if a response
+   *     was received.
+   *   - redirect_code: If redirected, an integer containing the initial
+   *     response status code.
+   *   - redirect_url: If redirected, a string containing the URL of the
+   *     redirect target.
+   *   - error: If an error occurred, the error message. Otherwise not set.
+   *   - headers: An array containing the response headers as name/value pairs.
+   *     HTTP header names are case-insensitive (RFC 2616, section 4.2), so for
+   *     easy access the array keys are returned in lower case.
+   *   - data: A string containing the response body that was received.
+   *
+   * @throws MediaAvPortalServiceException
+   *   Catch if the request to the service failed.
+   */
+  private function sendServiceRequest(array $queryParameters, array $connectionParameters = array()) {
+    $url = $this->serviceUrl . '?' . drupal_http_build_query($queryParameters);
+
+    try {
+      return drupal_http_request($url, $connectionParameters);
+    }
+    catch (Exception $e) {
+      watchdog_exception('media_avportal', $e);
+      $message = sprintf('The query execution failed on %s', $this->serviceUrl);
+      throw new MediaAvPortalServiceException($message);
+    }
+  }
+
+}
diff --git a/includes/MediaAvportalStreamWrapper.inc b/includes/MediaAvportalStreamWrapper.inc
index 7a2530a..43f86f7 100644
--- a/includes/MediaAvportalStreamWrapper.inc
+++ b/includes/MediaAvportalStreamWrapper.inc
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * @file
  * Create an Avportal Stream Wrapper class for the Media/Resource module.
@@ -13,28 +14,40 @@
  */
 class MediaAvportalStreamWrapper extends MediaReadOnlyStreamWrapper {
 
-  // Overrides $base_url defined in MediaReadOnlyStreamWrapper.
-  protected $baseUrl = 'http://ec.europa.eu/avservices/video/player.cfm';
+  private function getMediaAvportalService() {
+    $service_params = array(
+      'service_url' => MEDIA_AVPORTAL_SERVICE_URL,
+    );
+
+    return new MediaAvportalService($service_params);
+  }
+
+  /**
+   * Overrides $base_url defined in MediaReadOnlyStreamWrapper.
+   *
+   * @var string
+   */
+  protected $baseUrl = '//ec.europa.eu/avservices/play.cfm';
 
   /**
    * Returns a URL in the format.
    *
-   * @see http://ec.europa.eu/avservices/video/player.cfm?ref=qsPQN4MiTeE
+   * @see http://ec.europa.eu/avservices/play.cfm?ref=I-0000000
    *
    * Overrides interpolateUrl() defined in MediaReadOnlyStreamWrapper.  This is
    * an exact copy of the function in MediaReadOnlyStreamWrapper, here in case
    * that example is redefined or removed.
    */
   public function interpolateUrl() {
-    if ($parameters = $this->get_parameters()) {
-      return $this->baseUrl . '?' . http_build_query($parameters);
+    if ($parameters = $this->getUrlQueryParameter()) {
+      return $this->baseUrl . '?' . drupal_http_build_query($parameters);
     }
   }
 
   /**
    * Implements getMimeType().
    */
-  static public function getMimeType($uri, $mapping = NULL) {
+  public static function getMimeType($uri, $mapping = NULL) {
     return 'video/avportal';
   }
 
@@ -45,33 +58,54 @@ class MediaAvportalStreamWrapper extends MediaReadOnlyStreamWrapper {
     return FALSE;
   }
 
+  /**
+   * Get the URL query parameters as excpeted by the AVportal service.
+   *
+   * @return array
+   *   Associative array where the key are the parameter names and the value,
+   *   the parameter values.
+   */
+  protected function getUrlQueryParameter() {
+    $mapped_parameters = array();
+    if ($parameters = $this->get_parameters()) {
+      $mapped_parameters['ref'] = $parameters['v'];
+
+    }
+
+    return $mapped_parameters;
+  }
+
   /**
    * Implements getVideoInformation().
    */
   private function getVideoInformation() {
-    $parts = $this->get_parameters();
-    $video_id = check_plain($parts['v']);
+    $parameters = $this->getUrlQueryParameter();
+    $video_ref = check_plain($parameters['ref']);
 
     // Using cache to avoid a call to the webservice each time.
-    $video_info = &drupal_static(__FUNCTION__ . $video_id);
-    if (!isset($video_info)) {
-      $cache = cache_get('av_video_' . $video_id);
-      if (!empty($cache->data)) {
-        $video_info = $cache->data;
-      }
-      else {
-        $url = 'http://ec.europa.eu/avservices/cfc/video.cfc?method=getVideoDetails&ref=' . $video_id . '&format=json';
-        $response = drupal_http_request($url);
-        if (!isset($response->error)) {
-          $video_info = drupal_json_decode($response->data);
-          cache_set('av_video_' . $video_id, $video_info, 'cache');
-        }
-        else {
-          throw new Exception("Error Processing Request. (Error: {$response->code}, {$response->error})");
-        }
-      }
+    $video_info = &drupal_static(__FUNCTION__ . $video_ref);
+
+    if (isset($video_info)) {
+      return $video_info;
+    }
+
+    $cache = cache_get('av_video_' . $video_ref);
+    if (!empty($cache->data)) {
+      $video_info = $cache->data;
+      return $video_info;
+    }
+    try {
+      $service = $this->getMediaAvportalService();
+
+      $video_info = $service->searchVideoByRef($video_ref);
+      cache_set('av_video_' . $video_ref, $video_info, 'cache', CACHE_TEMPORARY);
+
+      return $video_info;
+    }
+    catch (Exception $e) {
+      watchdog_exception('media_avportal', $e);
+      throw new MediaInternetValidationException("A problem occurred while retrieving data from the service.", 0, $e);
     }
-    return $video_info;
   }
 
   /**
@@ -79,7 +113,7 @@ class MediaAvportalStreamWrapper extends MediaReadOnlyStreamWrapper {
    */
   public function getVideoTitle() {
     $info = $this->getVideoInformation();
-    return $info['TITLE'];
+    return $info->getMediaTitle();
   }
 
   /**
@@ -87,28 +121,63 @@ class MediaAvportalStreamWrapper extends MediaReadOnlyStreamWrapper {
    */
   public function getVideoThumb() {
     $info = $this->getVideoInformation();
-    return $info['THUMB'];
+    return $info->getMediaThumbnailUrl();
+  }
+
+  /**
+   * Gets the list of the available languages for the video.
+   *
+   * @return array
+   *   the list of language codes.
+   */
+  public function getAvailableVideoLanguage() {
+    $info = $this->getVideoInformation();
+    return $info->getMediaAvailableLanguages();
   }
 
   /**
    * Implements getLocalThumbnailPath().
    */
-  public function getLocalThumbnailPath($remote_path) {
+  public function getLocalThumbnailPath() {
     $parts = $this->get_parameters();
-    $local_path = file_default_scheme() . '://media-avportal/' . check_plain($parts['v']) . '.jpg';
-    // If image does not exist, create a new from remote.
-    if (!file_exists($local_path)) {
+    $ref = array_pop($parts);
+    $local_path = file_default_scheme() . '://media-avportal/' . check_plain($ref) . '.jpg';
+    if (file_exists($local_path)) {
+      return $local_path;
+    }
+
+    try {
       $dirname = drupal_dirname($local_path);
       file_prepare_directory($dirname, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
-      $response = drupal_http_request($remote_path);
-      if (empty($response->error) || strlen(trim($response->error)) == 0) {
-        file_unmanaged_save_data($response->data, $local_path, TRUE);
+      $service = $this->getMediaAvportalService();
+      $thumbnail = $service->checkMediaThumbnailFile($ref);
+
+      if (!empty($thumbnail)) {
+        file_unmanaged_save_data($thumbnail, $local_path, TRUE);
       }
       else {
-        $local_path = drupal_get_path('module', 'media_avportal') . '/img/avportal.png';
+        @copy($this->getVideoThumb(), $local_path);
       }
     }
+    catch (Exception $e) {
+      // In the event of an endpoint error, use the mime type icon provided
+      // by the Media module.
+      $local_path = $this->getDefaultThumbnail();
+    }
+
     return $local_path;
   }
 
+  /**
+   * Gets the default thumbnail from media module.
+   *
+   * @return bool|string
+   *   The default icon is available or FALSE.
+   */
+  private function getDefaultThumbnail() {
+    $file = file_uri_to_object($this->uri);
+    $icon_dir = variable_get('media_icon_base_directory', 'public://media-icons') . '/' . variable_get('media_icon_set', 'default');
+    return file_icon_path($file, $icon_dir);
+  }
+
 }
diff --git a/includes/MediaInternetAvportalHandler.inc b/includes/MediaInternetAvportalHandler.inc
deleted file mode 100644
index ee2a883..0000000
--- a/includes/MediaInternetAvportalHandler.inc
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-/**
- * @file
- * Contains MediaInternetAvportalHandler.
- */
-
-/**
- * Implementation of MediaInternetBaseHandler.
- *
- * @see hook_media_internet_providers().
- */
-class MediaInternetAvportalHandler extends MediaInternetBaseHandler {
-  /**
-   * Check if a Avportal video id is valid.
-   */
-  static public function validId($id) {
-    // url: http://ec.europa.eu/avservices/video/player.cfm?sitelang=en&ref=xxx
-    $ourl = 'http://ec.europa.eu/avservices/video/player.cfm?ref=' . $id;
-    $response = drupal_http_request($ourl, array('method' => 'HEAD'));
-
-    if ($response->code == 401) {
-      throw new MediaInternetValidationException('Embedding has been disabled for this avportal video.');
-    }
-    elseif ($response->code != 200) {
-      throw new MediaInternetValidationException('The avportal video ID is invalid or the video was deleted.');
-    }
-    return TRUE;
-  }
-
-  /**
-   * Implements parent:parse().
-   */
-  public function parse($embed_code) {
-    $patterns = array(
-      // url: http://ec.europa.eu/avservices/video/player.cfm.
-      '@ec\.europa\.eu/avservices/video/player\.cfm\?(.+)@i',
-      // url: http://ec.europa.eu/avservices/play.cfm.
-      '@ec\.europa\.eu/avservices/play\.cfm\?(.+)@i',
-    );
-
-    foreach ($patterns as $pattern) {
-      preg_match($pattern, $embed_code, $matches);
-      if (isset($matches[1]) && self::validId($matches[1])) {
-        preg_match('/ref=(\w+)/', $matches[1], $mas);
-        return file_stream_wrapper_uri_normalize('avportal://v/' . check_plain($mas[1]));
-      }
-    }
-  }
-
-  /**
-   * Implements parent:claim().
-   */
-  public function claim($embed_code) {
-    if ($this->parse($embed_code)) {
-      return TRUE;
-    }
-  }
-
-  /**
-   * Implements parent:getFileObject().
-   */
-  public function getFileObject() {
-    $uri = $this->parse($this->embedCode);
-    $file = file_uri_to_object($uri, TRUE);
-
-    if (empty($file->fid)) {
-      $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
-      $video_title = $wrapper->getVideoTitle();
-      $file->filename = truncate_utf8(strip_tags($video_title), 255);
-    }
-    return $file;
-  }
-
-}
diff --git a/includes/media_avportal.formatters.inc b/includes/media_avportal.formatters.inc
index 7812314..d971e2f 100644
--- a/includes/media_avportal.formatters.inc
+++ b/includes/media_avportal.formatters.inc
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * @file
  * Formatters for Media: Avportal.
@@ -41,19 +42,29 @@ function media_avportal_file_formatter_video_view($file, $display) {
   $scheme = file_uri_scheme($file->uri);
   // WYSIWYG does not yet support video inside a running editor instance.
   if ($scheme == 'avportal' && empty($file->override['wysiwyg'])) {
-    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
-    $element = array(
-      '#theme' => 'media_avportal_video',
-      '#uri' => $file->uri,
-    );
-
+    $options = array();
     // Fake a default for attributes so the ternary doesn't choke.
     $display['settings']['attributes'] = array();
 
     foreach (array('width', 'height') as $setting) {
-      $element['#options'][$setting] = isset($file->override[$setting]) ? $file->override[$setting] : $display['settings'][$setting];
+      $options[$setting] = isset($file->override[$setting]) ? $file->override[$setting] : $display['settings'][$setting];
     }
-    return $element;
+
+    // Let's add the language to the options.
+    global $language;
+    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
+    $languages = $wrapper->getAvailableVideoLanguage();
+    $video_language = 'en';
+    if (in_array($language->language, $languages)) {
+      $video_language = $language->language;
+    }
+    $options['lg'] = $video_language;
+
+    return array(
+      '#theme' => 'media_avportal_video',
+      '#uri' => $file->uri,
+      '#options' => $options,
+    );
   }
 }
 
@@ -87,7 +98,7 @@ function _avportal_validate_video_width_and_height($element, &$form_state, $form
   // Check if the value is a number with an optional decimal or
   // percentage sign, or "auto".
   if (!empty($element['#value']) && !preg_match('/^(auto|([0-9]*(\.[0-9]+)?%?))$/', $element['#value'])) {
-    form_error($element, t("The value entered for @dimension is invalid. Please insert a unitless integer for pixels, a percent, or 'auto'. Note that percent and auto may not function correctly depending on the browser and doctype.", array('@dimension' => $element['#title'])));
+    form_error($element, t("The value entered for @dimension is invalid. Please insert an unitless integer for pixels, a percent, or 'auto'. Note that percent and auto may not function correctly depending on the browser and doctype.", array('@dimension' => $element['#title'])));
   }
 }
 
@@ -95,20 +106,30 @@ function _avportal_validate_video_width_and_height($element, &$form_state, $form
  * Implements hook_file_formatter_FORMATTER_view().
  */
 function media_avportal_file_formatter_image_view($file, $display) {
-  if (isset($file->filemime) && $file->filemime == 'video/avportal') {
+  $scheme = file_uri_scheme($file->uri);
+  if ($scheme != 'avportal') {
+    return;
+  }
 
-    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
-    $image_style = $display['settings']['image_style'];
-    $valid_image_styles = image_style_options(FALSE);
-    $video_thumb = $wrapper->getVideoThumb();
-    $element = array(
-      '#theme' => 'image_style',
-      '#style_name' => $image_style,
-      '#path' => $wrapper->getLocalThumbnailPath($video_thumb),
+  $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
+  $image_style = $display['settings']['image_style'];
+  $valid_image_styles = image_style_options(FALSE);
+  $path = $wrapper->getLocalThumbnailPath();
+
+  if (empty($image_style) || !isset($valid_image_styles[$image_style])) {
+    return array(
+      '#theme' => 'image',
+      '#path' => str_replace('http:', '', $path),
       '#alt' => isset($file->override['attributes']['alt']) ? $file->override['attributes']['alt'] : $file->filename,
     );
-    return $element;
   }
+
+  return array(
+    '#theme' => 'image_style',
+    '#style_name' => $image_style,
+    '#path' => $path,
+    '#alt' => isset($file->override['attributes']['alt']) ? $file->override['attributes']['alt'] : $file->filename,
+  );
 }
 
 /**
diff --git a/includes/themes/media-avportal-video.tpl.php b/includes/themes/media-avportal-video.tpl.php
index 4a426f6..3fb7f5c 100644
--- a/includes/themes/media-avportal-video.tpl.php
+++ b/includes/themes/media-avportal-video.tpl.php
@@ -22,5 +22,5 @@
     width="<?php print $width; ?>" 
     height="<?php print $height; ?>" frameborder="0" allowfullscreen="" mozallowfullscreen="" webkitallowfullscreen="" 
     id="videoplayer<?php print $video_id; ?>" scrolling="no" 
-    src="https://ec.europa.eu/avservices/play.cfm?sitelang=en&amp;ref=<?php print $video_id; ?>&amp;starttime=0&amp;endtime=0&amp;videolang=INT">
+    src="<?php print $url; ?>">
 </iframe>
diff --git a/includes/themes/media_avportal.theme.inc b/includes/themes/media_avportal.theme.inc
index 18a917e..b4eabba 100644
--- a/includes/themes/media_avportal.theme.inc
+++ b/includes/themes/media_avportal.theme.inc
@@ -14,6 +14,8 @@ function media_avportal_preprocess_media_avportal_video(&$variables) {
   $parts = $wrapper->get_parameters();
   $variables['video_id'] = check_plain($parts['v']);
 
+  $variables['url'] = $wrapper->getExternalUrl() . '&lg=' . $variables['options']['lg'];
+
   // Add some options as their own template variables.
   foreach (array('width', 'height') as $theme_var) {
     $variables[$theme_var] = $variables['options'][$theme_var];
diff --git a/media_avportal.info b/media_avportal.info
index 1a463ee..71ccb74 100644
--- a/media_avportal.info
+++ b/media_avportal.info
@@ -1,12 +1,17 @@
 name = Media: AV Portal
-description = Provides AV Portal support for the Media module.
+description = Adds AV Portal as a supported media provider.
 package = "Media"
-core = 7.x
-files[] = includes/MediaInternetAvportalHandler.inc
+
+files[] = includes/MediaAvportalService.inc
+files[] = includes/MediaAvPortalMedia.inc
+files[] = includes/MediaAvPortalMalformedQueryException.inc
+files[] = includes/MediaAvPortalServiceException.inc
+files[] = includes/MediaAvportalMediaNotAccessibleException.inc
+files[] = includes/MediaAvportalHandler.inc
 files[] = includes/MediaAvportalStreamWrapper.inc
 
 dependencies[] = media
 dependencies[] = media_internet
-php = 5.2.4
+php = 5.6
 
 version = "7.x-1.0"
diff --git a/media_avportal.module b/media_avportal.module
index 45bb401..9b9f87c 100644
--- a/media_avportal.module
+++ b/media_avportal.module
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * @file
  * Core feature module.
@@ -10,11 +11,13 @@ include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'media_avportal') . '
 // Hooks and callbacks for integrating with File Entity module for display.
 include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'media_avportal') . '/includes/media_avportal.formatters.inc';
 
+define('MEDIA_AVPORTAL_SERVICE_URL', 'https://ec.europa.eu/tools/b2services/proxyTEST/avssearch/avsportal/avshandler');
+
 /**
  * Implements hook_media_internet_providers().
  */
 function media_avportal_media_internet_providers() {
-  $info['MediaInternetAvportalHandler'] = array('title' => t('AV Portal'));
+  $info['MediaAvportalHandler'] = array('title' => t('AV Portal'));
   return $info;
 }
 
